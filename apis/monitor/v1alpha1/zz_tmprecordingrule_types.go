/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TmpRecordingRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TmpRecordingRuleParameters struct {

	// Recording rule group.
	// +kubebuilder:validation:Required
	Group *string `json:"group" tf:"group,omitempty"`

	// Instance id.
	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// Recording rule name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Rule state.
	// +kubebuilder:validation:Optional
	RuleState *float64 `json:"ruleState,omitempty" tf:"rule_state,omitempty"`
}

// TmpRecordingRuleSpec defines the desired state of TmpRecordingRule
type TmpRecordingRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpRecordingRuleParameters `json:"forProvider"`
}

// TmpRecordingRuleStatus defines the observed state of TmpRecordingRule.
type TmpRecordingRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpRecordingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpRecordingRule is the Schema for the TmpRecordingRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TmpRecordingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TmpRecordingRuleSpec   `json:"spec"`
	Status            TmpRecordingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpRecordingRuleList contains a list of TmpRecordingRules
type TmpRecordingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpRecordingRule `json:"items"`
}

// Repository type metadata.
var (
	TmpRecordingRule_Kind             = "TmpRecordingRule"
	TmpRecordingRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpRecordingRule_Kind}.String()
	TmpRecordingRule_KindAPIVersion   = TmpRecordingRule_Kind + "." + CRDGroupVersion.String()
	TmpRecordingRule_GroupVersionKind = CRDGroupVersion.WithKind(TmpRecordingRule_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpRecordingRule{}, &TmpRecordingRuleList{})
}
