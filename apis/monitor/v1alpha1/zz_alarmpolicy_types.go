/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmPolicyObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type AlarmPolicyParameters struct {

	// A list of metric trigger condition.
	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// ID of trigger condition template.
	// +kubebuilder:validation:Optional
	ConditonTemplateID *float64 `json:"conditonTemplateId,omitempty" tf:"conditon_template_id,omitempty"`

	// Whether to enable, default is `1`.
	// +kubebuilder:validation:Optional
	Enable *float64 `json:"enable,omitempty" tf:"enable,omitempty"`

	// A list of event trigger condition.
	// +kubebuilder:validation:Optional
	EventConditions []EventConditionsParameters `json:"eventConditions,omitempty" tf:"event_conditions,omitempty"`

	// The type of monitor.
	// +kubebuilder:validation:Required
	MonitorType *string `json:"monitorType" tf:"monitor_type,omitempty"`

	// The type of alarm.
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// List of notification rule IDs.
	// +crossplane:generate:reference:type=AlarmNotice
	// +kubebuilder:validation:Optional
	NoticeIds []*string `json:"noticeIds,omitempty" tf:"notice_ids,omitempty"`

	// +kubebuilder:validation:Optional
	NoticeIdsRefs []v1.Reference `json:"noticeIdsRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	NoticeIdsSelector *v1.Selector `json:"noticeIdsSelector,omitempty" tf:"-"`

	// The name of policy.
	// +kubebuilder:validation:Required
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`

	// Policy tag to bind object.
	// +kubebuilder:validation:Optional
	PolicyTag []PolicyTagParameters `json:"policyTag,omitempty" tf:"policy_tag,omitempty"`

	// Project ID. For products with different projects, a value other than -1 must be passed in.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The remark of policy group.
	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Triggered task list.
	// +kubebuilder:validation:Optional
	TriggerTasks []TriggerTasksParameters `json:"triggerTasks,omitempty" tf:"trigger_tasks,omitempty"`
}

type ConditionsObservation struct {
}

type ConditionsParameters struct {

	// The and or relation of indicator alarm rule.
	// +kubebuilder:validation:Optional
	IsUnionRule *float64 `json:"isUnionRule,omitempty" tf:"is_union_rule,omitempty"`

	// A list of metric trigger condition.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type EventConditionsFilterObservation struct {
}

type EventConditionsFilterParameters struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// +kubebuilder:validation:Optional
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EventConditionsObservation struct {
}

type EventConditionsParameters struct {

	// Number of periods.
	// +kubebuilder:validation:Optional
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Metric display name, which is used in the output parameter.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
	// +kubebuilder:validation:Optional
	Filter []EventConditionsFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether the alarm frequency increases exponentially.
	// +kubebuilder:validation:Optional
	IsPowerNotice *float64 `json:"isPowerNotice,omitempty" tf:"is_power_notice,omitempty"`

	// Metric name or event name.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Alarm interval in seconds.
	// +kubebuilder:validation:Optional
	NoticeFrequency *float64 `json:"noticeFrequency,omitempty" tf:"notice_frequency,omitempty"`

	// Operator.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Statistical period in seconds.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Trigger condition type.
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// Unit, which is used in the output parameter.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Threshold.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type FilterObservation struct {
}

type FilterParameters struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// +kubebuilder:validation:Optional
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PolicyTagObservation struct {
}

type PolicyTagParameters struct {

	// Tag key.
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// Tag value.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// Number of periods.
	// +kubebuilder:validation:Optional
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Metric display name, which is used in the output parameter.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether the alarm frequency increases exponentially.
	// +kubebuilder:validation:Optional
	IsPowerNotice *float64 `json:"isPowerNotice,omitempty" tf:"is_power_notice,omitempty"`

	// Metric name or event name.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Alarm interval in seconds.
	// +kubebuilder:validation:Optional
	NoticeFrequency *float64 `json:"noticeFrequency,omitempty" tf:"notice_frequency,omitempty"`

	// Operator.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Statistical period in seconds.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Trigger condition type.
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// Unit, which is used in the output parameter.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Threshold.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TriggerTasksObservation struct {
}

type TriggerTasksParameters struct {

	// Configuration information in JSON format.
	// +kubebuilder:validation:Required
	TaskConfig *string `json:"taskConfig" tf:"task_config,omitempty"`

	// Triggered task type.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// AlarmPolicySpec defines the desired state of AlarmPolicy
type AlarmPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlarmPolicyParameters `json:"forProvider"`
}

// AlarmPolicyStatus defines the observed state of AlarmPolicy.
type AlarmPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlarmPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmPolicy is the Schema for the AlarmPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type AlarmPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlarmPolicySpec   `json:"spec"`
	Status            AlarmPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmPolicyList contains a list of AlarmPolicys
type AlarmPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlarmPolicy `json:"items"`
}

// Repository type metadata.
var (
	AlarmPolicy_Kind             = "AlarmPolicy"
	AlarmPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlarmPolicy_Kind}.String()
	AlarmPolicy_KindAPIVersion   = AlarmPolicy_Kind + "." + CRDGroupVersion.String()
	AlarmPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AlarmPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AlarmPolicy{}, &AlarmPolicyList{})
}
