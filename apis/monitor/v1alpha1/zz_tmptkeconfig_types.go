/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PodMonitorsObservation struct {
}

type PodMonitorsParameters struct {

	// Config.
	// +kubebuilder:validation:Required
	Config *string `json:"config" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type RawJobsObservation struct {
}

type RawJobsParameters struct {

	// Config.
	// +kubebuilder:validation:Required
	Config *string `json:"config" tf:"config,omitempty"`

	// Name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type ServiceMonitorsObservation struct {
}

type ServiceMonitorsParameters struct {

	// Config.
	// +kubebuilder:validation:Required
	Config *string `json:"config" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type TmpTkeConfigObservation struct {
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TmpTkeConfigParameters struct {

	// ID of cluster.
	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// Type of cluster.
	// +kubebuilder:validation:Required
	ClusterType *string `json:"clusterType" tf:"cluster_type,omitempty"`

	// ID of instance.
	// +crossplane:generate:reference:type=TmpInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Configuration of the pod monitors.
	// +kubebuilder:validation:Optional
	PodMonitors []PodMonitorsParameters `json:"podMonitors,omitempty" tf:"pod_monitors,omitempty"`

	// Configuration of the native prometheus job.
	// +kubebuilder:validation:Optional
	RawJobs []RawJobsParameters `json:"rawJobs,omitempty" tf:"raw_jobs,omitempty"`

	// Configuration of the service monitors.
	// +kubebuilder:validation:Optional
	ServiceMonitors []ServiceMonitorsParameters `json:"serviceMonitors,omitempty" tf:"service_monitors,omitempty"`
}

// TmpTkeConfigSpec defines the desired state of TmpTkeConfig
type TmpTkeConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpTkeConfigParameters `json:"forProvider"`
}

// TmpTkeConfigStatus defines the observed state of TmpTkeConfig.
type TmpTkeConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpTkeConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeConfig is the Schema for the TmpTkeConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TmpTkeConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TmpTkeConfigSpec   `json:"spec"`
	Status            TmpTkeConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeConfigList contains a list of TmpTkeConfigs
type TmpTkeConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpTkeConfig `json:"items"`
}

// Repository type metadata.
var (
	TmpTkeConfig_Kind             = "TmpTkeConfig"
	TmpTkeConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpTkeConfig_Kind}.String()
	TmpTkeConfig_KindAPIVersion   = TmpTkeConfig_Kind + "." + CRDGroupVersion.String()
	TmpTkeConfig_GroupVersionKind = CRDGroupVersion.WithKind(TmpTkeConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpTkeConfig{}, &TmpTkeConfigList{})
}
