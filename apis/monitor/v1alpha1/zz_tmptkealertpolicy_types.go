/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertManagerObservation struct {
}

type AlertManagerParameters struct {

	// The ID of the cluster where the alertmanager is deployed. Note: This field may return null, indicating that a valid value could not be retrieved.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Alertmanager is deployed in the cluster type. Note: This field may return null, indicating that a valid value could not be retrieved.
	// +kubebuilder:validation:Optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Alertmanager url.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type AlertRuleObservation struct {
}

type AlertRuleParameters struct {

	// If the alarm policy is derived from the CRD resource definition of the user cluster, the ClusterId is the cluster ID to which it belongs.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Alarm policy ID. Note: This field may return null, indicating that a valid value could not be retrieved.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Policy name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Alarm channels, which may be returned using null in the template.
	// +kubebuilder:validation:Optional
	Notification []NotificationParameters `json:"notification,omitempty" tf:"notification,omitempty"`

	// A list of rules.
	// +kubebuilder:validation:Required
	Rules []AlertRuleRulesParameters `json:"rules" tf:"rules,omitempty"`

	// If the alarm is sent from a template, the TemplateId is the template id.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	// Last modified time.
	// +kubebuilder:validation:Optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type AlertRuleRulesObservation struct {
}

type AlertRuleRulesParameters struct {

	// Refer to annotations in prometheus rule.
	// +kubebuilder:validation:Optional
	Annotations []RulesAnnotationsParameters `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// A description of the rule.
	// +kubebuilder:validation:Optional
	Describe *string `json:"describe,omitempty" tf:"describe,omitempty"`

	// Time of duration.
	// +kubebuilder:validation:Required
	For *string `json:"for" tf:"for,omitempty"`

	// Extra labels.
	// +kubebuilder:validation:Required
	Labels []RulesLabelsParameters `json:"labels" tf:"labels,omitempty"`

	// Rule name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Prometheus statement.
	// +kubebuilder:validation:Required
	Rule *string `json:"rule" tf:"rule,omitempty"`

	// Alarm rule status.
	// +kubebuilder:validation:Optional
	RuleState *float64 `json:"ruleState,omitempty" tf:"rule_state,omitempty"`

	// Alert sending template.
	// +kubebuilder:validation:Required
	Template *string `json:"template" tf:"template,omitempty"`
}

type NotificationObservation struct {
}

type NotificationParameters struct {

	// If Type is alertmanager, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved..
	// +kubebuilder:validation:Optional
	AlertManager []AlertManagerParameters `json:"alertManager,omitempty" tf:"alert_manager,omitempty"`

	// Whether it is enabled.
	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Alarm notification method. At present, there are SMS, EMAIL, CALL, WECHAT methods.
	// +kubebuilder:validation:Optional
	NotifyWay []*string `json:"notifyWay,omitempty" tf:"notify_way,omitempty"`

	// Telephone alerts reach notifications.
	// +kubebuilder:validation:Optional
	PhoneArriveNotice *bool `json:"phoneArriveNotice,omitempty" tf:"phone_arrive_notice,omitempty"`

	// Effective end timeTelephone alarm wheel interval. Units: Seconds.
	// +kubebuilder:validation:Optional
	PhoneCircleInterval *float64 `json:"phoneCircleInterval,omitempty" tf:"phone_circle_interval,omitempty"`

	// PhoneCircleTimes.
	// +kubebuilder:validation:Optional
	PhoneCircleTimes *float64 `json:"phoneCircleTimes,omitempty" tf:"phone_circle_times,omitempty"`

	// Telephone alarm wheel intervals. Units: Seconds.
	// +kubebuilder:validation:Optional
	PhoneInnerInterval *float64 `json:"phoneInnerInterval,omitempty" tf:"phone_inner_interval,omitempty"`

	// Telephone alarm sequence.
	// +kubebuilder:validation:Optional
	PhoneNotifyOrder []*float64 `json:"phoneNotifyOrder,omitempty" tf:"phone_notify_order,omitempty"`

	// Alert Receiving Group (User Group).
	// +kubebuilder:validation:Optional
	ReceiverGroups []*string `json:"receiverGroups,omitempty" tf:"receiver_groups,omitempty"`

	// Convergence time.
	// +kubebuilder:validation:Optional
	RepeatInterval *string `json:"repeatInterval,omitempty" tf:"repeat_interval,omitempty"`

	// Effective end time.
	// +kubebuilder:validation:Optional
	TimeRangeEnd *string `json:"timeRangeEnd,omitempty" tf:"time_range_end,omitempty"`

	// The time from which it takes effect.
	// +kubebuilder:validation:Optional
	TimeRangeStart *string `json:"timeRangeStart,omitempty" tf:"time_range_start,omitempty"`

	// The channel type, which defaults to amp, supports the following `amp`, `webhook`, `alertmanager`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// If Type is webhook, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved.
	// +kubebuilder:validation:Optional
	WebHook *string `json:"webHook,omitempty" tf:"web_hook,omitempty"`
}

type RulesAnnotationsObservation struct {
}

type RulesAnnotationsParameters struct {

	// Name of map.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of map.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type RulesLabelsObservation struct {
}

type RulesLabelsParameters struct {

	// Name of map.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of map.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type TmpTkeAlertPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TmpTkeAlertPolicyParameters struct {

	// Alarm notification channels.
	// +kubebuilder:validation:Required
	AlertRule []AlertRuleParameters `json:"alertRule" tf:"alert_rule,omitempty"`

	// Instance Id.
	// +crossplane:generate:reference:type=TmpInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`
}

// TmpTkeAlertPolicySpec defines the desired state of TmpTkeAlertPolicy
type TmpTkeAlertPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpTkeAlertPolicyParameters `json:"forProvider"`
}

// TmpTkeAlertPolicyStatus defines the observed state of TmpTkeAlertPolicy.
type TmpTkeAlertPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpTkeAlertPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeAlertPolicy is the Schema for the TmpTkeAlertPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TmpTkeAlertPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TmpTkeAlertPolicySpec   `json:"spec"`
	Status            TmpTkeAlertPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeAlertPolicyList contains a list of TmpTkeAlertPolicys
type TmpTkeAlertPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpTkeAlertPolicy `json:"items"`
}

// Repository type metadata.
var (
	TmpTkeAlertPolicy_Kind             = "TmpTkeAlertPolicy"
	TmpTkeAlertPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpTkeAlertPolicy_Kind}.String()
	TmpTkeAlertPolicy_KindAPIVersion   = TmpTkeAlertPolicy_Kind + "." + CRDGroupVersion.String()
	TmpTkeAlertPolicy_GroupVersionKind = CRDGroupVersion.WithKind(TmpTkeAlertPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpTkeAlertPolicy{}, &TmpTkeAlertPolicyList{})
}
