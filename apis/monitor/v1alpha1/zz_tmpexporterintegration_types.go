/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TmpExporterIntegrationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TmpExporterIntegrationParameters struct {

	// Cluster ID.
	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// Integration config.
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// Instance id.
	// +crossplane:generate:reference:type=TmpInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Type.
	// +kubebuilder:validation:Required
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// Integration config.
	// +kubebuilder:validation:Required
	KubeType *float64 `json:"kubeType" tf:"kube_type,omitempty"`
}

// TmpExporterIntegrationSpec defines the desired state of TmpExporterIntegration
type TmpExporterIntegrationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpExporterIntegrationParameters `json:"forProvider"`
}

// TmpExporterIntegrationStatus defines the observed state of TmpExporterIntegration.
type TmpExporterIntegrationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpExporterIntegrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpExporterIntegration is the Schema for the TmpExporterIntegrations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TmpExporterIntegration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TmpExporterIntegrationSpec   `json:"spec"`
	Status            TmpExporterIntegrationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpExporterIntegrationList contains a list of TmpExporterIntegrations
type TmpExporterIntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpExporterIntegration `json:"items"`
}

// Repository type metadata.
var (
	TmpExporterIntegration_Kind             = "TmpExporterIntegration"
	TmpExporterIntegration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpExporterIntegration_Kind}.String()
	TmpExporterIntegration_KindAPIVersion   = TmpExporterIntegration_Kind + "." + CRDGroupVersion.String()
	TmpExporterIntegration_GroupVersionKind = CRDGroupVersion.WithKind(TmpExporterIntegration_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpExporterIntegration{}, &TmpExporterIntegrationList{})
}
