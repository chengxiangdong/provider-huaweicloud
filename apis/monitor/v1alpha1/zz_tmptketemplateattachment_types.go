/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TargetsObservation struct {
}

type TargetsParameters struct {

	// ID of the cluster.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Name the cluster.
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Cluster type.
	// +kubebuilder:validation:Optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// instance id.
	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// Name of the prometheus instance.
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// target area.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Last sync template time.
	// +kubebuilder:validation:Optional
	SyncTime *string `json:"syncTime,omitempty" tf:"sync_time,omitempty"`

	// Template version currently in use.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TmpTkeTemplateAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TmpTkeTemplateAttachmentParameters struct {

	// Sync target details.
	// +kubebuilder:validation:Required
	Targets []TargetsParameters `json:"targets" tf:"targets,omitempty"`

	// The ID of the template, which is used for the outgoing reference.
	// +crossplane:generate:reference:type=TmpTkeTemplate
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateIDRef *v1.Reference `json:"templateIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TemplateIDSelector *v1.Selector `json:"templateIdSelector,omitempty" tf:"-"`
}

// TmpTkeTemplateAttachmentSpec defines the desired state of TmpTkeTemplateAttachment
type TmpTkeTemplateAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpTkeTemplateAttachmentParameters `json:"forProvider"`
}

// TmpTkeTemplateAttachmentStatus defines the observed state of TmpTkeTemplateAttachment.
type TmpTkeTemplateAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpTkeTemplateAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeTemplateAttachment is the Schema for the TmpTkeTemplateAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TmpTkeTemplateAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TmpTkeTemplateAttachmentSpec   `json:"spec"`
	Status            TmpTkeTemplateAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeTemplateAttachmentList contains a list of TmpTkeTemplateAttachments
type TmpTkeTemplateAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpTkeTemplateAttachment `json:"items"`
}

// Repository type metadata.
var (
	TmpTkeTemplateAttachment_Kind             = "TmpTkeTemplateAttachment"
	TmpTkeTemplateAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpTkeTemplateAttachment_Kind}.String()
	TmpTkeTemplateAttachment_KindAPIVersion   = TmpTkeTemplateAttachment_Kind + "." + CRDGroupVersion.String()
	TmpTkeTemplateAttachment_GroupVersionKind = CRDGroupVersion.WithKind(TmpTkeTemplateAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpTkeTemplateAttachment{}, &TmpTkeTemplateAttachmentList{})
}
