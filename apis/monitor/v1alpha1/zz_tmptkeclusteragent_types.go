/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AgentsObservation struct {
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AgentsParameters struct {

	// An id identify the cluster, like `cls-xxxxxx`.
	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// Type of cluster.
	// +kubebuilder:validation:Required
	ClusterType *string `json:"clusterType" tf:"cluster_type,omitempty"`

	// Whether to enable the public network CLB.
	// +kubebuilder:validation:Required
	EnableExternal *bool `json:"enableExternal" tf:"enable_external,omitempty"`

	// All metrics collected by the cluster will carry these labels.
	// +kubebuilder:validation:Optional
	ExternalLabels []ExternalLabelsParameters `json:"externalLabels,omitempty" tf:"external_labels,omitempty"`

	// Pod configuration for components deployed in the cluster.
	// +kubebuilder:validation:Optional
	InClusterPodConfig []InClusterPodConfigParameters `json:"inClusterPodConfig,omitempty" tf:"in_cluster_pod_config,omitempty"`

	// Whether to install the default collection configuration.
	// +kubebuilder:validation:Optional
	NotInstallBasicScrape *bool `json:"notInstallBasicScrape,omitempty" tf:"not_install_basic_scrape,omitempty"`

	// Whether to collect indicators, true means drop all indicators, false means collect default indicators.
	// +kubebuilder:validation:Optional
	NotScrape *bool `json:"notScrape,omitempty" tf:"not_scrape,omitempty"`

	// Limitation of region.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

type ExternalLabelsObservation struct {
}

type ExternalLabelsParameters struct {

	// Indicator name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Index value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type InClusterPodConfigObservation struct {
}

type InClusterPodConfigParameters struct {

	// Whether to use HostNetWork.
	// +kubebuilder:validation:Required
	HostNet *bool `json:"hostNet" tf:"host_net,omitempty"`

	// Specify the pod to run the node.
	// +kubebuilder:validation:Optional
	NodeSelector []NodeSelectorParameters `json:"nodeSelector,omitempty" tf:"node_selector,omitempty"`

	// Tolerate Stain.
	// +kubebuilder:validation:Optional
	Tolerations []TolerationsParameters `json:"tolerations,omitempty" tf:"tolerations,omitempty"`
}

type NodeSelectorObservation struct {
}

type NodeSelectorParameters struct {

	// The pod configuration name of the component deployed in the cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Pod configuration values for components deployed in the cluster.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TmpTkeClusterAgentObservation struct {
	Agents []AgentsObservation `json:"agents,omitempty" tf:"agents,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TmpTkeClusterAgentParameters struct {

	// agent list.
	// +kubebuilder:validation:Required
	Agents []AgentsParameters `json:"agents" tf:"agents,omitempty"`

	// Instance Id.
	// +crossplane:generate:reference:type=TmpInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`
}

type TolerationsObservation struct {
}

type TolerationsParameters struct {

	// blemish effect to match.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// The taint key to which the tolerance applies.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// key-value relationship.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`
}

// TmpTkeClusterAgentSpec defines the desired state of TmpTkeClusterAgent
type TmpTkeClusterAgentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpTkeClusterAgentParameters `json:"forProvider"`
}

// TmpTkeClusterAgentStatus defines the observed state of TmpTkeClusterAgent.
type TmpTkeClusterAgentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpTkeClusterAgentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeClusterAgent is the Schema for the TmpTkeClusterAgents API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TmpTkeClusterAgent struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TmpTkeClusterAgentSpec   `json:"spec"`
	Status            TmpTkeClusterAgentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeClusterAgentList contains a list of TmpTkeClusterAgents
type TmpTkeClusterAgentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpTkeClusterAgent `json:"items"`
}

// Repository type metadata.
var (
	TmpTkeClusterAgent_Kind             = "TmpTkeClusterAgent"
	TmpTkeClusterAgent_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpTkeClusterAgent_Kind}.String()
	TmpTkeClusterAgent_KindAPIVersion   = TmpTkeClusterAgent_Kind + "." + CRDGroupVersion.String()
	TmpTkeClusterAgent_GroupVersionKind = CRDGroupVersion.WithKind(TmpTkeClusterAgent_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpTkeClusterAgent{}, &TmpTkeClusterAgentList{})
}
