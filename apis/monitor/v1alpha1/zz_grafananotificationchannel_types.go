/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GrafanaNotificationChannelObservation struct {
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GrafanaNotificationChannelParameters struct {

	// channel name.
	// +kubebuilder:validation:Optional
	ChannelName *string `json:"channelName,omitempty" tf:"channel_name,omitempty"`

	// extra grafana organization id list, default to 1 representing Main Org.
	// +kubebuilder:validation:Optional
	ExtraOrgIds []*string `json:"extraOrgIds,omitempty" tf:"extra_org_ids,omitempty"`

	// grafana instance id.
	// +crossplane:generate:reference:type=GrafanaInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Grafana organization which channel will be installed, default to 1 representing Main Org.
	// +kubebuilder:validation:Optional
	OrgID *float64 `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// cloud monitor notification template notice-id list.
	// +kubebuilder:validation:Optional
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`
}

// GrafanaNotificationChannelSpec defines the desired state of GrafanaNotificationChannel
type GrafanaNotificationChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GrafanaNotificationChannelParameters `json:"forProvider"`
}

// GrafanaNotificationChannelStatus defines the observed state of GrafanaNotificationChannel.
type GrafanaNotificationChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GrafanaNotificationChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GrafanaNotificationChannel is the Schema for the GrafanaNotificationChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type GrafanaNotificationChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GrafanaNotificationChannelSpec   `json:"spec"`
	Status            GrafanaNotificationChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GrafanaNotificationChannelList contains a list of GrafanaNotificationChannels
type GrafanaNotificationChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GrafanaNotificationChannel `json:"items"`
}

// Repository type metadata.
var (
	GrafanaNotificationChannel_Kind             = "GrafanaNotificationChannel"
	GrafanaNotificationChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GrafanaNotificationChannel_Kind}.String()
	GrafanaNotificationChannel_KindAPIVersion   = GrafanaNotificationChannel_Kind + "." + CRDGroupVersion.String()
	GrafanaNotificationChannel_GroupVersionKind = CRDGroupVersion.WithKind(GrafanaNotificationChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&GrafanaNotificationChannel{}, &GrafanaNotificationChannelList{})
}
