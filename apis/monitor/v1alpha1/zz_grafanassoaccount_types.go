/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GrafanaSSOAccountObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GrafanaSSOAccountParameters struct {

	// grafana instance id.
	// +crossplane:generate:reference:type=GrafanaInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// account related description.
	// +kubebuilder:validation:Optional
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// grafana role.
	// +kubebuilder:validation:Optional
	Role []RoleParameters `json:"role,omitempty" tf:"role,omitempty"`

	// sub account uin of specific user.
	// +kubebuilder:validation:Required
	UserID *string `json:"userId" tf:"user_id,omitempty"`
}

type RoleObservation struct {
}

type RoleParameters struct {

	// Grafana organization id string.
	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`

	// Grafana role, one of {Admin,Editor,Viewer}.
	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// GrafanaSSOAccountSpec defines the desired state of GrafanaSSOAccount
type GrafanaSSOAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GrafanaSSOAccountParameters `json:"forProvider"`
}

// GrafanaSSOAccountStatus defines the observed state of GrafanaSSOAccount.
type GrafanaSSOAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GrafanaSSOAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GrafanaSSOAccount is the Schema for the GrafanaSSOAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type GrafanaSSOAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GrafanaSSOAccountSpec   `json:"spec"`
	Status            GrafanaSSOAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GrafanaSSOAccountList contains a list of GrafanaSSOAccounts
type GrafanaSSOAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GrafanaSSOAccount `json:"items"`
}

// Repository type metadata.
var (
	GrafanaSSOAccount_Kind             = "GrafanaSSOAccount"
	GrafanaSSOAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GrafanaSSOAccount_Kind}.String()
	GrafanaSSOAccount_KindAPIVersion   = GrafanaSSOAccount_Kind + "." + CRDGroupVersion.String()
	GrafanaSSOAccount_GroupVersionKind = CRDGroupVersion.WithKind(GrafanaSSOAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&GrafanaSSOAccount{}, &GrafanaSSOAccountList{})
}
