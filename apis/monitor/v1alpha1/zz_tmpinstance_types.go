/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TmpInstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TmpInstanceParameters struct {

	// Data retention time.
	// +kubebuilder:validation:Required
	DataRetentionTime *float64 `json:"dataRetentionTime" tf:"data_retention_time,omitempty"`

	// Instance name.
	// +kubebuilder:validation:Required
	InstanceName *string `json:"instanceName" tf:"instance_name,omitempty"`

	// Subnet Id.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Tag description list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Vpc Id.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcidSelector,omitempty" tf:"-"`

	// Available zone.
	// +kubebuilder:validation:Required
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

// TmpInstanceSpec defines the desired state of TmpInstance
type TmpInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpInstanceParameters `json:"forProvider"`
}

// TmpInstanceStatus defines the observed state of TmpInstance.
type TmpInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpInstance is the Schema for the TmpInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TmpInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TmpInstanceSpec   `json:"spec"`
	Status            TmpInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpInstanceList contains a list of TmpInstances
type TmpInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpInstance `json:"items"`
}

// Repository type metadata.
var (
	TmpInstance_Kind             = "TmpInstance"
	TmpInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpInstance_Kind}.String()
	TmpInstance_KindAPIVersion   = TmpInstance_Kind + "." + CRDGroupVersion.String()
	TmpInstance_GroupVersionKind = CRDGroupVersion.WithKind(TmpInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpInstance{}, &TmpInstanceList{})
}
