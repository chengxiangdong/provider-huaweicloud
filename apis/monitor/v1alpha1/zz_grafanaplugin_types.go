/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GrafanaPluginObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GrafanaPluginParameters struct {

	// Grafana instance id.
	// +crossplane:generate:reference:type=GrafanaInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Plugin id.
	// +kubebuilder:validation:Required
	PluginID *string `json:"pluginId" tf:"plugin_id,omitempty"`

	// Plugin version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// GrafanaPluginSpec defines the desired state of GrafanaPlugin
type GrafanaPluginSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GrafanaPluginParameters `json:"forProvider"`
}

// GrafanaPluginStatus defines the observed state of GrafanaPlugin.
type GrafanaPluginStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GrafanaPluginObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GrafanaPlugin is the Schema for the GrafanaPlugins API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type GrafanaPlugin struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GrafanaPluginSpec   `json:"spec"`
	Status            GrafanaPluginStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GrafanaPluginList contains a list of GrafanaPlugins
type GrafanaPluginList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GrafanaPlugin `json:"items"`
}

// Repository type metadata.
var (
	GrafanaPlugin_Kind             = "GrafanaPlugin"
	GrafanaPlugin_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GrafanaPlugin_Kind}.String()
	GrafanaPlugin_KindAPIVersion   = GrafanaPlugin_Kind + "." + CRDGroupVersion.String()
	GrafanaPlugin_GroupVersionKind = CRDGroupVersion.WithKind(GrafanaPlugin_Kind)
)

func init() {
	SchemeBuilder.Register(&GrafanaPlugin{}, &GrafanaPluginList{})
}
