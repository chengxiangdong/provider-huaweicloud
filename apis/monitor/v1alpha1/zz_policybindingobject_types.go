/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DimensionsObservation struct {
	UniqueID *string `json:"uniqueId,omitempty" tf:"unique_id,omitempty"`
}

type DimensionsParameters struct {

	// Represents a collection of dimensions of an object instance, json format.eg:'{"unInstanceId":"ins-ot3cq4bi"}'.
	// +kubebuilder:validation:Required
	DimensionsJSON *string `json:"dimensionsJson" tf:"dimensions_json,omitempty"`
}

type PolicyBindingObjectObservation struct {
	Dimensions []DimensionsObservation `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyBindingObjectParameters struct {

	// A list objects. Each element contains the following attributes:
	// +kubebuilder:validation:Required
	Dimensions []DimensionsParameters `json:"dimensions" tf:"dimensions,omitempty"`

	// Alarm policy ID for binding objects.
	// +crossplane:generate:reference:type=AlarmPolicy
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`
}

// PolicyBindingObjectSpec defines the desired state of PolicyBindingObject
type PolicyBindingObjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyBindingObjectParameters `json:"forProvider"`
}

// PolicyBindingObjectStatus defines the observed state of PolicyBindingObject.
type PolicyBindingObjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyBindingObjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyBindingObject is the Schema for the PolicyBindingObjects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type PolicyBindingObject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyBindingObjectSpec   `json:"spec"`
	Status            PolicyBindingObjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyBindingObjectList contains a list of PolicyBindingObjects
type PolicyBindingObjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyBindingObject `json:"items"`
}

// Repository type metadata.
var (
	PolicyBindingObject_Kind             = "PolicyBindingObject"
	PolicyBindingObject_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyBindingObject_Kind}.String()
	PolicyBindingObject_KindAPIVersion   = PolicyBindingObject_Kind + "." + CRDGroupVersion.String()
	PolicyBindingObject_GroupVersionKind = CRDGroupVersion.WithKind(PolicyBindingObject_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyBindingObject{}, &PolicyBindingObjectList{})
}
