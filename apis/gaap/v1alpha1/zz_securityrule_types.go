/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecurityRuleParameters struct {

	// Policy of the rule. Valid value: `ACCEPT` and `DROP`.
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// A network address block of the request source.
	// +kubebuilder:validation:Required
	CidrIP *string `json:"cidrIp" tf:"cidr_ip,omitempty"`

	// Name of the security policy rule. Maximum length is 30.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the security policy.
	// +crossplane:generate:reference:type=SecurityPolicy
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`

	// Target port. Default value is `ALL`. Valid examples: `80`, `80,443` and `3306-20000`.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the security policy rule. Default value is `ALL`. Valid value: `TCP`, `UDP` and `ALL`.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

// SecurityRuleSpec defines the desired state of SecurityRule
type SecurityRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityRuleParameters `json:"forProvider"`
}

// SecurityRuleStatus defines the observed state of SecurityRule.
type SecurityRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityRule is the Schema for the SecurityRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type SecurityRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityRuleSpec   `json:"spec"`
	Status            SecurityRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityRuleList contains a list of SecurityRules
type SecurityRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityRule `json:"items"`
}

// Repository type metadata.
var (
	SecurityRule_Kind             = "SecurityRule"
	SecurityRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityRule_Kind}.String()
	SecurityRule_KindAPIVersion   = SecurityRule_Kind + "." + CRDGroupVersion.String()
	SecurityRule_GroupVersionKind = CRDGroupVersion.WithKind(SecurityRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityRule{}, &SecurityRuleList{})
}
