/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Layer4ListenerObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type Layer4ListenerParameters struct {

	// The way the listener gets the client IP, 0 for TOA, 1 for Proxy Protocol, default value is 0. NOTES: Only supports listeners of `TCP` protocol.
	// +kubebuilder:validation:Optional
	ClientIPMethod *float64 `json:"clientIpMethod,omitempty" tf:"client_ip_method,omitempty"`

	// Timeout of the health check response, should less than interval, default value is 2s. NOTES: Only supports listeners of `TCP` protocol and require less than `interval`.
	// +kubebuilder:validation:Optional
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// Indicates whether health check is enable, default value is `false`. NOTES: Only supports listeners of `TCP` protocol.
	// +kubebuilder:validation:Optional
	HealthCheck *bool `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Interval of the health check, default value is 5s. NOTES: Only supports listeners of `TCP` protocol.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Name of the layer4 listener, the maximum length is 30.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Port of the layer4 listener.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Protocol of the layer4 listener. Valid value: `TCP` and `UDP`.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// ID of the GAAP proxy.
	// +crossplane:generate:reference:type=Proxy
	// +kubebuilder:validation:Optional
	ProxyID *string `json:"proxyId,omitempty" tf:"proxy_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProxyIDRef *v1.Reference `json:"proxyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProxyIDSelector *v1.Selector `json:"proxyIdSelector,omitempty" tf:"-"`

	// An information list of GAAP realserver.
	// +kubebuilder:validation:Optional
	RealserverBindSet []RealserverBindSetParameters `json:"realserverBindSet,omitempty" tf:"realserver_bind_set,omitempty"`

	// Type of the realserver. Valid value: `IP` and `DOMAIN`. NOTES: when the `protocol` is specified as `TCP` and the `scheduler` is specified as `wrr`, the item can only be set to `IP`.
	// +kubebuilder:validation:Required
	RealserverType *string `json:"realserverType" tf:"realserver_type,omitempty"`

	// Scheduling policy of the layer4 listener, default value is `rr`. Valid value: `rr`, `wrr` and `lc`.
	// +kubebuilder:validation:Optional
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`
}

type RealserverBindSetObservation struct {
}

type RealserverBindSetParameters struct {

	// ID of the GAAP realserver.
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// IP of the GAAP realserver.
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Port of the GAAP realserver.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Scheduling weight, default value is `1`. The range of values is [1,100].
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// Layer4ListenerSpec defines the desired state of Layer4Listener
type Layer4ListenerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Layer4ListenerParameters `json:"forProvider"`
}

// Layer4ListenerStatus defines the observed state of Layer4Listener.
type Layer4ListenerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Layer4ListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Layer4Listener is the Schema for the Layer4Listeners API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Layer4Listener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Layer4ListenerSpec   `json:"spec"`
	Status            Layer4ListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Layer4ListenerList contains a list of Layer4Listeners
type Layer4ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Layer4Listener `json:"items"`
}

// Repository type metadata.
var (
	Layer4Listener_Kind             = "Layer4Listener"
	Layer4Listener_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Layer4Listener_Kind}.String()
	Layer4Listener_KindAPIVersion   = Layer4Listener_Kind + "." + CRDGroupVersion.String()
	Layer4Listener_GroupVersionKind = CRDGroupVersion.WithKind(Layer4Listener_Kind)
)

func init() {
	SchemeBuilder.Register(&Layer4Listener{}, &Layer4ListenerList{})
}
