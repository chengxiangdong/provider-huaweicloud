/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RealserverObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RealserverParameters struct {

	// Domain of the GAAP realserver, conflict with `ip`.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// IP of the GAAP realserver, conflict with `domain`.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Name of the GAAP realserver, the maximum length is 30.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// ID of the project within the GAAP realserver, '0' means is default project.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Tags of the GAAP realserver.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// RealserverSpec defines the desired state of Realserver
type RealserverSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RealserverParameters `json:"forProvider"`
}

// RealserverStatus defines the observed state of Realserver.
type RealserverStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RealserverObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Realserver is the Schema for the Realservers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Realserver struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RealserverSpec   `json:"spec"`
	Status            RealserverStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RealserverList contains a list of Realservers
type RealserverList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Realserver `json:"items"`
}

// Repository type metadata.
var (
	Realserver_Kind             = "Realserver"
	Realserver_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Realserver_Kind}.String()
	Realserver_KindAPIVersion   = Realserver_Kind + "." + CRDGroupVersion.String()
	Realserver_GroupVersionKind = CRDGroupVersion.WithKind(Realserver_Kind)
)

func init() {
	SchemeBuilder.Register(&Realserver{}, &RealserverList{})
}
