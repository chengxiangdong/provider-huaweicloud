/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HttpDomainObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HttpDomainParameters struct {

	// Indicates whether basic authentication is enable, default value is `false`.
	// +kubebuilder:validation:Optional
	BasicAuth *bool `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	// ID of the basic authentication.
	// +kubebuilder:validation:Optional
	BasicAuthID *string `json:"basicAuthId,omitempty" tf:"basic_auth_id,omitempty"`

	// ID of the server certificate, default value is `default`.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// ID of the client certificate, default value is `default`.
	// +kubebuilder:validation:Optional
	ClientCertificateID *string `json:"clientCertificateId,omitempty" tf:"client_certificate_id,omitempty"`

	// ID list of the poly client certificate.
	// +kubebuilder:validation:Optional
	ClientCertificateIds []*string `json:"clientCertificateIds,omitempty" tf:"client_certificate_ids,omitempty"`

	// Forward domain of the layer7 listener.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Indicates whether SSL certificate authentication is enable, default value is `false`.
	// +kubebuilder:validation:Optional
	GaapAuth *bool `json:"gaapAuth,omitempty" tf:"gaap_auth,omitempty"`

	// ID of the SSL certificate.
	// +kubebuilder:validation:Optional
	GaapAuthID *string `json:"gaapAuthId,omitempty" tf:"gaap_auth_id,omitempty"`

	// ID of the layer7 listener.
	// +crossplane:generate:reference:type=Layer7Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// Indicates whether realserver authentication is enable, default value is `false`.
	// +kubebuilder:validation:Optional
	RealserverAuth *bool `json:"realserverAuth,omitempty" tf:"realserver_auth,omitempty"`

	// CA certificate domain of the realserver. It has been deprecated.
	// +kubebuilder:validation:Optional
	RealserverCertificateDomain *string `json:"realserverCertificateDomain,omitempty" tf:"realserver_certificate_domain,omitempty"`

	// CA certificate ID of the realserver.
	// +kubebuilder:validation:Optional
	RealserverCertificateID *string `json:"realserverCertificateId,omitempty" tf:"realserver_certificate_id,omitempty"`

	// CA certificate ID list of the realserver.
	// +kubebuilder:validation:Optional
	RealserverCertificateIds []*string `json:"realserverCertificateIds,omitempty" tf:"realserver_certificate_ids,omitempty"`
}

// HttpDomainSpec defines the desired state of HttpDomain
type HttpDomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HttpDomainParameters `json:"forProvider"`
}

// HttpDomainStatus defines the observed state of HttpDomain.
type HttpDomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HttpDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HttpDomain is the Schema for the HttpDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type HttpDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HttpDomainSpec   `json:"spec"`
	Status            HttpDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HttpDomainList contains a list of HttpDomains
type HttpDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HttpDomain `json:"items"`
}

// Repository type metadata.
var (
	HttpDomain_Kind             = "HttpDomain"
	HttpDomain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HttpDomain_Kind}.String()
	HttpDomain_KindAPIVersion   = HttpDomain_Kind + "." + CRDGroupVersion.String()
	HttpDomain_GroupVersionKind = CRDGroupVersion.WithKind(HttpDomain_Kind)
)

func init() {
	SchemeBuilder.Register(&HttpDomain{}, &HttpDomainList{})
}
