/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HttpRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HttpRuleParameters struct {

	// Timeout of the health check response, default value is 2s.
	// +kubebuilder:validation:Optional
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// Forward domain of the forward rule.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// The default value of requested host which is forwarded to the realserver by the listener is `default`.
	// +kubebuilder:validation:Optional
	ForwardHost *string `json:"forwardHost,omitempty" tf:"forward_host,omitempty"`

	// Indicates whether health check is enable.
	// +kubebuilder:validation:Required
	HealthCheck *bool `json:"healthCheck" tf:"health_check,omitempty"`

	// Method of the health check. Valid value: `GET` and `HEAD`.
	// +kubebuilder:validation:Optional
	HealthCheckMethod *string `json:"healthCheckMethod,omitempty" tf:"health_check_method,omitempty"`

	// Path of health check. Maximum length is 80.
	// +kubebuilder:validation:Optional
	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path,omitempty"`

	// Return code of confirmed normal. Valid value: `100`, `200`, `300`, `400` and `500`.
	// +kubebuilder:validation:Optional
	HealthCheckStatusCodes []*float64 `json:"healthCheckStatusCodes,omitempty" tf:"health_check_status_codes,omitempty"`

	// Interval of the health check, default value is 5s.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// ID of the layer7 listener.
	// +crossplane:generate:reference:type=Layer7Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// Path of the forward rule. Maximum length is 80.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// Type of the realserver. Valid value: `IP` and `DOMAIN`.
	// +kubebuilder:validation:Required
	RealserverType *string `json:"realserverType" tf:"realserver_type,omitempty"`

	// An information list of GAAP realserver.
	// +kubebuilder:validation:Optional
	Realservers []RealserversParameters `json:"realservers,omitempty" tf:"realservers,omitempty"`

	// Scheduling policy of the forward rule, default value is `rr`. Valid value: `rr`, `wrr` and `lc`.
	// +kubebuilder:validation:Optional
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// ServerNameIndication (SNI) is required when the SNI switch is turned on.
	// +kubebuilder:validation:Optional
	Sni *string `json:"sni,omitempty" tf:"sni,omitempty"`

	// ServerNameIndication (SNI) switch. ON means on and OFF means off.
	// +kubebuilder:validation:Optional
	SniSwitch *string `json:"sniSwitch,omitempty" tf:"sni_switch,omitempty"`
}

type RealserversObservation struct {
}

type RealserversParameters struct {

	// ID of the GAAP realserver.
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// IP of the GAAP realserver.
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Port of the GAAP realserver.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Scheduling weight, default value is `1`. Valid value ranges: (1~100).
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// HttpRuleSpec defines the desired state of HttpRule
type HttpRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HttpRuleParameters `json:"forProvider"`
}

// HttpRuleStatus defines the observed state of HttpRule.
type HttpRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HttpRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HttpRule is the Schema for the HttpRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type HttpRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HttpRuleSpec   `json:"spec"`
	Status            HttpRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HttpRuleList contains a list of HttpRules
type HttpRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HttpRule `json:"items"`
}

// Repository type metadata.
var (
	HttpRule_Kind             = "HttpRule"
	HttpRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HttpRule_Kind}.String()
	HttpRule_KindAPIVersion   = HttpRule_Kind + "." + CRDGroupVersion.String()
	HttpRule_GroupVersionKind = CRDGroupVersion.WithKind(HttpRule_Kind)
)

func init() {
	SchemeBuilder.Register(&HttpRule{}, &HttpRuleList{})
}
