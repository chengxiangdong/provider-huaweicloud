/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L7RuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type L7RuleParameters struct {

	// Domain that the layer 7 rule works for. Valid string length ranges from 0 to 80.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// HTTP Status Code. The default is `26`. Valid value ranges: [1~31]. `1` means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. `16` means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values.
	// +kubebuilder:validation:Optional
	HealthCheckCode *float64 `json:"healthCheckCode,omitempty" tf:"health_check_code,omitempty"`

	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10].
	// +kubebuilder:validation:Optional
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. Valid value ranges: [10~60]sec. The default is 15 sec.
	// +kubebuilder:validation:Optional
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// Methods of health check. The default is 'HEAD', the available value are 'HEAD' and 'GET'.
	// +kubebuilder:validation:Optional
	HealthCheckMethod *string `json:"healthCheckMethod,omitempty" tf:"health_check_method,omitempty"`

	// Path of health check. The default is `/`.
	// +kubebuilder:validation:Optional
	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path,omitempty"`

	// Indicates whether health check is enabled. The default is `false`.
	// +kubebuilder:validation:Optional
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].
	// +kubebuilder:validation:Optional
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Protocol of the rule. Valid values: `http`, `https`.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// ID of the resource that the layer 7 rule works for.
	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
	// +kubebuilder:validation:Required
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`

	// SSL ID, when the `protocol` is `https`, the field should be set with valid SSL id.
	// +kubebuilder:validation:Optional
	SSLID *string `json:"sslId,omitempty" tf:"ssl_id,omitempty"`

	// Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 16.
	// +kubebuilder:validation:Required
	SourceList []*string `json:"sourceList" tf:"source_list,omitempty"`

	// Source type, `1` for source of host, `2` for source of IP.
	// +kubebuilder:validation:Required
	SourceType *float64 `json:"sourceType" tf:"source_type,omitempty"`

	// Indicate the rule will take effect or not.
	// +kubebuilder:validation:Required
	Switch *bool `json:"switch" tf:"switch,omitempty"`
}

// L7RuleSpec defines the desired state of L7Rule
type L7RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L7RuleParameters `json:"forProvider"`
}

// L7RuleStatus defines the observed state of L7Rule.
type L7RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L7RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L7Rule is the Schema for the L7Rules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type L7Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L7RuleSpec   `json:"spec"`
	Status            L7RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L7RuleList contains a list of L7Rules
type L7RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L7Rule `json:"items"`
}

// Repository type metadata.
var (
	L7Rule_Kind             = "L7Rule"
	L7Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L7Rule_Kind}.String()
	L7Rule_KindAPIVersion   = L7Rule_Kind + "." + CRDGroupVersion.String()
	L7Rule_GroupVersionKind = CRDGroupVersion.WithKind(L7Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&L7Rule{}, &L7RuleList{})
}
