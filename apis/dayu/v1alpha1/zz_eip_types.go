/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EIPObservation struct {
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time,omitempty"`

	EIPAddressStatus *string `json:"eipAddressStatus,omitempty" tf:"eip_address_status,omitempty"`

	EIPBoundRscEni *string `json:"eipBoundRscEni,omitempty" tf:"eip_bound_rsc_eni,omitempty"`

	EIPBoundRscIns *string `json:"eipBoundRscIns,omitempty" tf:"eip_bound_rsc_ins,omitempty"`

	EIPBoundRscVip *string `json:"eipBoundRscVip,omitempty" tf:"eip_bound_rsc_vip,omitempty"`

	ExpiredTime *string `json:"expiredTime,omitempty" tf:"expired_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	ProtectionStatus *string `json:"protectionStatus,omitempty" tf:"protection_status,omitempty"`

	ResourceRegion *string `json:"resourceRegion,omitempty" tf:"resource_region,omitempty"`
}

type EIPParameters struct {

	// Resource id to bind.
	// +kubebuilder:validation:Required
	BindResourceID *string `json:"bindResourceId" tf:"bind_resource_id,omitempty"`

	// Resource region to bind.
	// +kubebuilder:validation:Required
	BindResourceRegion *string `json:"bindResourceRegion" tf:"bind_resource_region,omitempty"`

	// Resource type to bind, value range [`clb`, `cvm`].
	// +kubebuilder:validation:Required
	BindResourceType *string `json:"bindResourceType" tf:"bind_resource_type,omitempty"`

	// Eip of the resource.
	// +kubebuilder:validation:Required
	EIP *string `json:"eip" tf:"eip,omitempty"`

	// ID of the resource.
	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

// EIPSpec defines the desired state of EIP
type EIPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EIPParameters `json:"forProvider"`
}

// EIPStatus defines the observed state of EIP.
type EIPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EIPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EIP is the Schema for the EIPs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type EIP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EIPSpec   `json:"spec"`
	Status            EIPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EIPList contains a list of EIPs
type EIPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EIP `json:"items"`
}

// Repository type metadata.
var (
	EIP_Kind             = "EIP"
	EIP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EIP_Kind}.String()
	EIP_KindAPIVersion   = EIP_Kind + "." + CRDGroupVersion.String()
	EIP_GroupVersionKind = CRDGroupVersion.WithKind(EIP_Kind)
)

func init() {
	SchemeBuilder.Register(&EIP{}, &EIPList{})
}
