/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CcHTTPSPolicyObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPList []*string `json:"ipList,omitempty" tf:"ip_list,omitempty"`

	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`
}

type CcHTTPSPolicyParameters struct {

	// Action mode. Valid values are `alg` and `drop`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// ID of the resource that the CC self-define https policy works for.
	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Type of the resource that the CC self-define https policy works for, valid value is `bgpip`.
	// +kubebuilder:validation:Required
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`

	// Rule id of the domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	// +kubebuilder:validation:Required
	RuleID *string `json:"ruleId" tf:"rule_id,omitempty"`

	// Rule list of the CC self-define https policy.
	// +kubebuilder:validation:Required
	RuleList []CcHTTPSPolicyRuleListParameters `json:"ruleList" tf:"rule_list,omitempty"`

	// Indicate the CC self-define https policy takes effect or not.
	// +kubebuilder:validation:Optional
	Switch *bool `json:"switch,omitempty" tf:"switch,omitempty"`
}

type CcHTTPSPolicyRuleListObservation struct {
}

type CcHTTPSPolicyRuleListParameters struct {

	// Operator of the rule. Valid values are `include` and `equal`.
	// +kubebuilder:validation:Required
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// Key of the rule. Valid values are `cgi`, `ua` and `referer`.
	// +kubebuilder:validation:Required
	Skey *string `json:"skey" tf:"skey,omitempty"`

	// Rule value, then length should be less than 31 bytes.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// CcHTTPSPolicySpec defines the desired state of CcHTTPSPolicy
type CcHTTPSPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CcHTTPSPolicyParameters `json:"forProvider"`
}

// CcHTTPSPolicyStatus defines the observed state of CcHTTPSPolicy.
type CcHTTPSPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CcHTTPSPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CcHTTPSPolicy is the Schema for the CcHTTPSPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type CcHTTPSPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CcHTTPSPolicySpec   `json:"spec"`
	Status            CcHTTPSPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CcHTTPSPolicyList contains a list of CcHTTPSPolicys
type CcHTTPSPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CcHTTPSPolicy `json:"items"`
}

// Repository type metadata.
var (
	CcHTTPSPolicy_Kind             = "CcHTTPSPolicy"
	CcHTTPSPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CcHTTPSPolicy_Kind}.String()
	CcHTTPSPolicy_KindAPIVersion   = CcHTTPSPolicy_Kind + "." + CRDGroupVersion.String()
	CcHTTPSPolicy_GroupVersionKind = CRDGroupVersion.WithKind(CcHTTPSPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&CcHTTPSPolicy{}, &CcHTTPSPolicyList{})
}
