/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CcBlackWhiteIpsObservation struct {
}

type CcBlackWhiteIpsParameters struct {

	// Blacklist and whitelist IP addresses.
	// +kubebuilder:validation:Required
	BlackWhiteIP *string `json:"blackWhiteIp" tf:"black_white_ip,omitempty"`

	// Create time.
	// +kubebuilder:validation:Optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Domain.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Modify time.
	// +kubebuilder:validation:Optional
	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	// Protocol.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// IP type, value [black(blacklist IP), white (whitelist IP)].
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type CcGeoIPPolicysObservation struct {
}

type CcGeoIPPolicysParameters struct {

	// User action, drop or arg.
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// The list of region IDs that the user selects to block.
	// +kubebuilder:validation:Optional
	AreaList []*float64 `json:"areaList,omitempty" tf:"area_list,omitempty"`

	// Create time.
	// +kubebuilder:validation:Optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// domain.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Modify time.
	// +kubebuilder:validation:Optional
	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	// Protocol, preferably HTTP, HTTPS.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Regional types, divided into china, oversea and customized.
	// +kubebuilder:validation:Required
	RegionType *string `json:"regionType" tf:"region_type,omitempty"`
}

type CcPolicyV2Observation struct {
	CcPrecisionPolicys []CcPrecisionPolicysObservation `json:"ccPrecisionPolicys,omitempty" tf:"cc_precision_policys,omitempty"`

	CcPrecisionReqLimits []CcPrecisionReqLimitsObservation `json:"ccPrecisionReqLimits,omitempty" tf:"cc_precision_req_limits,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CcPolicyV2Parameters struct {

	// Business of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared packet; net indicates anti-anti-ip pro version.
	// +kubebuilder:validation:Required
	Business *string `json:"business" tf:"business,omitempty"`

	// Blacklist and whitelist.
	// +kubebuilder:validation:Optional
	CcBlackWhiteIps []CcBlackWhiteIpsParameters `json:"ccBlackWhiteIps,omitempty" tf:"cc_black_white_ips,omitempty"`

	// Details of the CC region blocking policy list.
	// +kubebuilder:validation:Optional
	CcGeoIPPolicys []CcGeoIPPolicysParameters `json:"ccGeoIpPolicys,omitempty" tf:"cc_geo_ip_policys,omitempty"`

	// CC Precision Protection List.
	// +kubebuilder:validation:Optional
	CcPrecisionPolicys []CcPrecisionPolicysParameters `json:"ccPrecisionPolicys,omitempty" tf:"cc_precision_policys,omitempty"`

	// CC frequency throttling policy.
	// +kubebuilder:validation:Optional
	CcPrecisionReqLimits []CcPrecisionReqLimitsParameters `json:"ccPrecisionReqLimits,omitempty" tf:"cc_precision_req_limits,omitempty"`

	// The ID of the resource instance.
	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// List of protection threshold configurations.
	// +kubebuilder:validation:Optional
	Thresholds []ThresholdsParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type CcPrecisionPolicysObservation struct {
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`
}

type CcPrecisionPolicysParameters struct {

	// Domain.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Ip address.
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Policy mode (discard or captcha).
	// +kubebuilder:validation:Required
	PolicyAction *string `json:"policyAction" tf:"policy_action,omitempty"`

	// A list of policies.
	// +kubebuilder:validation:Required
	Policys []PolicysParameters `json:"policys" tf:"policys,omitempty"`

	// Protocol.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

type CcPrecisionReqLimitsObservation struct {
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type CcPrecisionReqLimitsParameters struct {

	// Domain.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Protection rating, the optional value of default means default policy, loose means loose, and strict means strict.
	// +kubebuilder:validation:Required
	Level *string `json:"level" tf:"level,omitempty"`

	// The CC Frequency Limit Policy Item field.
	// +kubebuilder:validation:Required
	Policys []CcPrecisionReqLimitsPolicysParameters `json:"policys" tf:"policys,omitempty"`

	// Protocol, preferably HTTP, HTTPS.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

type CcPrecisionReqLimitsPolicysObservation struct {
}

type CcPrecisionReqLimitsPolicysParameters struct {

	// The frequency limit policy mode, the optional value of arg indicates the verification code, and drop indicates the discard.
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// Cookies, one of the three policy entries can only be filled in.
	// +kubebuilder:validation:Optional
	Cookie *string `json:"cookie,omitempty" tf:"cookie,omitempty"`

	// The duration of the frequency limit policy can be taken from 1 to 86400 per second.
	// +kubebuilder:validation:Required
	ExecuteDuration *float64 `json:"executeDuration" tf:"execute_duration,omitempty"`

	// The policy item is compared, and the optional value include indicates inclusion, and equal means equal.
	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// Statistical period, take values 1, 10, 30, 60, in seconds.
	// +kubebuilder:validation:Required
	Period *float64 `json:"period" tf:"period,omitempty"`

	// The number of requests, the value is 1 to 20000.
	// +kubebuilder:validation:Required
	RequestNum *float64 `json:"requestNum" tf:"request_num,omitempty"`

	// Uri, one of the three policy entries can only be filled in.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// User-Agent, only one of the three policy entries can be filled in.
	// +kubebuilder:validation:Optional
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type PolicysObservation struct {
}

type PolicysParameters struct {

	// Configuration item types, currently only support value.
	// +kubebuilder:validation:Required
	FieldName *string `json:"fieldName" tf:"field_name,omitempty"`

	// Configuration fields with the desirable values cgi, ua, cookie, referer, accept, srcip.
	// +kubebuilder:validation:Required
	FieldType *string `json:"fieldType" tf:"field_type,omitempty"`

	// Configure the value.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`

	// Configure the item-value comparison mode, which can be taken as the value of evaluate, not_equal, include.
	// +kubebuilder:validation:Required
	ValueOperator *string `json:"valueOperator" tf:"value_operator,omitempty"`
}

type ThresholdsObservation struct {
}

type ThresholdsParameters struct {

	// domain.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Cleaning threshold, -1 indicates that the `default` mode is turned on.
	// +kubebuilder:validation:Required
	Threshold *float64 `json:"threshold" tf:"threshold,omitempty"`
}

// CcPolicyV2Spec defines the desired state of CcPolicyV2
type CcPolicyV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CcPolicyV2Parameters `json:"forProvider"`
}

// CcPolicyV2Status defines the observed state of CcPolicyV2.
type CcPolicyV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CcPolicyV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CcPolicyV2 is the Schema for the CcPolicyV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type CcPolicyV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CcPolicyV2Spec   `json:"spec"`
	Status            CcPolicyV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CcPolicyV2List contains a list of CcPolicyV2s
type CcPolicyV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CcPolicyV2 `json:"items"`
}

// Repository type metadata.
var (
	CcPolicyV2_Kind             = "CcPolicyV2"
	CcPolicyV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CcPolicyV2_Kind}.String()
	CcPolicyV2_KindAPIVersion   = CcPolicyV2_Kind + "." + CRDGroupVersion.String()
	CcPolicyV2_GroupVersionKind = CRDGroupVersion.WithKind(CcPolicyV2_Kind)
)

func init() {
	SchemeBuilder.Register(&CcPolicyV2{}, &CcPolicyV2List{})
}
