/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DdosPolicyAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DdosPolicyAttachmentParameters struct {

	// ID of the policy.
	// +kubebuilder:validation:Required
	PolicyID *string `json:"policyId" tf:"policy_id,omitempty"`

	// ID of the attached resource.
	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Type of the resource that the DDoS policy works for. Valid values are `bgpip`, `bgp`, `bgp-multip`, `net`.
	// +kubebuilder:validation:Required
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

// DdosPolicyAttachmentSpec defines the desired state of DdosPolicyAttachment
type DdosPolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DdosPolicyAttachmentParameters `json:"forProvider"`
}

// DdosPolicyAttachmentStatus defines the observed state of DdosPolicyAttachment.
type DdosPolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DdosPolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DdosPolicyAttachment is the Schema for the DdosPolicyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type DdosPolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DdosPolicyAttachmentSpec   `json:"spec"`
	Status            DdosPolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DdosPolicyAttachmentList contains a list of DdosPolicyAttachments
type DdosPolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DdosPolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	DdosPolicyAttachment_Kind             = "DdosPolicyAttachment"
	DdosPolicyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DdosPolicyAttachment_Kind}.String()
	DdosPolicyAttachment_KindAPIVersion   = DdosPolicyAttachment_Kind + "." + CRDGroupVersion.String()
	DdosPolicyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(DdosPolicyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&DdosPolicyAttachment{}, &DdosPolicyAttachmentList{})
}
