// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserTokenInitParameters struct {

	// Specifies the account name to which the IAM user belongs.
	// Changing this will create a new token.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// Specifies the IAM user password. Changing this will create a new token.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the project name. If it is blank, the token applies to global
	// services, otherwise the token applies to project-level services. Changing this will create a new token.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// Specifies the IAM user name. Changing this will create a new token.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type UserTokenObservation struct {

	// Specifies the account name to which the IAM user belongs.
	// Changing this will create a new token.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// The Time when the token will expire. The value is a UTC time in the YYYY-MM-DDTHH:mm:ss.ssssssZ format.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// Resource ID in format <account_name>/<user_name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the project name. If it is blank, the token applies to global
	// services, otherwise the token applies to project-level services. Changing this will create a new token.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// The token. Validity period is 24 hours.
	Token *string `json:"token,omitempty" tf:"token,omitempty"`

	// Specifies the IAM user name. Changing this will create a new token.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type UserTokenParameters struct {

	// Specifies the account name to which the IAM user belongs.
	// Changing this will create a new token.
	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// Specifies the IAM user password. Changing this will create a new token.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the project name. If it is blank, the token applies to global
	// services, otherwise the token applies to project-level services. Changing this will create a new token.
	// +kubebuilder:validation:Optional
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// Specifies the IAM user name. Changing this will create a new token.
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

// UserTokenSpec defines the desired state of UserToken
type UserTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserTokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserTokenInitParameters `json:"initProvider,omitempty"`
}

// UserTokenStatus defines the observed state of UserToken.
type UserTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserToken is the Schema for the UserTokens API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type UserToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountName) || (has(self.initProvider) && has(self.initProvider.accountName))",message="spec.forProvider.accountName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userName) || (has(self.initProvider) && has(self.initProvider.userName))",message="spec.forProvider.userName is a required parameter"
	Spec   UserTokenSpec   `json:"spec"`
	Status UserTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserTokenList contains a list of UserTokens
type UserTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserToken `json:"items"`
}

// Repository type metadata.
var (
	UserToken_Kind             = "UserToken"
	UserToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserToken_Kind}.String()
	UserToken_KindAPIVersion   = UserToken_Kind + "." + CRDGroupVersion.String()
	UserToken_GroupVersionKind = CRDGroupVersion.WithKind(UserToken_Kind)
)

func init() {
	SchemeBuilder.Register(&UserToken{}, &UserTokenList{})
}
