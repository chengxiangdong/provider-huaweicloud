// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConversionRulesLocalInitParameters struct {

	// Specifies the user group to which the federated user belongs on the cloud platform.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Specifies the name of a federated user on the cloud platform.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ConversionRulesLocalObservation struct {

	// Specifies the user group to which the federated user belongs on the cloud platform.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Specifies the name of a federated user on the cloud platform.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ConversionRulesLocalParameters struct {

	// Specifies the user group to which the federated user belongs on the cloud platform.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Specifies the name of a federated user on the cloud platform.
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type ConversionRulesRemoteInitParameters struct {

	// Specifies the attribute in the IDP assertion.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Specifies the condition of conversion rule.
	// Available options are:
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies the rule is matched only if the specified strings appear in the attribute type.
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConversionRulesRemoteObservation struct {

	// Specifies the attribute in the IDP assertion.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Specifies the condition of conversion rule.
	// Available options are:
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies the rule is matched only if the specified strings appear in the attribute type.
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConversionRulesRemoteParameters struct {

	// Specifies the attribute in the IDP assertion.
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// Specifies the condition of conversion rule.
	// Available options are:
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies the rule is matched only if the specified strings appear in the attribute type.
	// +kubebuilder:validation:Optional
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type ProviderConversionConversionRulesInitParameters struct {

	// Specifies the federated user information on the cloud platform.
	Local []ConversionRulesLocalInitParameters `json:"local,omitempty" tf:"local,omitempty"`

	// Specifies Federated user information in the IDP system.
	Remote []ConversionRulesRemoteInitParameters `json:"remote,omitempty" tf:"remote,omitempty"`
}

type ProviderConversionConversionRulesObservation struct {

	// Specifies the federated user information on the cloud platform.
	Local []ConversionRulesLocalObservation `json:"local,omitempty" tf:"local,omitempty"`

	// Specifies Federated user information in the IDP system.
	Remote []ConversionRulesRemoteObservation `json:"remote,omitempty" tf:"remote,omitempty"`
}

type ProviderConversionConversionRulesParameters struct {

	// Specifies the federated user information on the cloud platform.
	// +kubebuilder:validation:Optional
	Local []ConversionRulesLocalParameters `json:"local" tf:"local,omitempty"`

	// Specifies Federated user information in the IDP system.
	// +kubebuilder:validation:Optional
	Remote []ConversionRulesRemoteParameters `json:"remote" tf:"remote,omitempty"`
}

type ProviderConversionInitParameters struct {

	// Specifies the identity conversion rules of the identity provider.
	// You can use identity conversion rules to map the identities of existing users to Huawei Cloud and manage their access
	// to cloud resources.
	// The object structure is documented below.
	ConversionRules []ProviderConversionConversionRulesInitParameters `json:"conversionRules,omitempty" tf:"conversion_rules,omitempty"`

	// Specifies the ID of the identity provider used to manage the conversion rules.
	// Changing this parameter will create a new resource.
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`
}

type ProviderConversionObservation struct {

	// Specifies the identity conversion rules of the identity provider.
	// You can use identity conversion rules to map the identities of existing users to Huawei Cloud and manage their access
	// to cloud resources.
	// The object structure is documented below.
	ConversionRules []ProviderConversionConversionRulesObservation `json:"conversionRules,omitempty" tf:"conversion_rules,omitempty"`

	// The ID of conversion rules.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the identity provider used to manage the conversion rules.
	// Changing this parameter will create a new resource.
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`
}

type ProviderConversionParameters struct {

	// Specifies the identity conversion rules of the identity provider.
	// You can use identity conversion rules to map the identities of existing users to Huawei Cloud and manage their access
	// to cloud resources.
	// The object structure is documented below.
	// +kubebuilder:validation:Optional
	ConversionRules []ProviderConversionConversionRulesParameters `json:"conversionRules,omitempty" tf:"conversion_rules,omitempty"`

	// Specifies the ID of the identity provider used to manage the conversion rules.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`
}

// ProviderConversionSpec defines the desired state of ProviderConversion
type ProviderConversionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderConversionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProviderConversionInitParameters `json:"initProvider,omitempty"`
}

// ProviderConversionStatus defines the observed state of ProviderConversion.
type ProviderConversionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderConversionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProviderConversion is the Schema for the ProviderConversions API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type ProviderConversion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.conversionRules) || (has(self.initProvider) && has(self.initProvider.conversionRules))",message="spec.forProvider.conversionRules is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerId) || (has(self.initProvider) && has(self.initProvider.providerId))",message="spec.forProvider.providerId is a required parameter"
	Spec   ProviderConversionSpec   `json:"spec"`
	Status ProviderConversionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderConversionList contains a list of ProviderConversions
type ProviderConversionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProviderConversion `json:"items"`
}

// Repository type metadata.
var (
	ProviderConversion_Kind             = "ProviderConversion"
	ProviderConversion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProviderConversion_Kind}.String()
	ProviderConversion_KindAPIVersion   = ProviderConversion_Kind + "." + CRDGroupVersion.String()
	ProviderConversion_GroupVersionKind = CRDGroupVersion.WithKind(ProviderConversion_Kind)
)

func init() {
	SchemeBuilder.Register(&ProviderConversion{}, &ProviderConversionList{})
}
