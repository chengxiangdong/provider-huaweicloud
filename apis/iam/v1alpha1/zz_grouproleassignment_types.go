// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupRoleAssignmentInitParameters struct {

	// Specifies the domain to assign the role in.
	// Changing this parameter will create a new resource.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Specifies the enterprise project to assign the role in.
	// Changing this parameter will create a new resource.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the group to assign the role to.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/iam/v1alpha1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a Group in iam to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.Reference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a Group in iam to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.Selector `json:"groupIdSelector,omitempty" tf:"-"`

	// Specifies the project to assign the role in.
	// If project_id is set to all, it means that the specified user group will be able to use all projects,
	// including existing and future projects.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the role to assign.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/iam/v1alpha1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Reference to a Role in iam to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDRef *v1.Reference `json:"roleIdRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDSelector *v1.Selector `json:"roleIdSelector,omitempty" tf:"-"`
}

type GroupRoleAssignmentObservation struct {

	// Specifies the domain to assign the role in.
	// Changing this parameter will create a new resource.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Specifies the enterprise project to assign the role in.
	// Changing this parameter will create a new resource.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the group to assign the role to.
	// Changing this parameter will create a new resource.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The resource ID. When assign in domain, the format is <group_id>/<role_id>/<domain_id>;
	// when assign in project, the format is <group_id>/<role_id>/<project_id>;
	// when assign in enterprise project, the format is <group_id>/<role_id>/<enterprise_project_id>;
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the project to assign the role in.
	// If project_id is set to all, it means that the specified user group will be able to use all projects,
	// including existing and future projects.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the role to assign.
	// Changing this parameter will create a new resource.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type GroupRoleAssignmentParameters struct {

	// Specifies the domain to assign the role in.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Specifies the enterprise project to assign the role in.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the group to assign the role to.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/iam/v1alpha1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a Group in iam to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.Reference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a Group in iam to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.Selector `json:"groupIdSelector,omitempty" tf:"-"`

	// Specifies the project to assign the role in.
	// If project_id is set to all, it means that the specified user group will be able to use all projects,
	// including existing and future projects.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the role to assign.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/iam/v1alpha1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Reference to a Role in iam to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDRef *v1.Reference `json:"roleIdRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDSelector *v1.Selector `json:"roleIdSelector,omitempty" tf:"-"`
}

// GroupRoleAssignmentSpec defines the desired state of GroupRoleAssignment
type GroupRoleAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupRoleAssignmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupRoleAssignmentInitParameters `json:"initProvider,omitempty"`
}

// GroupRoleAssignmentStatus defines the observed state of GroupRoleAssignment.
type GroupRoleAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupRoleAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupRoleAssignment is the Schema for the GroupRoleAssignments API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type GroupRoleAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupRoleAssignmentSpec   `json:"spec"`
	Status            GroupRoleAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupRoleAssignmentList contains a list of GroupRoleAssignments
type GroupRoleAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupRoleAssignment `json:"items"`
}

// Repository type metadata.
var (
	GroupRoleAssignment_Kind             = "GroupRoleAssignment"
	GroupRoleAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupRoleAssignment_Kind}.String()
	GroupRoleAssignment_KindAPIVersion   = GroupRoleAssignment_Kind + "." + CRDGroupVersion.String()
	GroupRoleAssignment_GroupVersionKind = CRDGroupVersion.WithKind(GroupRoleAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupRoleAssignment{}, &GroupRoleAssignmentList{})
}
