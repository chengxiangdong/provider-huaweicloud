// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters struct {

	// Specifies the access type of the user. Available values are:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the country code. The country code of the Chinese mainland is 0086. This
	// parameter must be used together with phone.
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Specifies the description of the user.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the email address with a maximum of 255 characters.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Specifies whether the user is enabled or disabled. Valid values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the ID of the IAM user in the external system.
	// This parameter is used for IAM user SSO type, make sure that the IAM_SAML_Attributes_xUserId of the federated user
	// is the same as the external_identity_id of the corresponding IAM user.
	ExternalIdentityID *string `json:"externalIdentityId,omitempty" tf:"external_identity_id,omitempty"`

	// Specifies the type of the IAM user in the external system.
	// Only TenantIdp is supported now. This parameter must be used together with external_identity_id.
	ExternalIdentityType *string `json:"externalIdentityType,omitempty" tf:"external_identity_type,omitempty"`

	// Specifies the verification method of login protect. If it is
	// empty, the login protection will be disabled.
	LoginProtectVerificationMethod *string `json:"loginProtectVerificationMethod,omitempty" tf:"login_protect_verification_method,omitempty"`

	// Specifies the name of the user. The user name consists of 1 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password for the user with 6 to 32 characters. It must contain at least
	// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with country_code.
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Specifies whether or not the password should be reset. By default, the password is asked
	// to reset at the first login.
	PwdReset *bool `json:"pwdReset,omitempty" tf:"pwd_reset,omitempty"`
}

type UserObservation struct {

	// Specifies the access type of the user. Available values are:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the country code. The country code of the Chinese mainland is 0086. This
	// parameter must be used together with phone.
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// The time when the IAM user was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Specifies the description of the user.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the email address with a maximum of 255 characters.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Specifies whether the user is enabled or disabled. Valid values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the ID of the IAM user in the external system.
	// This parameter is used for IAM user SSO type, make sure that the IAM_SAML_Attributes_xUserId of the federated user
	// is the same as the external_identity_id of the corresponding IAM user.
	ExternalIdentityID *string `json:"externalIdentityId,omitempty" tf:"external_identity_id,omitempty"`

	// Specifies the type of the IAM user in the external system.
	// Only TenantIdp is supported now. This parameter must be used together with external_identity_id.
	ExternalIdentityType *string `json:"externalIdentityType,omitempty" tf:"external_identity_type,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The time when the IAM user last login.
	LastLogin *string `json:"lastLogin,omitempty" tf:"last_login,omitempty"`

	// Specifies the verification method of login protect. If it is
	// empty, the login protection will be disabled.
	LoginProtectVerificationMethod *string `json:"loginProtectVerificationMethod,omitempty" tf:"login_protect_verification_method,omitempty"`

	// Specifies the name of the user. The user name consists of 1 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates the password strength.
	PasswordStrength *string `json:"passwordStrength,omitempty" tf:"password_strength,omitempty"`

	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with country_code.
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Specifies whether or not the password should be reset. By default, the password is asked
	// to reset at the first login.
	PwdReset *bool `json:"pwdReset,omitempty" tf:"pwd_reset,omitempty"`
}

type UserParameters struct {

	// Specifies the access type of the user. Available values are:
	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the country code. The country code of the Chinese mainland is 0086. This
	// parameter must be used together with phone.
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Specifies the description of the user.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the email address with a maximum of 255 characters.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Specifies whether the user is enabled or disabled. Valid values are true and false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the ID of the IAM user in the external system.
	// This parameter is used for IAM user SSO type, make sure that the IAM_SAML_Attributes_xUserId of the federated user
	// is the same as the external_identity_id of the corresponding IAM user.
	// +kubebuilder:validation:Optional
	ExternalIdentityID *string `json:"externalIdentityId,omitempty" tf:"external_identity_id,omitempty"`

	// Specifies the type of the IAM user in the external system.
	// Only TenantIdp is supported now. This parameter must be used together with external_identity_id.
	// +kubebuilder:validation:Optional
	ExternalIdentityType *string `json:"externalIdentityType,omitempty" tf:"external_identity_type,omitempty"`

	// Specifies the verification method of login protect. If it is
	// empty, the login protection will be disabled.
	// +kubebuilder:validation:Optional
	LoginProtectVerificationMethod *string `json:"loginProtectVerificationMethod,omitempty" tf:"login_protect_verification_method,omitempty"`

	// Specifies the name of the user. The user name consists of 1 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password for the user with 6 to 32 characters. It must contain at least
	// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with country_code.
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Specifies whether or not the password should be reset. By default, the password is asked
	// to reset at the first login.
	// +kubebuilder:validation:Optional
	PwdReset *bool `json:"pwdReset,omitempty" tf:"pwd_reset,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
