/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuditObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AuditParameters struct {

	// Indicate whether to turn on audit logging or not.
	// +kubebuilder:validation:Required
	AuditSwitch *bool `json:"auditSwitch" tf:"audit_switch,omitempty"`

	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by terraform.
	// +kubebuilder:validation:Required
	CosBucket *string `json:"cosBucket" tf:"cos_bucket,omitempty"`

	// Region of the cos bucket.
	// +kubebuilder:validation:Required
	CosRegion *string `json:"cosRegion" tf:"cos_region,omitempty"`

	// Indicate whether the log is encrypt with KMS algorithm or not.
	// +kubebuilder:validation:Optional
	EnableKMSEncry *bool `json:"enableKmsEncry,omitempty" tf:"enable_kms_encry,omitempty"`

	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the KMS must be as same as the `cos_region`.
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	// +kubebuilder:validation:Optional
	LogFilePrefix *string `json:"logFilePrefix,omitempty" tf:"log_file_prefix,omitempty"`

	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	// +kubebuilder:validation:Required
	ReadWriteAttribute *float64 `json:"readWriteAttribute" tf:"read_write_attribute,omitempty"`
}

// AuditSpec defines the desired state of Audit
type AuditSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuditParameters `json:"forProvider"`
}

// AuditStatus defines the observed state of Audit.
type AuditStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuditObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Audit is the Schema for the Audits API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Audit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuditSpec   `json:"spec"`
	Status            AuditStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuditList contains a list of Audits
type AuditList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Audit `json:"items"`
}

// Repository type metadata.
var (
	Audit_Kind             = "Audit"
	Audit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Audit_Kind}.String()
	Audit_KindAPIVersion   = Audit_Kind + "." + CRDGroupVersion.String()
	Audit_GroupVersionKind = CRDGroupVersion.WithKind(Audit_Kind)
)

func init() {
	SchemeBuilder.Register(&Audit{}, &AuditList{})
}
