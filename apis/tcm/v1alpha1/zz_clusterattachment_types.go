/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterAttachmentParameters struct {

	// Cluster list.
	// +kubebuilder:validation:Optional
	ClusterList []ClusterListParameters `json:"clusterList,omitempty" tf:"cluster_list,omitempty"`

	// Mesh ID.
	// +kubebuilder:validation:Required
	MeshID *string `json:"meshId" tf:"mesh_id,omitempty"`
}

type ClusterListObservation struct {
}

type ClusterListParameters struct {

	// TKE Cluster id.
	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// TKE cluster region.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Cluster role in mesh, REMOTE or MASTER.
	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// Subnet id, only needed if it&#39;s standalone mesh.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Cluster type.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Cluster&#39;s VpcId.
	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// ClusterAttachmentSpec defines the desired state of ClusterAttachment
type ClusterAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterAttachmentParameters `json:"forProvider"`
}

// ClusterAttachmentStatus defines the observed state of ClusterAttachment.
type ClusterAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterAttachment is the Schema for the ClusterAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ClusterAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterAttachmentSpec   `json:"spec"`
	Status            ClusterAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterAttachmentList contains a list of ClusterAttachments
type ClusterAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterAttachment `json:"items"`
}

// Repository type metadata.
var (
	ClusterAttachment_Kind             = "ClusterAttachment"
	ClusterAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterAttachment_Kind}.String()
	ClusterAttachment_KindAPIVersion   = ClusterAttachment_Kind + "." + CRDGroupVersion.String()
	ClusterAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ClusterAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterAttachment{}, &ClusterAttachmentList{})
}
