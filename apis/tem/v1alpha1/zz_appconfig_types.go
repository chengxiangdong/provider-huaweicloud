/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppConfigObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AppConfigParameters struct {

	// payload.
	// +kubebuilder:validation:Required
	ConfigData []ConfigDataParameters `json:"configData" tf:"config_data,omitempty"`

	// environment ID.
	// +crossplane:generate:reference:type=Environment
	// +kubebuilder:validation:Optional
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// +kubebuilder:validation:Optional
	EnvironmentIDRef *v1.Reference `json:"environmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	EnvironmentIDSelector *v1.Selector `json:"environmentIdSelector,omitempty" tf:"-"`

	// appConfig name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type ConfigDataObservation struct {
}

type ConfigDataParameters struct {

	// key.
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// value.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// AppConfigSpec defines the desired state of AppConfig
type AppConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppConfigParameters `json:"forProvider"`
}

// AppConfigStatus defines the observed state of AppConfig.
type AppConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppConfig is the Schema for the AppConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type AppConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppConfigSpec   `json:"spec"`
	Status            AppConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppConfigList contains a list of AppConfigs
type AppConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppConfig `json:"items"`
}

// Repository type metadata.
var (
	AppConfig_Kind             = "AppConfig"
	AppConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppConfig_Kind}.String()
	AppConfig_KindAPIVersion   = AppConfig_Kind + "." + CRDGroupVersion.String()
	AppConfig_GroupVersionKind = CRDGroupVersion.WithKind(AppConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&AppConfig{}, &AppConfigList{})
}
