/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackendObservation struct {
}

type BackendParameters struct {

	// backend name.
	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// backend port.
	// +kubebuilder:validation:Required
	ServicePort *float64 `json:"servicePort" tf:"service_port,omitempty"`
}

type GatewayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Ingress []IngressObservation `json:"ingress,omitempty" tf:"ingress,omitempty"`
}

type GatewayParameters struct {

	// gateway properties.
	// +kubebuilder:validation:Optional
	Ingress []IngressParameters `json:"ingress,omitempty" tf:"ingress,omitempty"`
}

type HTTPObservation struct {
}

type HTTPParameters struct {

	// path payload.
	// +kubebuilder:validation:Required
	Paths []PathsParameters `json:"paths" tf:"paths,omitempty"`
}

type IngressObservation struct {
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`
}

type IngressParameters struct {

	// ip version, support IPV4.
	// +kubebuilder:validation:Required
	AddressIPVersion *string `json:"addressIpVersion" tf:"address_ip_version,omitempty"`

	// environment ID.
	// +kubebuilder:validation:Required
	EnvironmentID *string `json:"environmentId" tf:"environment_id,omitempty"`

	// gateway name.
	// +kubebuilder:validation:Required
	IngressName *string `json:"ingressName" tf:"ingress_name,omitempty"`

	// mixing HTTP and HTTPS.
	// +kubebuilder:validation:Required
	Mixed *bool `json:"mixed" tf:"mixed,omitempty"`

	// redirect mode, support AUTO and NONE.
	// +kubebuilder:validation:Optional
	RewriteType *string `json:"rewriteType,omitempty" tf:"rewrite_type,omitempty"`

	// proxy rules.
	// +kubebuilder:validation:Required
	Rules []RulesParameters `json:"rules" tf:"rules,omitempty"`

	// ingress TLS configurations.
	// +kubebuilder:validation:Optional
	TLS []TLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type PathsObservation struct {
}

type PathsParameters struct {

	// backend payload.
	// +kubebuilder:validation:Required
	Backend []BackendParameters `json:"backend" tf:"backend,omitempty"`

	// path.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// rule payload.
	// +kubebuilder:validation:Required
	HTTP []HTTPParameters `json:"http" tf:"http,omitempty"`

	// host name.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// protocol.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type TLSObservation struct {
}

type TLSParameters struct {

	// certificate ID.
	// +kubebuilder:validation:Required
	CertificateID *string `json:"certificateId" tf:"certificate_id,omitempty"`

	// host names.
	// +kubebuilder:validation:Required
	Hosts []*string `json:"hosts" tf:"hosts,omitempty"`

	// secret name.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

// GatewaySpec defines the desired state of Gateway
type GatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayParameters `json:"forProvider"`
}

// GatewayStatus defines the observed state of Gateway.
type GatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Gateway is the Schema for the Gateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Gateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewaySpec   `json:"spec"`
	Status            GatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayList contains a list of Gateways
type GatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Gateway `json:"items"`
}

// Repository type metadata.
var (
	Gateway_Kind             = "Gateway"
	Gateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Gateway_Kind}.String()
	Gateway_KindAPIVersion   = Gateway_Kind + "." + CRDGroupVersion.String()
	Gateway_GroupVersionKind = CRDGroupVersion.WithKind(Gateway_Kind)
)

func init() {
	SchemeBuilder.Register(&Gateway{}, &GatewayList{})
}
