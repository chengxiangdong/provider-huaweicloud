/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CCNObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type CCNParameters struct {

	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
	// +kubebuilder:validation:Optional
	BandwidthLimitType *string `json:"bandwidthLimitType,omitempty" tf:"bandwidth_limit_type,omitempty"`

	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Description of CCN, and maximum length does not exceed 100 bytes.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	// +kubebuilder:validation:Optional
	Qos *string `json:"qos,omitempty" tf:"qos,omitempty"`

	// Instance tag.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// CCNSpec defines the desired state of CCN
type CCNSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CCNParameters `json:"forProvider"`
}

// CCNStatus defines the observed state of CCN.
type CCNStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CCNObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CCN is the Schema for the CCNs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type CCN struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CCNSpec   `json:"spec"`
	Status            CCNStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CCNList contains a list of CCNs
type CCNList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CCN `json:"items"`
}

// Repository type metadata.
var (
	CCN_Kind             = "CCN"
	CCN_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CCN_Kind}.String()
	CCN_KindAPIVersion   = CCN_Kind + "." + CRDGroupVersion.String()
	CCN_GroupVersionKind = CRDGroupVersion.WithKind(CCN_Kind)
)

func init() {
	SchemeBuilder.Register(&CCN{}, &CCNList{})
}
