/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogsetObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	TopicCount *float64 `json:"topicCount,omitempty" tf:"topic_count,omitempty"`
}

type LogsetParameters struct {

	// Logset name, which must be unique.
	// +kubebuilder:validation:Required
	LogsetName *string `json:"logsetName" tf:"logset_name,omitempty"`

	// Tag description list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// LogsetSpec defines the desired state of Logset
type LogsetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogsetParameters `json:"forProvider"`
}

// LogsetStatus defines the observed state of Logset.
type LogsetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogsetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Logset is the Schema for the Logsets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Logset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogsetSpec   `json:"spec"`
	Status            LogsetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogsetList contains a list of Logsets
type LogsetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Logset `json:"items"`
}

// Repository type metadata.
var (
	Logset_Kind             = "Logset"
	Logset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Logset_Kind}.String()
	Logset_KindAPIVersion   = Logset_Kind + "." + CRDGroupVersion.String()
	Logset_GroupVersionKind = CRDGroupVersion.WithKind(Logset_Kind)
)

func init() {
	SchemeBuilder.Register(&Logset{}, &LogsetList{})
}
