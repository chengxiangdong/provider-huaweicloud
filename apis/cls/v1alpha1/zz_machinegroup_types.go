/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MachineGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MachineGroupParameters struct {

	// Whether to enable automatic update for the machine group.
	// +kubebuilder:validation:Optional
	AutoUpdate *bool `json:"autoUpdate,omitempty" tf:"auto_update,omitempty"`

	// Machine group name, which must be unique.
	// +kubebuilder:validation:Required
	GroupName *string `json:"groupName" tf:"group_name,omitempty"`

	// Type of the machine group to be created.
	// +kubebuilder:validation:Required
	MachineGroupType []MachineGroupTypeParameters `json:"machineGroupType" tf:"machine_group_type,omitempty"`

	// Whether to enable the service log to record the logs generated by the LogListener service itself. After it is enabled, the internal logset cls_service_logging and the loglistener_status, loglistener_alarm, and loglistener_business log topics will be created, which will not incur fees.
	// +kubebuilder:validation:Optional
	ServiceLogging *bool `json:"serviceLogging,omitempty" tf:"service_logging,omitempty"`

	// Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Update end time. We recommend you update LogListener during off-peak hours.
	// +kubebuilder:validation:Optional
	UpdateEndTime *string `json:"updateEndTime,omitempty" tf:"update_end_time,omitempty"`

	// pdate start time. We recommend you update LogListener during off-peak hours.
	// +kubebuilder:validation:Optional
	UpdateStartTime *string `json:"updateStartTime,omitempty" tf:"update_start_time,omitempty"`
}

type MachineGroupTypeObservation struct {
}

type MachineGroupTypeParameters struct {

	// Machine group type. Valid values: ip: the IP addresses of collection machines are stored in Values of the machine group; label: the tags of the machines are stored in Values of the machine group.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Machine description list.
	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

// MachineGroupSpec defines the desired state of MachineGroup
type MachineGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MachineGroupParameters `json:"forProvider"`
}

// MachineGroupStatus defines the observed state of MachineGroup.
type MachineGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MachineGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MachineGroup is the Schema for the MachineGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type MachineGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MachineGroupSpec   `json:"spec"`
	Status            MachineGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MachineGroupList contains a list of MachineGroups
type MachineGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MachineGroup `json:"items"`
}

// Repository type metadata.
var (
	MachineGroup_Kind             = "MachineGroup"
	MachineGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MachineGroup_Kind}.String()
	MachineGroup_KindAPIVersion   = MachineGroup_Kind + "." + CRDGroupVersion.String()
	MachineGroup_GroupVersionKind = CRDGroupVersion.WithKind(MachineGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&MachineGroup{}, &MachineGroupList{})
}
