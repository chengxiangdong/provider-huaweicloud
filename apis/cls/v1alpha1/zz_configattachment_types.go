/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConfigAttachmentParameters struct {

	// Collection configuration id.
	// +crossplane:generate:reference:type=Config
	// +kubebuilder:validation:Optional
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigIDRef *v1.Reference `json:"configIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ConfigIDSelector *v1.Selector `json:"configIdSelector,omitempty" tf:"-"`

	// Machine group id.
	// +crossplane:generate:reference:type=MachineGroup
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Optional
	GroupIDRef *v1.Reference `json:"groupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.Selector `json:"groupIdSelector,omitempty" tf:"-"`
}

// ConfigAttachmentSpec defines the desired state of ConfigAttachment
type ConfigAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigAttachmentParameters `json:"forProvider"`
}

// ConfigAttachmentStatus defines the observed state of ConfigAttachment.
type ConfigAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigAttachment is the Schema for the ConfigAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ConfigAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigAttachmentSpec   `json:"spec"`
	Status            ConfigAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigAttachmentList contains a list of ConfigAttachments
type ConfigAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigAttachment `json:"items"`
}

// Repository type metadata.
var (
	ConfigAttachment_Kind             = "ConfigAttachment"
	ConfigAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigAttachment_Kind}.String()
	ConfigAttachment_KindAPIVersion   = ConfigAttachment_Kind + "." + CRDGroupVersion.String()
	ConfigAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ConfigAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigAttachment{}, &ConfigAttachmentList{})
}
