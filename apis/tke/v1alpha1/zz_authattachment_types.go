/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AuthAttachmentParameters struct {

	// If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
	// +kubebuilder:validation:Optional
	AutoCreateDiscoveryAnonymousAuth *bool `json:"autoCreateDiscoveryAnonymousAuth,omitempty" tf:"auto_create_discovery_anonymous_auth,omitempty"`

	// ID of clusters.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specify service-account-issuer.
	// +kubebuilder:validation:Required
	Issuer *string `json:"issuer" tf:"issuer,omitempty"`

	// Specify service-account-jwks-uri.
	// +kubebuilder:validation:Optional
	JwksURI *string `json:"jwksUri,omitempty" tf:"jwks_uri,omitempty"`
}

// AuthAttachmentSpec defines the desired state of AuthAttachment
type AuthAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthAttachmentParameters `json:"forProvider"`
}

// AuthAttachmentStatus defines the observed state of AuthAttachment.
type AuthAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthAttachment is the Schema for the AuthAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type AuthAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthAttachmentSpec   `json:"spec"`
	Status            AuthAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthAttachmentList contains a list of AuthAttachments
type AuthAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthAttachment `json:"items"`
}

// Repository type metadata.
var (
	AuthAttachment_Kind             = "AuthAttachment"
	AuthAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthAttachment_Kind}.String()
	AuthAttachment_KindAPIVersion   = AuthAttachment_Kind + "." + CRDGroupVersion.String()
	AuthAttachment_GroupVersionKind = CRDGroupVersion.WithKind(AuthAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthAttachment{}, &AuthAttachmentList{})
}
