/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterEndpointObservation struct {
	CertificationAuthority *string `json:"certificationAuthority,omitempty" tf:"certification_authority,omitempty"`

	ClusterDeployType *string `json:"clusterDeployType,omitempty" tf:"cluster_deploy_type,omitempty"`

	ClusterExternalEndpoint *string `json:"clusterExternalEndpoint,omitempty" tf:"cluster_external_endpoint,omitempty"`

	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PgwEndpoint *string `json:"pgwEndpoint,omitempty" tf:"pgw_endpoint,omitempty"`

	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type ClusterEndpointParameters struct {

	// Specify cluster ID.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Open internet access or not.
	// +kubebuilder:validation:Optional
	ClusterInternet *bool `json:"clusterInternet,omitempty" tf:"cluster_internet,omitempty"`

	// Domain name for cluster Kube-apiserver internet access.  Be careful if you modify value of this parameter, the cluster_external_endpoint value may be changed automatically too.
	// +kubebuilder:validation:Optional
	ClusterInternetDomain *string `json:"clusterInternetDomain,omitempty" tf:"cluster_internet_domain,omitempty"`

	// Specify security group, NOTE: This argument must not be empty if cluster internet enabled.
	// +kubebuilder:validation:Optional
	ClusterInternetSecurityGroup *string `json:"clusterInternetSecurityGroup,omitempty" tf:"cluster_internet_security_group,omitempty"`

	// Open intranet access or not.
	// +kubebuilder:validation:Optional
	ClusterIntranet *bool `json:"clusterIntranet,omitempty" tf:"cluster_intranet,omitempty"`

	// Domain name for cluster Kube-apiserver intranet access. Be careful if you modify value of this parameter, the pgw_endpoint value may be changed automatically too.
	// +kubebuilder:validation:Optional
	ClusterIntranetDomain *string `json:"clusterIntranetDomain,omitempty" tf:"cluster_intranet_domain,omitempty"`

	// Subnet id who can access this independent cluster, this field must and can only set  when `cluster_intranet` is true. `cluster_intranet_subnet_id` can not modify once be set.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	ClusterIntranetSubnetID *string `json:"clusterIntranetSubnetId,omitempty" tf:"cluster_intranet_subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIntranetSubnetIDRef *v1.Reference `json:"clusterIntranetSubnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIntranetSubnetIDSelector *v1.Selector `json:"clusterIntranetSubnetIdSelector,omitempty" tf:"-"`

	// The LB parameter. Only used for public network access.
	// +kubebuilder:validation:Optional
	ExtensiveParameters *string `json:"extensiveParameters,omitempty" tf:"extensive_parameters,omitempty"`

	// Security policies for managed cluster internet, like:'192.168.1.0/24' or '113.116.51.27', '0.0.0.0/0' means all. This field can only set when field `cluster_deploy_type` is 'MANAGED_CLUSTER' and `cluster_internet` is true. `managed_cluster_internet_security_policies` can not delete or empty once be set.
	// +kubebuilder:validation:Optional
	ManagedClusterInternetSecurityPolicies []*string `json:"managedClusterInternetSecurityPolicies,omitempty" tf:"managed_cluster_internet_security_policies,omitempty"`
}

// ClusterEndpointSpec defines the desired state of ClusterEndpoint
type ClusterEndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterEndpointParameters `json:"forProvider"`
}

// ClusterEndpointStatus defines the observed state of ClusterEndpoint.
type ClusterEndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterEndpoint is the Schema for the ClusterEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ClusterEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterEndpointSpec   `json:"spec"`
	Status            ClusterEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterEndpointList contains a list of ClusterEndpoints
type ClusterEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterEndpoint `json:"items"`
}

// Repository type metadata.
var (
	ClusterEndpoint_Kind             = "ClusterEndpoint"
	ClusterEndpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterEndpoint_Kind}.String()
	ClusterEndpoint_KindAPIVersion   = ClusterEndpoint_Kind + "." + CRDGroupVersion.String()
	ClusterEndpoint_GroupVersionKind = CRDGroupVersion.WithKind(ClusterEndpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterEndpoint{}, &ClusterEndpointList{})
}
