/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ClusterAttachmentParameters struct {

	// ID of the cluster.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// ID of the CVM instance, this cvm will reinstall the system.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/cvm/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
	// +kubebuilder:validation:Optional
	KeyIds []*string `json:"keyIds,omitempty" tf:"key_ids,omitempty"`

	// Labels of tke attachment exits CVM.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Password to access, should be set if `key_ids` not set.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
	// +kubebuilder:validation:Optional
	Unschedulable *float64 `json:"unschedulable,omitempty" tf:"unschedulable,omitempty"`

	// Deploy the machine configuration information of the 'WORKER', commonly used to attach existing instances.
	// +kubebuilder:validation:Optional
	WorkerConfig []ClusterAttachmentWorkerConfigParameters `json:"workerConfig,omitempty" tf:"worker_config,omitempty"`

	// Override variable worker_config, commonly used to attach existing instances.
	// +kubebuilder:validation:Optional
	WorkerConfigOverrides []WorkerConfigOverridesParameters `json:"workerConfigOverrides,omitempty" tf:"worker_config_overrides,omitempty"`
}

type ClusterAttachmentWorkerConfigDataDiskObservation struct {
}

type ClusterAttachmentWorkerConfigDataDiskParameters struct {

	// Indicate whether to auto format and mount or not. Default is `false`.
	// +kubebuilder:validation:Optional
	AutoFormatAndMount *bool `json:"autoFormatAndMount,omitempty" tf:"auto_format_and_mount,omitempty"`

	// The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
	// +kubebuilder:validation:Optional
	DiskPartition *string `json:"diskPartition,omitempty" tf:"disk_partition,omitempty"`

	// Volume of disk in GB. Default is `0`.
	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// File system, e.g. `ext3/ext4/xfs`.
	// +kubebuilder:validation:Optional
	FileSystem *string `json:"fileSystem,omitempty" tf:"file_system,omitempty"`

	// Mount target.
	// +kubebuilder:validation:Optional
	MountTarget *string `json:"mountTarget,omitempty" tf:"mount_target,omitempty"`
}

type ClusterAttachmentWorkerConfigObservation struct {
}

type ClusterAttachmentWorkerConfigParameters struct {

	// Configurations of data disk.
	// +kubebuilder:validation:Optional
	DataDisk []ClusterAttachmentWorkerConfigDataDiskParameters `json:"dataDisk,omitempty" tf:"data_disk,omitempty"`

	// Indicate to set desired pod number in node. valid when the cluster is podCIDR.
	// +kubebuilder:validation:Optional
	DesiredPodNum *float64 `json:"desiredPodNum,omitempty" tf:"desired_pod_num,omitempty"`

	// Docker graph path. Default is `/var/lib/docker`.
	// +kubebuilder:validation:Optional
	DockerGraphPath *string `json:"dockerGraphPath,omitempty" tf:"docker_graph_path,omitempty"`

	// Custom parameter information related to the node. This is a white-list parameter.
	// +kubebuilder:validation:Optional
	ExtraArgs []*string `json:"extraArgs,omitempty" tf:"extra_args,omitempty"`

	// GPU driver parameters.
	// +kubebuilder:validation:Optional
	GpuArgs []GpuArgsParameters `json:"gpuArgs,omitempty" tf:"gpu_args,omitempty"`

	// Indicate to schedule the adding node or not. Default is true.
	// +kubebuilder:validation:Optional
	IsSchedule *bool `json:"isSchedule,omitempty" tf:"is_schedule,omitempty"`

	// Mount target. Default is not mounting.
	// +kubebuilder:validation:Optional
	MountTarget *string `json:"mountTarget,omitempty" tf:"mount_target,omitempty"`

	// Base64-encoded User Data text, the length limit is 16KB.
	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type GpuArgsObservation struct {
}

type GpuArgsParameters struct {

	// CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
	// +kubebuilder:validation:Optional
	Cuda map[string]*string `json:"cuda,omitempty" tf:"cuda,omitempty"`

	// cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
	// +kubebuilder:validation:Optional
	Cudnn map[string]*string `json:"cudnn,omitempty" tf:"cudnn,omitempty"`

	// Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
	// +kubebuilder:validation:Optional
	CustomDriver map[string]*string `json:"customDriver,omitempty" tf:"custom_driver,omitempty"`

	// GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
	// +kubebuilder:validation:Optional
	Driver map[string]*string `json:"driver,omitempty" tf:"driver,omitempty"`

	// Whether to enable MIG.
	// +kubebuilder:validation:Optional
	MigEnable *bool `json:"migEnable,omitempty" tf:"mig_enable,omitempty"`
}

type WorkerConfigOverridesDataDiskObservation struct {
}

type WorkerConfigOverridesDataDiskParameters struct {

	// Indicate whether to auto format and mount or not. Default is `false`.
	// +kubebuilder:validation:Optional
	AutoFormatAndMount *bool `json:"autoFormatAndMount,omitempty" tf:"auto_format_and_mount,omitempty"`

	// The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
	// +kubebuilder:validation:Optional
	DiskPartition *string `json:"diskPartition,omitempty" tf:"disk_partition,omitempty"`

	// Volume of disk in GB. Default is `0`.
	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// File system, e.g. `ext3/ext4/xfs`.
	// +kubebuilder:validation:Optional
	FileSystem *string `json:"fileSystem,omitempty" tf:"file_system,omitempty"`

	// Mount target.
	// +kubebuilder:validation:Optional
	MountTarget *string `json:"mountTarget,omitempty" tf:"mount_target,omitempty"`
}

type WorkerConfigOverridesGpuArgsObservation struct {
}

type WorkerConfigOverridesGpuArgsParameters struct {

	// CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
	// +kubebuilder:validation:Optional
	Cuda map[string]*string `json:"cuda,omitempty" tf:"cuda,omitempty"`

	// cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
	// +kubebuilder:validation:Optional
	Cudnn map[string]*string `json:"cudnn,omitempty" tf:"cudnn,omitempty"`

	// Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
	// +kubebuilder:validation:Optional
	CustomDriver map[string]*string `json:"customDriver,omitempty" tf:"custom_driver,omitempty"`

	// GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
	// +kubebuilder:validation:Optional
	Driver map[string]*string `json:"driver,omitempty" tf:"driver,omitempty"`

	// Whether to enable MIG.
	// +kubebuilder:validation:Optional
	MigEnable *bool `json:"migEnable,omitempty" tf:"mig_enable,omitempty"`
}

type WorkerConfigOverridesObservation struct {
}

type WorkerConfigOverridesParameters struct {

	// Configurations of data disk.
	// +kubebuilder:validation:Optional
	DataDisk []WorkerConfigOverridesDataDiskParameters `json:"dataDisk,omitempty" tf:"data_disk,omitempty"`

	// Indicate to set desired pod number in node. valid when the cluster is podCIDR.
	// +kubebuilder:validation:Optional
	DesiredPodNum *float64 `json:"desiredPodNum,omitempty" tf:"desired_pod_num,omitempty"`

	// Docker graph path. Default is `/var/lib/docker`.
	// +kubebuilder:validation:Optional
	DockerGraphPath *string `json:"dockerGraphPath,omitempty" tf:"docker_graph_path,omitempty"`

	// Custom parameter information related to the node. This is a white-list parameter.
	// +kubebuilder:validation:Optional
	ExtraArgs []*string `json:"extraArgs,omitempty" tf:"extra_args,omitempty"`

	// GPU driver parameters.
	// +kubebuilder:validation:Optional
	GpuArgs []WorkerConfigOverridesGpuArgsParameters `json:"gpuArgs,omitempty" tf:"gpu_args,omitempty"`

	// Indicate to schedule the adding node or not. Default is true.
	// +kubebuilder:validation:Optional
	IsSchedule *bool `json:"isSchedule,omitempty" tf:"is_schedule,omitempty"`

	// Mount target. Default is not mounting.
	// +kubebuilder:validation:Optional
	MountTarget *string `json:"mountTarget,omitempty" tf:"mount_target,omitempty"`

	// Base64-encoded User Data text, the length limit is 16KB.
	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

// ClusterAttachmentSpec defines the desired state of ClusterAttachment
type ClusterAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterAttachmentParameters `json:"forProvider"`
}

// ClusterAttachmentStatus defines the observed state of ClusterAttachment.
type ClusterAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterAttachment is the Schema for the ClusterAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ClusterAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterAttachmentSpec   `json:"spec"`
	Status            ClusterAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterAttachmentList contains a list of ClusterAttachments
type ClusterAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterAttachment `json:"items"`
}

// Repository type metadata.
var (
	ClusterAttachment_Kind             = "ClusterAttachment"
	ClusterAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterAttachment_Kind}.String()
	ClusterAttachment_KindAPIVersion   = ClusterAttachment_Kind + "." + CRDGroupVersion.String()
	ClusterAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ClusterAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterAttachment{}, &ClusterAttachmentList{})
}
