/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountVPCSetObservation struct {
}

type AccountVPCSetParameters struct {

	// Region.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// UIN of the VPC account.
	// +kubebuilder:validation:Required
	Uin *string `json:"uin" tf:"uin,omitempty"`

	// VPC ID.
	// +kubebuilder:validation:Required
	UniqVPCID *string `json:"uniqVpcId" tf:"uniq_vpc_id,omitempty"`

	// VPC NAME.
	// +kubebuilder:validation:Required
	VPCName *string `json:"vpcName" tf:"vpc_name,omitempty"`
}

type TagSetObservation struct {
}

type TagSetParameters struct {

	// Key of Tag.
	// +kubebuilder:validation:Required
	TagKey *string `json:"tagKey" tf:"tag_key,omitempty"`

	// Value of Tag.
	// +kubebuilder:validation:Required
	TagValue *string `json:"tagValue" tf:"tag_value,omitempty"`
}

type VPCSetObservation struct {
}

type VPCSetParameters struct {

	// VPC REGION.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// VPC ID.
	// +kubebuilder:validation:Required
	UniqVPCID *string `json:"uniqVpcId" tf:"uniq_vpc_id,omitempty"`
}

type ZoneObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ZoneParameters struct {

	// List of authorized accounts' VPCs to associate with the private domain.
	// +kubebuilder:validation:Optional
	AccountVPCSet []AccountVPCSetParameters `json:"accountVpcSet,omitempty" tf:"account_vpc_set,omitempty"`

	// Whether to enable subdomain recursive DNS. Valid values: ENABLED, DISABLED. Default value: DISABLED.
	// +kubebuilder:validation:Optional
	DNSForwardStatus *string `json:"dnsForwardStatus,omitempty" tf:"dns_forward_status,omitempty"`

	// Domain name, which must be in the format of standard TLD.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Remarks.
	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Tags the private domain when it is created.
	// +kubebuilder:validation:Optional
	TagSet []TagSetParameters `json:"tagSet,omitempty" tf:"tag_set,omitempty"`

	// Tags of the private dns zone.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Associates the private domain to a VPC when it is created.
	// +kubebuilder:validation:Optional
	VPCSet []VPCSetParameters `json:"vpcSet,omitempty" tf:"vpc_set,omitempty"`
}

// ZoneSpec defines the desired state of Zone
type ZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneParameters `json:"forProvider"`
}

// ZoneStatus defines the observed state of Zone.
type ZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Zone is the Schema for the Zones API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Zone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ZoneSpec   `json:"spec"`
	Status            ZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneList contains a list of Zones
type ZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Zone `json:"items"`
}

// Repository type metadata.
var (
	Zone_Kind             = "Zone"
	Zone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Zone_Kind}.String()
	Zone_KindAPIVersion   = Zone_Kind + "." + CRDGroupVersion.String()
	Zone_GroupVersionKind = CRDGroupVersion.WithKind(Zone_Kind)
)

func init() {
	SchemeBuilder.Register(&Zone{}, &ZoneList{})
}
