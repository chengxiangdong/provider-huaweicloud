/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NamespaceRoleAttachmentObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NamespaceRoleAttachmentParameters struct {

	// The id of tdmq cluster.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The name of tdmq namespace.
	// +crossplane:generate:reference:type=TdmqNamespace
	// +kubebuilder:validation:Optional
	EnvironID *string `json:"environId,omitempty" tf:"environ_id,omitempty"`

	// +kubebuilder:validation:Optional
	EnvironIDRef *v1.Reference `json:"environIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	EnvironIDSelector *v1.Selector `json:"environIdSelector,omitempty" tf:"-"`

	// The permissions of tdmq role.
	// +kubebuilder:validation:Required
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`

	// The name of tdmq role.
	// +kubebuilder:validation:Required
	RoleName *string `json:"roleName" tf:"role_name,omitempty"`
}

// NamespaceRoleAttachmentSpec defines the desired state of NamespaceRoleAttachment
type NamespaceRoleAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NamespaceRoleAttachmentParameters `json:"forProvider"`
}

// NamespaceRoleAttachmentStatus defines the observed state of NamespaceRoleAttachment.
type NamespaceRoleAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NamespaceRoleAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceRoleAttachment is the Schema for the NamespaceRoleAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type NamespaceRoleAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespaceRoleAttachmentSpec   `json:"spec"`
	Status            NamespaceRoleAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceRoleAttachmentList contains a list of NamespaceRoleAttachments
type NamespaceRoleAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespaceRoleAttachment `json:"items"`
}

// Repository type metadata.
var (
	NamespaceRoleAttachment_Kind             = "NamespaceRoleAttachment"
	NamespaceRoleAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NamespaceRoleAttachment_Kind}.String()
	NamespaceRoleAttachment_KindAPIVersion   = NamespaceRoleAttachment_Kind + "." + CRDGroupVersion.String()
	NamespaceRoleAttachment_GroupVersionKind = CRDGroupVersion.WithKind(NamespaceRoleAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&NamespaceRoleAttachment{}, &NamespaceRoleAttachmentList{})
}
