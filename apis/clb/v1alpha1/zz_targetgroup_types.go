/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TargetGroupInstancesObservation struct {
}

type TargetGroupInstancesParameters struct {

	// The internal ip of target group instance.
	// +kubebuilder:validation:Required
	BindIP *string `json:"bindIp" tf:"bind_ip,omitempty"`

	// The new port of target group instance.
	// +kubebuilder:validation:Optional
	NewPort *float64 `json:"newPort,omitempty" tf:"new_port,omitempty"`

	// The port of target group instance.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// The weight of target group instance.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type TargetGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TargetGroupParameters struct {

	// The default port of target group, add server after can use it.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The backend server of target group bind.
	// +kubebuilder:validation:Optional
	TargetGroupInstances []TargetGroupInstancesParameters `json:"targetGroupInstances,omitempty" tf:"target_group_instances,omitempty"`

	// Target group name.
	// +kubebuilder:validation:Optional
	TargetGroupName *string `json:"targetGroupName,omitempty" tf:"target_group_name,omitempty"`

	// VPC ID, default is based on the network.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

// TargetGroupSpec defines the desired state of TargetGroup
type TargetGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TargetGroupParameters `json:"forProvider"`
}

// TargetGroupStatus defines the observed state of TargetGroup.
type TargetGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TargetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TargetGroup is the Schema for the TargetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TargetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TargetGroupSpec   `json:"spec"`
	Status            TargetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TargetGroupList contains a list of TargetGroups
type TargetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TargetGroup `json:"items"`
}

// Repository type metadata.
var (
	TargetGroup_Kind             = "TargetGroup"
	TargetGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TargetGroup_Kind}.String()
	TargetGroup_KindAPIVersion   = TargetGroup_Kind + "." + CRDGroupVersion.String()
	TargetGroup_GroupVersionKind = CRDGroupVersion.WithKind(TargetGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&TargetGroup{}, &TargetGroupList{})
}
