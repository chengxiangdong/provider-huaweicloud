/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlbServerAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`
}

type AlbServerAttachmentParameters struct {

	// list of backend server.
	// +kubebuilder:validation:Required
	Backends []BackendsParameters `json:"backends" tf:"backends,omitempty"`

	// listener ID.
	// +kubebuilder:validation:Required
	ListenerID *string `json:"listenerId" tf:"listener_id,omitempty"`

	// loadbalancer ID.
	// +kubebuilder:validation:Required
	LoadbalancerID *string `json:"loadbalancerId" tf:"loadbalancer_id,omitempty"`

	// location ID, only support for layer 7 loadbalancer.
	// +kubebuilder:validation:Optional
	LocationID *string `json:"locationId,omitempty" tf:"location_id,omitempty"`
}

type BackendsObservation struct {
}

type BackendsParameters struct {

	// A list backend instance ID (CVM instance ID).
	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// The port used by the backend server. Valid value range: [1-65535].
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Weight of the backend server. Valid value range: [0-100]. Default to 10.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// AlbServerAttachmentSpec defines the desired state of AlbServerAttachment
type AlbServerAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlbServerAttachmentParameters `json:"forProvider"`
}

// AlbServerAttachmentStatus defines the observed state of AlbServerAttachment.
type AlbServerAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlbServerAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlbServerAttachment is the Schema for the AlbServerAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type AlbServerAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlbServerAttachmentSpec   `json:"spec"`
	Status            AlbServerAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlbServerAttachmentList contains a list of AlbServerAttachments
type AlbServerAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlbServerAttachment `json:"items"`
}

// Repository type metadata.
var (
	AlbServerAttachment_Kind             = "AlbServerAttachment"
	AlbServerAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlbServerAttachment_Kind}.String()
	AlbServerAttachment_KindAPIVersion   = AlbServerAttachment_Kind + "." + CRDGroupVersion.String()
	AlbServerAttachment_GroupVersionKind = CRDGroupVersion.WithKind(AlbServerAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&AlbServerAttachment{}, &AlbServerAttachmentList{})
}
