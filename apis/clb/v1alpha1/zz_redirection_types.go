/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RedirectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RedirectionParameters struct {

	// ID of CLB instance.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// Indicates whether delete all auto redirection. Default is `false`. It will take effect only when this redirection is auto-rewrite and this auto-rewrite auto redirected more than one rules. All the auto-rewrite relations will be deleted when this parameter set true.
	// +kubebuilder:validation:Optional
	DeleteAllAutoRewrite *bool `json:"deleteAllAutoRewrite,omitempty" tf:"delete_all_auto_rewrite,omitempty"`

	// Indicates whether automatic forwarding is enable, default is `false`. If enabled, the source listener and location should be empty, the target listener must be https protocol and port is 443.
	// +kubebuilder:validation:Optional
	IsAutoRewrite *bool `json:"isAutoRewrite,omitempty" tf:"is_auto_rewrite,omitempty"`

	// ID of source listener.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	SourceListenerID *string `json:"sourceListenerId,omitempty" tf:"source_listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceListenerIDRef *v1.Reference `json:"sourceListenerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SourceListenerIDSelector *v1.Selector `json:"sourceListenerIdSelector,omitempty" tf:"-"`

	// Rule ID of source listener.
	// +crossplane:generate:reference:type=ListenerRule
	// +kubebuilder:validation:Optional
	SourceRuleID *string `json:"sourceRuleId,omitempty" tf:"source_rule_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceRuleIDRef *v1.Reference `json:"sourceRuleIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SourceRuleIDSelector *v1.Selector `json:"sourceRuleIdSelector,omitempty" tf:"-"`

	// ID of source listener.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	TargetListenerID *string `json:"targetListenerId,omitempty" tf:"target_listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	TargetListenerIDRef *v1.Reference `json:"targetListenerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TargetListenerIDSelector *v1.Selector `json:"targetListenerIdSelector,omitempty" tf:"-"`

	// Rule ID of target listener.
	// +crossplane:generate:reference:type=ListenerRule
	// +kubebuilder:validation:Optional
	TargetRuleID *string `json:"targetRuleId,omitempty" tf:"target_rule_id,omitempty"`

	// +kubebuilder:validation:Optional
	TargetRuleIDRef *v1.Reference `json:"targetRuleIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TargetRuleIDSelector *v1.Selector `json:"targetRuleIdSelector,omitempty" tf:"-"`
}

// RedirectionSpec defines the desired state of Redirection
type RedirectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RedirectionParameters `json:"forProvider"`
}

// RedirectionStatus defines the observed state of Redirection.
type RedirectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RedirectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Redirection is the Schema for the Redirections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Redirection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedirectionSpec   `json:"spec"`
	Status            RedirectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedirectionList contains a list of Redirections
type RedirectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Redirection `json:"items"`
}

// Repository type metadata.
var (
	Redirection_Kind             = "Redirection"
	Redirection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Redirection_Kind}.String()
	Redirection_KindAPIVersion   = Redirection_Kind + "." + CRDGroupVersion.String()
	Redirection_GroupVersionKind = CRDGroupVersion.WithKind(Redirection_Kind)
)

func init() {
	SchemeBuilder.Register(&Redirection{}, &RedirectionList{})
}
