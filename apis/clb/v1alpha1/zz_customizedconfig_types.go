/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomizedConfigObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type CustomizedConfigParameters struct {

	// Content of Customized Config.
	// +kubebuilder:validation:Required
	ConfigContent *string `json:"configContent" tf:"config_content,omitempty"`

	// Name of Customized Config.
	// +kubebuilder:validation:Required
	ConfigName *string `json:"configName" tf:"config_name,omitempty"`

	// List of LoadBalancer Ids.
	// +kubebuilder:validation:Optional
	LoadBalancerIds []*string `json:"loadBalancerIds,omitempty" tf:"load_balancer_ids,omitempty"`
}

// CustomizedConfigSpec defines the desired state of CustomizedConfig
type CustomizedConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomizedConfigParameters `json:"forProvider"`
}

// CustomizedConfigStatus defines the observed state of CustomizedConfig.
type CustomizedConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomizedConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomizedConfig is the Schema for the CustomizedConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type CustomizedConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomizedConfigSpec   `json:"spec"`
	Status            CustomizedConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomizedConfigList contains a list of CustomizedConfigs
type CustomizedConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomizedConfig `json:"items"`
}

// Repository type metadata.
var (
	CustomizedConfig_Kind             = "CustomizedConfig"
	CustomizedConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomizedConfig_Kind}.String()
	CustomizedConfig_KindAPIVersion   = CustomizedConfig_Kind + "." + CRDGroupVersion.String()
	CustomizedConfig_GroupVersionKind = CRDGroupVersion.WithKind(CustomizedConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomizedConfig{}, &CustomizedConfigList{})
}
