/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`
}

type AttachmentParameters struct {

	// ID of the CLB.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// ID of the CLB listener.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// ID of the CLB listener rule. Only supports listeners of `HTTPS` and `HTTP` protocol.
	// +crossplane:generate:reference:type=ListenerRule
	// +kubebuilder:validation:Optional
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// +kubebuilder:validation:Optional
	RuleIDRef *v1.Reference `json:"ruleIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RuleIDSelector *v1.Selector `json:"ruleIdSelector,omitempty" tf:"-"`

	// Information of the backends to be attached.
	// +kubebuilder:validation:Required
	Targets []TargetsParameters `json:"targets" tf:"targets,omitempty"`
}

type TargetsObservation struct {
}

type TargetsParameters struct {

	// Eni IP address of the backend server, conflict with `instance_id` but must specify one of them.
	// +kubebuilder:validation:Optional
	EniIP *string `json:"eniIp,omitempty" tf:"eni_ip,omitempty"`

	// CVM Instance Id of the backend server, conflict with `eni_ip` but must specify one of them.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Port of the backend server. Valid value ranges: (0~65535).
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to `10`.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// AttachmentSpec defines the desired state of Attachment
type AttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AttachmentParameters `json:"forProvider"`
}

// AttachmentStatus defines the observed state of Attachment.
type AttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Attachment is the Schema for the Attachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Attachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AttachmentSpec   `json:"spec"`
	Status            AttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AttachmentList contains a list of Attachments
type AttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Attachment `json:"items"`
}

// Repository type metadata.
var (
	Attachment_Kind             = "Attachment"
	Attachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Attachment_Kind}.String()
	Attachment_KindAPIVersion   = Attachment_Kind + "." + CRDGroupVersion.String()
	Attachment_GroupVersionKind = CRDGroupVersion.WithKind(Attachment_Kind)
)

func init() {
	SchemeBuilder.Register(&Attachment{}, &AttachmentList{})
}
