/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpsObservation struct {
}

type IpsParameters struct {

	// Snat IP.
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Subnet ID.
	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

type SnatIpObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SnatIpParameters struct {

	// CLB instance ID.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// Snat IP address config.
	// +kubebuilder:validation:Optional
	Ips []IpsParameters `json:"ips,omitempty" tf:"ips,omitempty"`
}

// SnatIpSpec defines the desired state of SnatIp
type SnatIpSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnatIpParameters `json:"forProvider"`
}

// SnatIpStatus defines the observed state of SnatIp.
type SnatIpStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnatIpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnatIp is the Schema for the SnatIps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type SnatIp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnatIpSpec   `json:"spec"`
	Status            SnatIpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnatIpList contains a list of SnatIps
type SnatIpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnatIp `json:"items"`
}

// Repository type metadata.
var (
	SnatIp_Kind             = "SnatIp"
	SnatIp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnatIp_Kind}.String()
	SnatIp_KindAPIVersion   = SnatIp_Kind + "." + CRDGroupVersion.String()
	SnatIp_GroupVersionKind = CRDGroupVersion.WithKind(SnatIp_Kind)
)

func init() {
	SchemeBuilder.Register(&SnatIp{}, &SnatIpList{})
}
