/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TargetGroupAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TargetGroupAttachmentParameters struct {

	// ID of the CLB.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// ID of the CLB listener.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// ID of the CLB listener rule.
	// +crossplane:generate:reference:type=ListenerRule
	// +kubebuilder:validation:Optional
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// +kubebuilder:validation:Optional
	RuleIDRef *v1.Reference `json:"ruleIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RuleIDSelector *v1.Selector `json:"ruleIdSelector,omitempty" tf:"-"`

	// ID of the CLB target group.
	// +crossplane:generate:reference:type=TargetGroup
	// +kubebuilder:validation:Optional
	TargetGroupID *string `json:"targetGroupId,omitempty" tf:"target_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	TargetGroupIDRef *v1.Reference `json:"targetGroupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TargetGroupIDSelector *v1.Selector `json:"targetGroupIdSelector,omitempty" tf:"-"`

	// ID of the CLB target group.
	// +kubebuilder:validation:Optional
	TargrtGroupID *string `json:"targrtGroupId,omitempty" tf:"targrt_group_id,omitempty"`
}

// TargetGroupAttachmentSpec defines the desired state of TargetGroupAttachment
type TargetGroupAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TargetGroupAttachmentParameters `json:"forProvider"`
}

// TargetGroupAttachmentStatus defines the observed state of TargetGroupAttachment.
type TargetGroupAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TargetGroupAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TargetGroupAttachment is the Schema for the TargetGroupAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TargetGroupAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TargetGroupAttachmentSpec   `json:"spec"`
	Status            TargetGroupAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TargetGroupAttachmentList contains a list of TargetGroupAttachments
type TargetGroupAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TargetGroupAttachment `json:"items"`
}

// Repository type metadata.
var (
	TargetGroupAttachment_Kind             = "TargetGroupAttachment"
	TargetGroupAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TargetGroupAttachment_Kind}.String()
	TargetGroupAttachment_KindAPIVersion   = TargetGroupAttachment_Kind + "." + CRDGroupVersion.String()
	TargetGroupAttachment_GroupVersionKind = CRDGroupVersion.WithKind(TargetGroupAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&TargetGroupAttachment{}, &TargetGroupAttachmentList{})
}
