/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogTopicObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *bool `json:"status,omitempty" tf:"status,omitempty"`
}

type LogTopicParameters struct {

	// Log topic of CLB instance.
	// +crossplane:generate:reference:type=LogSet
	// +kubebuilder:validation:Optional
	LogSetID *string `json:"logSetId,omitempty" tf:"log_set_id,omitempty"`

	// +kubebuilder:validation:Optional
	LogSetIDRef *v1.Reference `json:"logSetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LogSetIDSelector *v1.Selector `json:"logSetIdSelector,omitempty" tf:"-"`

	// Log topic of CLB instance.
	// +kubebuilder:validation:Required
	TopicName *string `json:"topicName" tf:"topic_name,omitempty"`
}

// LogTopicSpec defines the desired state of LogTopic
type LogTopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogTopicParameters `json:"forProvider"`
}

// LogTopicStatus defines the observed state of LogTopic.
type LogTopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogTopic is the Schema for the LogTopics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type LogTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogTopicSpec   `json:"spec"`
	Status            LogTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogTopicList contains a list of LogTopics
type LogTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogTopic `json:"items"`
}

// Repository type metadata.
var (
	LogTopic_Kind             = "LogTopic"
	LogTopic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogTopic_Kind}.String()
	LogTopic_KindAPIVersion   = LogTopic_Kind + "." + CRDGroupVersion.String()
	LogTopic_GroupVersionKind = CRDGroupVersion.WithKind(LogTopic_Kind)
)

func init() {
	SchemeBuilder.Register(&LogTopic{}, &LogTopicList{})
}
