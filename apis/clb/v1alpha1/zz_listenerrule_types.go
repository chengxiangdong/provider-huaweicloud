/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ListenerRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`
}

type ListenerRuleParameters struct {

	// ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
	// +kubebuilder:validation:Optional
	CertificateCAID *string `json:"certificateCaId,omitempty" tf:"certificate_ca_id,omitempty"`

	// ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
	// +kubebuilder:validation:Optional
	CertificateSSLMode *string `json:"certificateSslMode,omitempty" tf:"certificate_ssl_mode,omitempty"`

	// ID of CLB instance.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// Domain name of the listener rule.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `TRPC`.
	// +kubebuilder:validation:Optional
	ForwardType *string `json:"forwardType,omitempty" tf:"forward_type,omitempty"`

	// HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPCode *float64 `json:"healthCheckHttpCode,omitempty" tf:"health_check_http_code,omitempty"`

	// Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPDomain *string `json:"healthCheckHttpDomain,omitempty" tf:"health_check_http_domain,omitempty"`

	// Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPMethod *string `json:"healthCheckHttpMethod,omitempty" tf:"health_check_http_method,omitempty"`

	// Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPPath *string `json:"healthCheckHttpPath,omitempty" tf:"health_check_http_path,omitempty"`

	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. Valid value ranges: (5~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	HealthCheckIntervalTime *float64 `json:"healthCheckIntervalTime,omitempty" tf:"health_check_interval_time,omitempty"`

	// Indicates whether health check is enabled.
	// +kubebuilder:validation:Optional
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Indicate to apply HTTP2.0 protocol or not.
	// +kubebuilder:validation:Optional
	Http2Switch *bool `json:"http2Switch,omitempty" tf:"http2_switch,omitempty"`

	// ID of CLB listener.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	SessionExpireTime *float64 `json:"sessionExpireTime,omitempty" tf:"session_expire_time,omitempty"`

	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`

	// Url of the listener rule.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

// ListenerRuleSpec defines the desired state of ListenerRule
type ListenerRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ListenerRuleParameters `json:"forProvider"`
}

// ListenerRuleStatus defines the observed state of ListenerRule.
type ListenerRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ListenerRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerRule is the Schema for the ListenerRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ListenerRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ListenerRuleSpec   `json:"spec"`
	Status            ListenerRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerRuleList contains a list of ListenerRules
type ListenerRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ListenerRule `json:"items"`
}

// Repository type metadata.
var (
	ListenerRule_Kind             = "ListenerRule"
	ListenerRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ListenerRule_Kind}.String()
	ListenerRule_KindAPIVersion   = ListenerRule_Kind + "." + CRDGroupVersion.String()
	ListenerRule_GroupVersionKind = CRDGroupVersion.WithKind(ListenerRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ListenerRule{}, &ListenerRuleList{})
}
