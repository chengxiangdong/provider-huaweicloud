/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OidcSSOObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OidcSSOParameters struct {

	// Authorization request Endpoint, OpenID Connect identity provider authorization address. Corresponds to the value of the `authorization_endpoint` field in the Openid-configuration provided by the Enterprise IdP.
	// +kubebuilder:validation:Required
	AuthorizationEndpoint *string `json:"authorizationEndpoint" tf:"authorization_endpoint,omitempty"`

	// Client ID, the client ID registered with the OpenID Connect identity provider.
	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// The signature public key requires base64_encode. Verify the public key signed by the OpenID Connect identity provider ID Token. For the security of your account, we recommend that you rotate the signed public key regularly.
	// +kubebuilder:validation:Required
	IdentityKey *string `json:"identityKey" tf:"identity_key,omitempty"`

	// Identity provider URL. OpenID Connect identity provider identity.Corresponds to the value of the `issuer` field in the Openid-configuration provided by the Enterprise IdP.
	// +kubebuilder:validation:Required
	IdentityURL *string `json:"identityUrl" tf:"identity_url,omitempty"`

	// Map field names. Which field in the IdP's id_token maps to the user name of the subuser, usually the sub or name field.
	// +kubebuilder:validation:Required
	MappingFiled *string `json:"mappingFiled" tf:"mapping_filed,omitempty"`

	// Authorize the request Forsonse mode. Authorization request return mode, form_post and frogment two optional modes, recommended to select form_post mode.
	// +kubebuilder:validation:Required
	ResponseMode *string `json:"responseMode" tf:"response_mode,omitempty"`

	// Authorization requests The Response type, with a fixed value id_token.
	// +kubebuilder:validation:Required
	ResponseType *string `json:"responseType" tf:"response_type,omitempty"`

	// Authorize the request Scope. openid; email; profile; Authorization request information scope. The default is required openid.
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`
}

// OidcSSOSpec defines the desired state of OidcSSO
type OidcSSOSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OidcSSOParameters `json:"forProvider"`
}

// OidcSSOStatus defines the observed state of OidcSSO.
type OidcSSOStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OidcSSOObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OidcSSO is the Schema for the OidcSSOs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type OidcSSO struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OidcSSOSpec   `json:"spec"`
	Status            OidcSSOStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OidcSSOList contains a list of OidcSSOs
type OidcSSOList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OidcSSO `json:"items"`
}

// Repository type metadata.
var (
	OidcSSO_Kind             = "OidcSSO"
	OidcSSO_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OidcSSO_Kind}.String()
	OidcSSO_KindAPIVersion   = OidcSSO_Kind + "." + CRDGroupVersion.String()
	OidcSSO_GroupVersionKind = CRDGroupVersion.WithKind(OidcSSO_Kind)
)

func init() {
	SchemeBuilder.Register(&OidcSSO{}, &OidcSSOList{})
}
