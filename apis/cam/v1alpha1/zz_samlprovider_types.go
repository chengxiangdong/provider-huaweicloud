/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SamlProviderObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProviderArn *string `json:"providerArn,omitempty" tf:"provider_arn,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type SamlProviderParameters struct {

	// The description of the CAM SAML provider.
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// The meta data document of the CAM SAML provider.
	// +kubebuilder:validation:Required
	MetaData *string `json:"metaData" tf:"meta_data,omitempty"`

	// Name of CAM SAML provider.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// SamlProviderSpec defines the desired state of SamlProvider
type SamlProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SamlProviderParameters `json:"forProvider"`
}

// SamlProviderStatus defines the observed state of SamlProvider.
type SamlProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SamlProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SamlProvider is the Schema for the SamlProviders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type SamlProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SamlProviderSpec   `json:"spec"`
	Status            SamlProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SamlProviderList contains a list of SamlProviders
type SamlProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SamlProvider `json:"items"`
}

// Repository type metadata.
var (
	SamlProvider_Kind             = "SamlProvider"
	SamlProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SamlProvider_Kind}.String()
	SamlProvider_KindAPIVersion   = SamlProvider_Kind + "." + CRDGroupVersion.String()
	SamlProvider_GroupVersionKind = CRDGroupVersion.WithKind(SamlProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&SamlProvider{}, &SamlProviderList{})
}
