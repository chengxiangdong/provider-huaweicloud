/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleEnginePriorityObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RuleEnginePriorityParameters struct {

	// Priority of rules.
	// +kubebuilder:validation:Optional
	RulesPriority []RulesPriorityParameters `json:"rulesPriority,omitempty" tf:"rules_priority,omitempty"`

	// Site ID.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type RulesPriorityObservation struct {
}

type RulesPriorityParameters struct {

	// Priority order of rules.
	// +kubebuilder:validation:Optional
	Index *float64 `json:"index,omitempty" tf:"index,omitempty"`

	// Priority of rules id.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// RuleEnginePrioritySpec defines the desired state of RuleEnginePriority
type RuleEnginePrioritySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleEnginePriorityParameters `json:"forProvider"`
}

// RuleEnginePriorityStatus defines the observed state of RuleEnginePriority.
type RuleEnginePriorityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleEnginePriorityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RuleEnginePriority is the Schema for the RuleEnginePrioritys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type RuleEnginePriority struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleEnginePrioritySpec   `json:"spec"`
	Status            RuleEnginePriorityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleEnginePriorityList contains a list of RuleEnginePrioritys
type RuleEnginePriorityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RuleEnginePriority `json:"items"`
}

// Repository type metadata.
var (
	RuleEnginePriority_Kind             = "RuleEnginePriority"
	RuleEnginePriority_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RuleEnginePriority_Kind}.String()
	RuleEnginePriority_KindAPIVersion   = RuleEnginePriority_Kind + "." + CRDGroupVersion.String()
	RuleEnginePriority_GroupVersionKind = CRDGroupVersion.WithKind(RuleEnginePriority_Kind)
)

func init() {
	SchemeBuilder.Register(&RuleEnginePriority{}, &RuleEnginePriorityList{})
}
