/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OriginGrouprityObservation struct {
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LoadBalancingID *string `json:"loadBalancingId,omitempty" tf:"load_balancing_id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type OriginGrouprityParameters struct {

	// ID of the backup origin group to use.
	// +kubebuilder:validation:Optional
	BackupOriginGroupID *string `json:"backupOriginGroupId,omitempty" tf:"backup_origin_group_id,omitempty"`

	// Subdomain name. You can use @ to represent the root domain.
	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// ID of the origin group to use.
	// +crossplane:generate:reference:type=OriginGroup
	// +kubebuilder:validation:Optional
	OriginGroupID *string `json:"originGroupId,omitempty" tf:"origin_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	OriginGroupIDRef *v1.Reference `json:"originGroupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	OriginGroupIDSelector *v1.Selector `json:"originGroupIdSelector,omitempty" tf:"-"`

	// Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Indicates DNS TTL time when `Type` is dns_only.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Proxy mode.- `dns_only`: Only DNS.- `proxied`: Enable proxy.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Site ID.
	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// OriginGroupritySpec defines the desired state of OriginGrouprity
type OriginGroupritySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OriginGrouprityParameters `json:"forProvider"`
}

// OriginGrouprityStatus defines the observed state of OriginGrouprity.
type OriginGrouprityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OriginGrouprityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OriginGrouprity is the Schema for the OriginGroupritys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type OriginGrouprity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OriginGroupritySpec   `json:"spec"`
	Status            OriginGrouprityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OriginGrouprityList contains a list of OriginGroupritys
type OriginGrouprityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OriginGrouprity `json:"items"`
}

// Repository type metadata.
var (
	OriginGrouprity_Kind             = "OriginGrouprity"
	OriginGrouprity_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OriginGrouprity_Kind}.String()
	OriginGrouprity_KindAPIVersion   = OriginGrouprity_Kind + "." + CRDGroupVersion.String()
	OriginGrouprity_GroupVersionKind = CRDGroupVersion.WithKind(OriginGrouprity_Kind)
)

func init() {
	SchemeBuilder.Register(&OriginGrouprity{}, &OriginGrouprityList{})
}
