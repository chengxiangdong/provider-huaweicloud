/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourcesObservation struct {
	Area *string `json:"area,omitempty" tf:"area,omitempty"`

	AutoRenewFlag *float64 `json:"autoRenewFlag,omitempty" tf:"auto_renew_flag,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	EnableTime *string `json:"enableTime,omitempty" tf:"enable_time,omitempty"`

	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PayMode *float64 `json:"payMode,omitempty" tf:"pay_mode,omitempty"`

	PlanID *string `json:"planId,omitempty" tf:"plan_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Sv []SvObservation `json:"sv,omitempty" tf:"sv,omitempty"`
}

type ResourcesParameters struct {
}

type SvObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SvParameters struct {
}

type VanityNameServersIpsObservation struct {
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VanityNameServersIpsParameters struct {
}

type VanityNameServersObservation struct {
}

type VanityNameServersParameters struct {

	// List of custom name servers.
	// +kubebuilder:validation:Optional
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`

	// Whether to enable the custom name server.- `on`: Enable.- `off`: Disable.
	// +kubebuilder:validation:Required
	Switch *string `json:"switch" tf:"switch,omitempty"`
}

type ZoneObservation struct {
	Area *string `json:"area,omitempty" tf:"area,omitempty"`

	CnameStatus *string `json:"cnameStatus,omitempty" tf:"cname_status,omitempty"`

	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	NameServers []*string `json:"nameServers,omitempty" tf:"name_servers,omitempty"`

	OriginalNameServers []*string `json:"originalNameServers,omitempty" tf:"original_name_servers,omitempty"`

	Resources []ResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	VanityNameServersIps []VanityNameServersIpsObservation `json:"vanityNameServersIps,omitempty" tf:"vanity_name_servers_ips,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ZoneParameters struct {

	// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
	// +kubebuilder:validation:Optional
	CnameSpeedUp *string `json:"cnameSpeedUp,omitempty" tf:"cname_speed_up,omitempty"`

	// Indicates whether the site is disabled.
	// +kubebuilder:validation:Optional
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// Plan type of the zone. See details in data source `zone_available_plans`.
	// +kubebuilder:validation:Required
	PlanType *string `json:"planType" tf:"plan_type,omitempty"`

	// Tag description list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected via CNAME.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
	// +kubebuilder:validation:Optional
	VanityNameServers []VanityNameServersParameters `json:"vanityNameServers,omitempty" tf:"vanity_name_servers,omitempty"`

	// Site name.
	// +kubebuilder:validation:Required
	ZoneName *string `json:"zoneName" tf:"zone_name,omitempty"`
}

// ZoneSpec defines the desired state of Zone
type ZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneParameters `json:"forProvider"`
}

// ZoneStatus defines the observed state of Zone.
type ZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Zone is the Schema for the Zones API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Zone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ZoneSpec   `json:"spec"`
	Status            ZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneList contains a list of Zones
type ZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Zone `json:"items"`
}

// Repository type metadata.
var (
	Zone_Kind             = "Zone"
	Zone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Zone_Kind}.String()
	Zone_KindAPIVersion   = Zone_Kind + "." + CRDGroupVersion.String()
	Zone_GroupVersionKind = CRDGroupVersion.WithKind(Zone_Kind)
)

func init() {
	SchemeBuilder.Register(&Zone{}, &ZoneList{})
}
