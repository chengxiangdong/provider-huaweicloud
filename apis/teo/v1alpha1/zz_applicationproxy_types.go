/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationProxyObservation struct {
	Area *string `json:"area,omitempty" tf:"area,omitempty"`

	BanStatus *string `json:"banStatus,omitempty" tf:"ban_status,omitempty"`

	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProxyID *string `json:"proxyId,omitempty" tf:"proxy_id,omitempty"`

	ScheduleValue []*string `json:"scheduleValue,omitempty" tf:"schedule_value,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ApplicationProxyParameters struct {

	// - `0`: Disable acceleration.- `1`: Enable acceleration.
	// +kubebuilder:validation:Required
	AccelerateType *float64 `json:"accelerateType" tf:"accelerate_type,omitempty"`

	// IPv6 access configuration.
	// +kubebuilder:validation:Optional
	IPv6 []IPv6Parameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// Scheduling mode.- `ip`: Anycast IP.- `domain`: CNAME.
	// +kubebuilder:validation:Required
	PlatType *string `json:"platType" tf:"plat_type,omitempty"`

	// When `ProxyType` is hostname, `ProxyName` is the domain or subdomain name.When `ProxyType` is instance, `ProxyName` is the name of proxy application.
	// +kubebuilder:validation:Required
	ProxyName *string `json:"proxyName" tf:"proxy_name,omitempty"`

	// Layer 4 proxy mode. Valid values:- `hostname`: subdomain mode.- `instance`: instance mode.
	// +kubebuilder:validation:Optional
	ProxyType *string `json:"proxyType,omitempty" tf:"proxy_type,omitempty"`

	// - `0`: Disable security protection.- `1`: Enable security protection.
	// +kubebuilder:validation:Required
	SecurityType *float64 `json:"securityType" tf:"security_type,omitempty"`

	// Session persistence duration. Value range: 30-3600 (in seconds), default value is 600.
	// +kubebuilder:validation:Optional
	SessionPersistTime *float64 `json:"sessionPersistTime,omitempty" tf:"session_persist_time,omitempty"`

	// Status of this application proxy. Valid values to set is `online` and `offline`.- `online`: Enable.- `offline`: Disable.- `progress`: Deploying.- `stopping`: Deactivating.- `fail`: Deploy or deactivate failed.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Site ID.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type IPv6Observation struct {
}

type IPv6Parameters struct {

	// - `on`: Enable.- `off`: Disable.
	// +kubebuilder:validation:Required
	Switch *string `json:"switch" tf:"switch,omitempty"`
}

// ApplicationProxySpec defines the desired state of ApplicationProxy
type ApplicationProxySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationProxyParameters `json:"forProvider"`
}

// ApplicationProxyStatus defines the observed state of ApplicationProxy.
type ApplicationProxyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationProxyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationProxy is the Schema for the ApplicationProxys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ApplicationProxy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationProxySpec   `json:"spec"`
	Status            ApplicationProxyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationProxyList contains a list of ApplicationProxys
type ApplicationProxyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationProxy `json:"items"`
}

// Repository type metadata.
var (
	ApplicationProxy_Kind             = "ApplicationProxy"
	ApplicationProxy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationProxy_Kind}.String()
	ApplicationProxy_KindAPIVersion   = ApplicationProxy_Kind + "." + CRDGroupVersion.String()
	ApplicationProxy_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationProxy_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationProxy{}, &ApplicationProxyList{})
}
