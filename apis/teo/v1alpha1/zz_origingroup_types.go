/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OriginGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OriginGroupID *string `json:"originGroupId,omitempty" tf:"origin_group_id,omitempty"`

	OriginRecords []OriginRecordsObservation `json:"originRecords,omitempty" tf:"origin_records,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type OriginGroupParameters struct {

	// Type of the origin group, this field should be set when `OriginType` is self, otherwise leave it empty. Valid values:- `area`: select an origin by using Geo info of the client IP and `Area` field in Records.- `weight`: weighted select an origin by using `Weight` field in Records.- `proto`: config by HTTP protocol.
	// +kubebuilder:validation:Required
	ConfigurationType *string `json:"configurationType" tf:"configuration_type,omitempty"`

	// OriginGroup Name.
	// +kubebuilder:validation:Required
	OriginGroupName *string `json:"originGroupName" tf:"origin_group_name,omitempty"`

	// Origin site records.
	// +kubebuilder:validation:Required
	OriginRecords []OriginRecordsParameters `json:"originRecords" tf:"origin_records,omitempty"`

	// Type of the origin site. Valid values:- `self`: self-build website.- `cos`: tencent cos.- `third_party`: third party cos.
	// +kubebuilder:validation:Required
	OriginType *string `json:"originType" tf:"origin_type,omitempty"`

	// Site ID.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type OriginRecordsObservation struct {
	RecordID *string `json:"recordId,omitempty" tf:"record_id,omitempty"`
}

type OriginRecordsParameters struct {

	// Indicating origin site&#39;s area when `Type` field is `area`. An empty List indicate the default area. Valid value:- Asia, Americas, Europe, Africa or Oceania.- 2 characters ISO 3166 area code.
	// +kubebuilder:validation:Optional
	Area []*string `json:"area,omitempty" tf:"area,omitempty"`

	// Port of the origin site. Valid value range: 1-65535.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Whether origin site is using private authentication. Only valid when `OriginType` is `third_party`.
	// +kubebuilder:validation:Optional
	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// Parameters for private authentication. Only valid when `Private` is `true`.
	// +kubebuilder:validation:Optional
	PrivateParameter []PrivateParameterParameters `json:"privateParameter,omitempty" tf:"private_parameter,omitempty"`

	// Record value, which could be an IPv4/IPv6 address or a domain.
	// +kubebuilder:validation:Required
	Record *string `json:"record" tf:"record,omitempty"`

	// Indicating origin site&#39;s weight when `Type` field is `weight`. Valid value range: 1-100. Sum of all weights should be 100.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type PrivateParameterObservation struct {
}

type PrivateParameterParameters struct {

	// Parameter Name. Valid values:- AccessKeyId:Access Key ID.- SecretAccessKey:Secret Access Key.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Parameter value.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// OriginGroupSpec defines the desired state of OriginGroup
type OriginGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OriginGroupParameters `json:"forProvider"`
}

// OriginGroupStatus defines the observed state of OriginGroup.
type OriginGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OriginGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OriginGroup is the Schema for the OriginGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type OriginGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OriginGroupSpec   `json:"spec"`
	Status            OriginGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OriginGroupList contains a list of OriginGroups
type OriginGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OriginGroup `json:"items"`
}

// Repository type metadata.
var (
	OriginGroup_Kind             = "OriginGroup"
	OriginGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OriginGroup_Kind}.String()
	OriginGroup_KindAPIVersion   = OriginGroup_Kind + "." + CRDGroupVersion.String()
	OriginGroup_GroupVersionKind = CRDGroupVersion.WithKind(OriginGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&OriginGroup{}, &OriginGroupList{})
}
