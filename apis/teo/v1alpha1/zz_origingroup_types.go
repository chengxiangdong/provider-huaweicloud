/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OriginGroupInitParameters struct {

	// Back-to-origin Host Header, it only takes effect when type = HTTP is passed in. The rule engine modifies the Host Header configuration priority to be higher than the Host Header of the origin site group.
	// Back-to-origin Host Header, it only takes effect when type = HTTP is passed in. The rule engine modifies the Host Header configuration priority to be higher than the Host Header of the origin site group.
	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	// OriginGroup Name.
	// OriginGroup Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Origin site records.
	// Origin site records.
	Records []RecordsInitParameters `json:"records,omitempty" tf:"records,omitempty"`

	// Type of the origin site. Valid values:
	// Type of the origin site. Valid values:
	// - `GENERAL`: Universal origin site group, only supports adding IP/domain name origin sites, which can be referenced by domain name service, rule engine, four-layer proxy, general load balancing, and HTTP-specific load balancing.
	// - `HTTP`: The HTTP-specific origin site group, supports adding IP/domain name and object storage origin site as the origin site, it cannot be referenced by the four-layer proxy, it can only be added to the acceleration domain name, rule engine-modify origin site, and HTTP-specific load balancing reference.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Site ID.
	// Site ID.
	// +crossplane:generate:reference:type=Zone
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type OriginGroupObservation struct {

	// Origin site group creation time.
	// Origin site group creation time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Back-to-origin Host Header, it only takes effect when type = HTTP is passed in. The rule engine modifies the Host Header configuration priority to be higher than the Host Header of the origin site group.
	// Back-to-origin Host Header, it only takes effect when type = HTTP is passed in. The rule engine modifies the Host Header configuration priority to be higher than the Host Header of the origin site group.
	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// OriginGroup Name.
	// OriginGroup Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// OriginGroup ID.
	// OriginGroup ID.
	OriginGroupID *string `json:"originGroupId,omitempty" tf:"origin_group_id,omitempty"`

	// Origin site records.
	// Origin site records.
	Records []RecordsObservation `json:"records,omitempty" tf:"records,omitempty"`

	// List of referenced instances of the origin site group.
	// List of referenced instances of the origin site group.
	References []ReferencesObservation `json:"references,omitempty" tf:"references,omitempty"`

	// Type of the origin site. Valid values:
	// Type of the origin site. Valid values:
	// - `GENERAL`: Universal origin site group, only supports adding IP/domain name origin sites, which can be referenced by domain name service, rule engine, four-layer proxy, general load balancing, and HTTP-specific load balancing.
	// - `HTTP`: The HTTP-specific origin site group, supports adding IP/domain name and object storage origin site as the origin site, it cannot be referenced by the four-layer proxy, it can only be added to the acceleration domain name, rule engine-modify origin site, and HTTP-specific load balancing reference.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Origin site group update time.
	// Origin site group update time.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// Site ID.
	// Site ID.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type OriginGroupParameters struct {

	// Back-to-origin Host Header, it only takes effect when type = HTTP is passed in. The rule engine modifies the Host Header configuration priority to be higher than the Host Header of the origin site group.
	// Back-to-origin Host Header, it only takes effect when type = HTTP is passed in. The rule engine modifies the Host Header configuration priority to be higher than the Host Header of the origin site group.
	// +kubebuilder:validation:Optional
	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	// OriginGroup Name.
	// OriginGroup Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Origin site records.
	// Origin site records.
	// +kubebuilder:validation:Optional
	Records []RecordsParameters `json:"records,omitempty" tf:"records,omitempty"`

	// Type of the origin site. Valid values:
	// Type of the origin site. Valid values:
	// - `GENERAL`: Universal origin site group, only supports adding IP/domain name origin sites, which can be referenced by domain name service, rule engine, four-layer proxy, general load balancing, and HTTP-specific load balancing.
	// - `HTTP`: The HTTP-specific origin site group, supports adding IP/domain name and object storage origin site as the origin site, it cannot be referenced by the four-layer proxy, it can only be added to the acceleration domain name, rule engine-modify origin site, and HTTP-specific load balancing reference.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Site ID.
	// Site ID.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type PrivateParametersInitParameters struct {

	// OriginGroup Name.
	// Private authentication parameter name, the values are:
	// - `AccessKeyId`: Authentication parameter Access Key ID.
	// - `SecretAccessKey`: Authentication parameter Secret Access Key.
	// - `SignatureVersion`: Authentication version, v2 or v4.
	// - `Region`: Bucket region.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Private authentication parameter value.
	// Private authentication parameter value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PrivateParametersObservation struct {

	// OriginGroup Name.
	// Private authentication parameter name, the values are:
	// - `AccessKeyId`: Authentication parameter Access Key ID.
	// - `SecretAccessKey`: Authentication parameter Secret Access Key.
	// - `SignatureVersion`: Authentication version, v2 or v4.
	// - `Region`: Bucket region.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Private authentication parameter value.
	// Private authentication parameter value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PrivateParametersParameters struct {

	// OriginGroup Name.
	// Private authentication parameter name, the values are:
	// - `AccessKeyId`: Authentication parameter Access Key ID.
	// - `SecretAccessKey`: Authentication parameter Secret Access Key.
	// - `SignatureVersion`: Authentication version, v2 or v4.
	// - `Region`: Bucket region.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Private authentication parameter value.
	// Private authentication parameter value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type RecordsInitParameters struct {

	// Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
	// Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
	// - `true`: Use private authentication.
	// - `false`: Do not use private authentication.
	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// Parameters for private authentication. Only valid when Private is true.
	// Parameters for private authentication. Only valid when `Private` is `true`.
	PrivateParameters []PrivateParametersInitParameters `json:"privateParameters,omitempty" tf:"private_parameters,omitempty"`

	// Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
	// Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
	Record *string `json:"record,omitempty" tf:"record,omitempty"`

	// Origin record ID.
	// Origin record ID.
	RecordID *string `json:"recordId,omitempty" tf:"record_id,omitempty"`

	// Type of the origin site. Valid values:
	// Origin site type, the values are:
	// - `IP_DOMAIN`: IPV4, IPV6, domain name type origin site.
	// - `COS`: COS source.
	// - `AWS_S3`: AWS S3 object storage origin site.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
	// The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RecordsObservation struct {

	// Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
	// Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
	// - `true`: Use private authentication.
	// - `false`: Do not use private authentication.
	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// Parameters for private authentication. Only valid when Private is true.
	// Parameters for private authentication. Only valid when `Private` is `true`.
	PrivateParameters []PrivateParametersObservation `json:"privateParameters,omitempty" tf:"private_parameters,omitempty"`

	// Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
	// Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
	Record *string `json:"record,omitempty" tf:"record,omitempty"`

	// Origin record ID.
	// Origin record ID.
	RecordID *string `json:"recordId,omitempty" tf:"record_id,omitempty"`

	// Type of the origin site. Valid values:
	// Origin site type, the values are:
	// - `IP_DOMAIN`: IPV4, IPV6, domain name type origin site.
	// - `COS`: COS source.
	// - `AWS_S3`: AWS S3 object storage origin site.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
	// The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RecordsParameters struct {

	// Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
	// Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
	// - `true`: Use private authentication.
	// - `false`: Do not use private authentication.
	// +kubebuilder:validation:Optional
	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// Parameters for private authentication. Only valid when Private is true.
	// Parameters for private authentication. Only valid when `Private` is `true`.
	// +kubebuilder:validation:Optional
	PrivateParameters []PrivateParametersParameters `json:"privateParameters,omitempty" tf:"private_parameters,omitempty"`

	// Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
	// Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
	// +kubebuilder:validation:Optional
	Record *string `json:"record" tf:"record,omitempty"`

	// Origin record ID.
	// Origin record ID.
	// +kubebuilder:validation:Optional
	RecordID *string `json:"recordId,omitempty" tf:"record_id,omitempty"`

	// Type of the origin site. Valid values:
	// Origin site type, the values are:
	// - `IP_DOMAIN`: IPV4, IPV6, domain name type origin site.
	// - `COS`: COS source.
	// - `AWS_S3`: AWS S3 object storage origin site.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
	// The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type ReferencesInitParameters struct {
}

type ReferencesObservation struct {

	// The instance ID of the reference type.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Instance name of the application type.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// Reference service type, the values are:
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`
}

type ReferencesParameters struct {
}

// OriginGroupSpec defines the desired state of OriginGroup
type OriginGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OriginGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OriginGroupInitParameters `json:"initProvider,omitempty"`
}

// OriginGroupStatus defines the observed state of OriginGroup.
type OriginGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OriginGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OriginGroup is the Schema for the OriginGroups API. Provides a resource to create a teo origin_group
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type OriginGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.records) || (has(self.initProvider) && has(self.initProvider.records))",message="spec.forProvider.records is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   OriginGroupSpec   `json:"spec"`
	Status OriginGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OriginGroupList contains a list of OriginGroups
type OriginGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OriginGroup `json:"items"`
}

// Repository type metadata.
var (
	OriginGroup_Kind             = "OriginGroup"
	OriginGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OriginGroup_Kind}.String()
	OriginGroup_KindAPIVersion   = OriginGroup_Kind + "." + CRDGroupVersion.String()
	OriginGroup_GroupVersionKind = CRDGroupVersion.WithKind(OriginGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&OriginGroup{}, &OriginGroupList{})
}
