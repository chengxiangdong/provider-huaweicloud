/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpStrategyObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	StrategyID *string `json:"strategyId,omitempty" tf:"strategy_id,omitempty"`
}

type IpStrategyParameters struct {

	// The ID of the API gateway service.
	// +crossplane:generate:reference:type=Service
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceIDRef *v1.Reference `json:"serviceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceIDSelector *v1.Selector `json:"serviceIdSelector,omitempty" tf:"-"`

	// IP address data.
	// +kubebuilder:validation:Required
	StrategyData *string `json:"strategyData" tf:"strategy_data,omitempty"`

	// User defined strategy name.
	// +kubebuilder:validation:Required
	StrategyName *string `json:"strategyName" tf:"strategy_name,omitempty"`

	// Blacklist or whitelist.
	// +kubebuilder:validation:Required
	StrategyType *string `json:"strategyType" tf:"strategy_type,omitempty"`
}

// IpStrategySpec defines the desired state of IpStrategy
type IpStrategySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpStrategyParameters `json:"forProvider"`
}

// IpStrategyStatus defines the observed state of IpStrategy.
type IpStrategyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpStrategyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpStrategy is the Schema for the IpStrategys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type IpStrategy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IpStrategySpec   `json:"spec"`
	Status            IpStrategyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpStrategyList contains a list of IpStrategys
type IpStrategyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpStrategy `json:"items"`
}

// Repository type metadata.
var (
	IpStrategy_Kind             = "IpStrategy"
	IpStrategy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpStrategy_Kind}.String()
	IpStrategy_KindAPIVersion   = IpStrategy_Kind + "." + CRDGroupVersion.String()
	IpStrategy_GroupVersionKind = CRDGroupVersion.WithKind(IpStrategy_Kind)
)

func init() {
	SchemeBuilder.Register(&IpStrategy{}, &IpStrategyList{})
}
