/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApiKeyAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApiKeyAttachmentParameters struct {

	// ID of API key.
	// +crossplane:generate:reference:type=ApiKey
	// +kubebuilder:validation:Optional
	APIKeyID *string `json:"apiKeyId,omitempty" tf:"api_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	APIKeyIDRef *v1.Reference `json:"apiKeyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	APIKeyIDSelector *v1.Selector `json:"apiKeyIdSelector,omitempty" tf:"-"`

	// ID of the usage plan.
	// +crossplane:generate:reference:type=UsagePlan
	// +kubebuilder:validation:Optional
	UsagePlanID *string `json:"usagePlanId,omitempty" tf:"usage_plan_id,omitempty"`

	// +kubebuilder:validation:Optional
	UsagePlanIDRef *v1.Reference `json:"usagePlanIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	UsagePlanIDSelector *v1.Selector `json:"usagePlanIdSelector,omitempty" tf:"-"`
}

// ApiKeyAttachmentSpec defines the desired state of ApiKeyAttachment
type ApiKeyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApiKeyAttachmentParameters `json:"forProvider"`
}

// ApiKeyAttachmentStatus defines the observed state of ApiKeyAttachment.
type ApiKeyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApiKeyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiKeyAttachment is the Schema for the ApiKeyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ApiKeyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiKeyAttachmentSpec   `json:"spec"`
	Status            ApiKeyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiKeyAttachmentList contains a list of ApiKeyAttachments
type ApiKeyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiKeyAttachment `json:"items"`
}

// Repository type metadata.
var (
	ApiKeyAttachment_Kind             = "ApiKeyAttachment"
	ApiKeyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApiKeyAttachment_Kind}.String()
	ApiKeyAttachment_KindAPIVersion   = ApiKeyAttachment_Kind + "." + CRDGroupVersion.String()
	ApiKeyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ApiKeyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ApiKeyAttachment{}, &ApiKeyAttachmentList{})
}
