/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIListObservation struct {
	APIDesc *string `json:"apiDesc,omitempty" tf:"api_desc,omitempty"`

	APIID *string `json:"apiId,omitempty" tf:"api_id,omitempty"`

	APIName *string `json:"apiName,omitempty" tf:"api_name,omitempty"`

	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type APIListParameters struct {
}

type ServiceObservation struct {
	APIList []APIListObservation `json:"apiList,omitempty" tf:"api_list,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InnerHTTPPort *float64 `json:"innerHttpPort,omitempty" tf:"inner_http_port,omitempty"`

	InnerHTTPSPort *float64 `json:"innerHttpsPort,omitempty" tf:"inner_https_port,omitempty"`

	InternalSubDomain *string `json:"internalSubDomain,omitempty" tf:"internal_sub_domain,omitempty"`

	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	OuterSubDomain *string `json:"outerSubDomain,omitempty" tf:"outer_sub_domain,omitempty"`

	UsagePlanList []UsagePlanListObservation `json:"usagePlanList,omitempty" tf:"usage_plan_list,omitempty"`
}

type ServiceParameters struct {

	// Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
	// +kubebuilder:validation:Optional
	ExclusiveSetName *string `json:"exclusiveSetName,omitempty" tf:"exclusive_set_name,omitempty"`

	// IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Exclusive instance ID.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
	// +kubebuilder:validation:Required
	NetType []*string `json:"netType" tf:"net_type,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	// +kubebuilder:validation:Optional
	PreLimit *float64 `json:"preLimit,omitempty" tf:"pre_limit,omitempty"`

	// Service frontend request type. Valid values: `http`, `https`, `http&https`.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	// +kubebuilder:validation:Optional
	ReleaseLimit *float64 `json:"releaseLimit,omitempty" tf:"release_limit,omitempty"`

	// Custom service description.
	// +kubebuilder:validation:Optional
	ServiceDesc *string `json:"serviceDesc,omitempty" tf:"service_desc,omitempty"`

	// Custom service name.
	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// Tag description list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	// +kubebuilder:validation:Optional
	TestLimit *float64 `json:"testLimit,omitempty" tf:"test_limit,omitempty"`

	// VPC ID.
	// +kubebuilder:validation:Optional
	UniqVPCID *string `json:"uniqVpcId,omitempty" tf:"uniq_vpc_id,omitempty"`
}

type UsagePlanListObservation struct {
	APIID *string `json:"apiId,omitempty" tf:"api_id,omitempty"`

	BindType *string `json:"bindType,omitempty" tf:"bind_type,omitempty"`

	UsagePlanID *string `json:"usagePlanId,omitempty" tf:"usage_plan_id,omitempty"`

	UsagePlanName *string `json:"usagePlanName,omitempty" tf:"usage_plan_name,omitempty"`
}

type UsagePlanListParameters struct {
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceParameters `json:"forProvider"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Service is the Schema for the Services API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpec   `json:"spec"`
	Status            ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	Service_Kind             = "Service"
	Service_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Service_Kind}.String()
	Service_KindAPIVersion   = Service_Kind + "." + CRDGroupVersion.String()
	Service_GroupVersionKind = CRDGroupVersion.WithKind(Service_Kind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
