/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StrategyAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StrategyAttachmentParameters struct {

	// The API that needs to be bound.
	// +crossplane:generate:reference:type=Api
	// +kubebuilder:validation:Optional
	BindAPIID *string `json:"bindApiId,omitempty" tf:"bind_api_id,omitempty"`

	// +kubebuilder:validation:Optional
	BindAPIIDRef *v1.Reference `json:"bindApiidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	BindAPIIDSelector *v1.Selector `json:"bindApiidSelector,omitempty" tf:"-"`

	// The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
	// +kubebuilder:validation:Required
	EnvironmentName *string `json:"environmentName" tf:"environment_name,omitempty"`

	// The ID of the API gateway service.
	// +crossplane:generate:reference:type=Service
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceIDRef *v1.Reference `json:"serviceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceIDSelector *v1.Selector `json:"serviceIdSelector,omitempty" tf:"-"`

	// The ID of the API gateway strategy.
	// +crossplane:generate:reference:type=IpStrategy
	// +kubebuilder:validation:Optional
	StrategyID *string `json:"strategyId,omitempty" tf:"strategy_id,omitempty"`

	// +kubebuilder:validation:Optional
	StrategyIDRef *v1.Reference `json:"strategyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StrategyIDSelector *v1.Selector `json:"strategyIdSelector,omitempty" tf:"-"`
}

// StrategyAttachmentSpec defines the desired state of StrategyAttachment
type StrategyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StrategyAttachmentParameters `json:"forProvider"`
}

// StrategyAttachmentStatus defines the observed state of StrategyAttachment.
type StrategyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StrategyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StrategyAttachment is the Schema for the StrategyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type StrategyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StrategyAttachmentSpec   `json:"spec"`
	Status            StrategyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StrategyAttachmentList contains a list of StrategyAttachments
type StrategyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StrategyAttachment `json:"items"`
}

// Repository type metadata.
var (
	StrategyAttachment_Kind             = "StrategyAttachment"
	StrategyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StrategyAttachment_Kind}.String()
	StrategyAttachment_KindAPIVersion   = StrategyAttachment_Kind + "." + CRDGroupVersion.String()
	StrategyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(StrategyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&StrategyAttachment{}, &StrategyAttachmentList{})
}
