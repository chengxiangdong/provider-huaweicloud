/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachListObservation struct {
	APIID *string `json:"apiId,omitempty" tf:"api_id,omitempty"`

	APIName *string `json:"apiName,omitempty" tf:"api_name,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type AttachListParameters struct {
}

type UsagePlanObservation struct {
	AttachAPIKeys []*string `json:"attachApiKeys,omitempty" tf:"attach_api_keys,omitempty"`

	AttachList []AttachListObservation `json:"attachList,omitempty" tf:"attach_list,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`
}

type UsagePlanParameters struct {

	// Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
	// +kubebuilder:validation:Optional
	MaxRequestNum *float64 `json:"maxRequestNum,omitempty" tf:"max_request_num,omitempty"`

	// Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
	// +kubebuilder:validation:Optional
	MaxRequestNumPreSec *float64 `json:"maxRequestNumPreSec,omitempty" tf:"max_request_num_pre_sec,omitempty"`

	// Custom usage plan description.
	// +kubebuilder:validation:Optional
	UsagePlanDesc *string `json:"usagePlanDesc,omitempty" tf:"usage_plan_desc,omitempty"`

	// Custom usage plan name.
	// +kubebuilder:validation:Required
	UsagePlanName *string `json:"usagePlanName" tf:"usage_plan_name,omitempty"`
}

// UsagePlanSpec defines the desired state of UsagePlan
type UsagePlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UsagePlanParameters `json:"forProvider"`
}

// UsagePlanStatus defines the observed state of UsagePlan.
type UsagePlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UsagePlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UsagePlan is the Schema for the UsagePlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type UsagePlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UsagePlanSpec   `json:"spec"`
	Status            UsagePlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UsagePlanList contains a list of UsagePlans
type UsagePlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UsagePlan `json:"items"`
}

// Repository type metadata.
var (
	UsagePlan_Kind             = "UsagePlan"
	UsagePlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UsagePlan_Kind}.String()
	UsagePlan_KindAPIVersion   = UsagePlan_Kind + "." + CRDGroupVersion.String()
	UsagePlan_GroupVersionKind = CRDGroupVersion.WithKind(UsagePlan_Kind)
)

func init() {
	SchemeBuilder.Register(&UsagePlan{}, &UsagePlanList{})
}
