/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceReleaseObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceReleaseParameters struct {

	// API gateway service environment name to be released. Valid values: `test`, `prepub`, `release`.
	// +kubebuilder:validation:Required
	EnvironmentName *string `json:"environmentName" tf:"environment_name,omitempty"`

	// This release description of the API gateway service.
	// +kubebuilder:validation:Required
	ReleaseDesc *string `json:"releaseDesc" tf:"release_desc,omitempty"`

	// The release version.
	// +kubebuilder:validation:Optional
	ReleaseVersion *string `json:"releaseVersion,omitempty" tf:"release_version,omitempty"`

	// ID of API gateway service.
	// +crossplane:generate:reference:type=Service
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceIDRef *v1.Reference `json:"serviceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceIDSelector *v1.Selector `json:"serviceIdSelector,omitempty" tf:"-"`
}

// ServiceReleaseSpec defines the desired state of ServiceRelease
type ServiceReleaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceReleaseParameters `json:"forProvider"`
}

// ServiceReleaseStatus defines the observed state of ServiceRelease.
type ServiceReleaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceReleaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceRelease is the Schema for the ServiceReleases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ServiceRelease struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceReleaseSpec   `json:"spec"`
	Status            ServiceReleaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceReleaseList contains a list of ServiceReleases
type ServiceReleaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceRelease `json:"items"`
}

// Repository type metadata.
var (
	ServiceRelease_Kind             = "ServiceRelease"
	ServiceRelease_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceRelease_Kind}.String()
	ServiceRelease_KindAPIVersion   = ServiceRelease_Kind + "." + CRDGroupVersion.String()
	ServiceRelease_GroupVersionKind = CRDGroupVersion.WithKind(ServiceRelease_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceRelease{}, &ServiceReleaseList{})
}
