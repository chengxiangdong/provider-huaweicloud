/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UsagePlanAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type UsagePlanAttachmentParameters struct {

	// ID of the API. This parameter will be required when `bind_type` is `API`.
	// +crossplane:generate:reference:type=Api
	// +kubebuilder:validation:Optional
	APIID *string `json:"apiId,omitempty" tf:"api_id,omitempty"`

	// +kubebuilder:validation:Optional
	APIIDRef *v1.Reference `json:"apiidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	APIIDSelector *v1.Selector `json:"apiidSelector,omitempty" tf:"-"`

	// Binding type. Valid values: `API`, `SERVICE`. Default value is `SERVICE`.
	// +kubebuilder:validation:Optional
	BindType *string `json:"bindType,omitempty" tf:"bind_type,omitempty"`

	// The environment to be bound. Valid values: `test`, `prepub`, `release`.
	// +kubebuilder:validation:Required
	Environment *string `json:"environment" tf:"environment,omitempty"`

	// ID of the service.
	// +crossplane:generate:reference:type=Service
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceIDRef *v1.Reference `json:"serviceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceIDSelector *v1.Selector `json:"serviceIdSelector,omitempty" tf:"-"`

	// ID of the usage plan.
	// +crossplane:generate:reference:type=UsagePlan
	// +kubebuilder:validation:Optional
	UsagePlanID *string `json:"usagePlanId,omitempty" tf:"usage_plan_id,omitempty"`

	// +kubebuilder:validation:Optional
	UsagePlanIDRef *v1.Reference `json:"usagePlanIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	UsagePlanIDSelector *v1.Selector `json:"usagePlanIdSelector,omitempty" tf:"-"`
}

// UsagePlanAttachmentSpec defines the desired state of UsagePlanAttachment
type UsagePlanAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UsagePlanAttachmentParameters `json:"forProvider"`
}

// UsagePlanAttachmentStatus defines the observed state of UsagePlanAttachment.
type UsagePlanAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UsagePlanAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UsagePlanAttachment is the Schema for the UsagePlanAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type UsagePlanAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UsagePlanAttachmentSpec   `json:"spec"`
	Status            UsagePlanAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UsagePlanAttachmentList contains a list of UsagePlanAttachments
type UsagePlanAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UsagePlanAttachment `json:"items"`
}

// Repository type metadata.
var (
	UsagePlanAttachment_Kind             = "UsagePlanAttachment"
	UsagePlanAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UsagePlanAttachment_Kind}.String()
	UsagePlanAttachment_KindAPIVersion   = UsagePlanAttachment_Kind + "." + CRDGroupVersion.String()
	UsagePlanAttachment_GroupVersionKind = CRDGroupVersion.WithKind(UsagePlanAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&UsagePlanAttachment{}, &UsagePlanAttachmentList{})
}
