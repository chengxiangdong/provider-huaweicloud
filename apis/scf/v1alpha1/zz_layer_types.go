/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContentObservation struct {
}

type ContentParameters struct {

	// Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zip_file`.
	// +kubebuilder:validation:Optional
	CosBucketName *string `json:"cosBucketName,omitempty" tf:"cos_bucket_name,omitempty"`

	// Cos bucket region of the SCF layer, conflict with `zip_file`.
	// +kubebuilder:validation:Optional
	CosBucketRegion *string `json:"cosBucketRegion,omitempty" tf:"cos_bucket_region,omitempty"`

	// Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
	// +kubebuilder:validation:Optional
	CosObjectName *string `json:"cosObjectName,omitempty" tf:"cos_object_name,omitempty"`

	// Zip file of the SCF layer, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
	// +kubebuilder:validation:Optional
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type LayerObservation struct {
	CodeSha256 *string `json:"codeSha256,omitempty" tf:"code_sha_256,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LayerVersion *float64 `json:"layerVersion,omitempty" tf:"layer_version,omitempty"`

	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type LayerParameters struct {

	// The compatible runtimes of layer.
	// +kubebuilder:validation:Required
	CompatibleRuntimes []*string `json:"compatibleRuntimes" tf:"compatible_runtimes,omitempty"`

	// The source code of layer.
	// +kubebuilder:validation:Required
	Content []ContentParameters `json:"content" tf:"content,omitempty"`

	// The description of layer.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of layer.
	// +kubebuilder:validation:Required
	LayerName *string `json:"layerName" tf:"layer_name,omitempty"`

	// The license info of layer.
	// +kubebuilder:validation:Optional
	LicenseInfo *string `json:"licenseInfo,omitempty" tf:"license_info,omitempty"`
}

// LayerSpec defines the desired state of Layer
type LayerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LayerParameters `json:"forProvider"`
}

// LayerStatus defines the observed state of Layer.
type LayerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LayerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Layer is the Schema for the Layers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Layer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LayerSpec   `json:"spec"`
	Status            LayerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LayerList contains a list of Layers
type LayerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Layer `json:"items"`
}

// Repository type metadata.
var (
	Layer_Kind             = "Layer"
	Layer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Layer_Kind}.String()
	Layer_KindAPIVersion   = Layer_Kind + "." + CRDGroupVersion.String()
	Layer_GroupVersionKind = CRDGroupVersion.WithKind(Layer_Kind)
)

func init() {
	SchemeBuilder.Register(&Layer{}, &LayerList{})
}
