/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ScfNamespaceObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ScfNamespaceParameters struct {

	// Description of the SCF namespace.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the SCF namespace.
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

// ScfNamespaceSpec defines the desired state of ScfNamespace
type ScfNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScfNamespaceParameters `json:"forProvider"`
}

// ScfNamespaceStatus defines the observed state of ScfNamespace.
type ScfNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScfNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ScfNamespace is the Schema for the ScfNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ScfNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScfNamespaceSpec   `json:"spec"`
	Status            ScfNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScfNamespaceList contains a list of ScfNamespaces
type ScfNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScfNamespace `json:"items"`
}

// Repository type metadata.
var (
	ScfNamespace_Kind             = "ScfNamespace"
	ScfNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScfNamespace_Kind}.String()
	ScfNamespace_KindAPIVersion   = ScfNamespace_Kind + "." + CRDGroupVersion.String()
	ScfNamespace_GroupVersionKind = CRDGroupVersion.WithKind(ScfNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&ScfNamespace{}, &ScfNamespaceList{})
}
