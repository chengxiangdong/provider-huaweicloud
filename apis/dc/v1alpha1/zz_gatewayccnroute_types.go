/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayCcnRouteObservation struct {
	AsPath []*string `json:"asPath,omitempty" tf:"as_path,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayCcnRouteParameters struct {

	// A network address segment of IDC.
	// +kubebuilder:validation:Required
	CidrBlock *string `json:"cidrBlock" tf:"cidr_block,omitempty"`

	// ID of the DCG.
	// +crossplane:generate:reference:type=Gateway
	// +kubebuilder:validation:Optional
	DcgID *string `json:"dcgId,omitempty" tf:"dcg_id,omitempty"`

	// +kubebuilder:validation:Optional
	DcgIDRef *v1.Reference `json:"dcgIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DcgIDSelector *v1.Selector `json:"dcgIdSelector,omitempty" tf:"-"`
}

// GatewayCcnRouteSpec defines the desired state of GatewayCcnRoute
type GatewayCcnRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayCcnRouteParameters `json:"forProvider"`
}

// GatewayCcnRouteStatus defines the observed state of GatewayCcnRoute.
type GatewayCcnRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayCcnRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayCcnRoute is the Schema for the GatewayCcnRoutes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type GatewayCcnRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayCcnRouteSpec   `json:"spec"`
	Status            GatewayCcnRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayCcnRouteList contains a list of GatewayCcnRoutes
type GatewayCcnRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayCcnRoute `json:"items"`
}

// Repository type metadata.
var (
	GatewayCcnRoute_Kind             = "GatewayCcnRoute"
	GatewayCcnRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayCcnRoute_Kind}.String()
	GatewayCcnRoute_KindAPIVersion   = GatewayCcnRoute_Kind + "." + CRDGroupVersion.String()
	GatewayCcnRoute_GroupVersionKind = CRDGroupVersion.WithKind(GatewayCcnRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayCcnRoute{}, &GatewayCcnRouteList{})
}
