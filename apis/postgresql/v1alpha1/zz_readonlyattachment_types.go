/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReadonlyAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ReadonlyAttachmentParameters struct {

	// Read only instance ID.
	// +crossplane:generate:reference:type=ReadonlyInstance
	// +kubebuilder:validation:Optional
	DBInstanceID *string `json:"dbInstanceId,omitempty" tf:"db_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	DBInstanceIDRef *v1.Reference `json:"dbInstanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DBInstanceIDSelector *v1.Selector `json:"dbInstanceIdSelector,omitempty" tf:"-"`

	// Read only group ID.
	// +crossplane:generate:reference:type=ReadonlyGroup
	// +kubebuilder:validation:Optional
	ReadOnlyGroupID *string `json:"readOnlyGroupId,omitempty" tf:"read_only_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ReadOnlyGroupIDRef *v1.Reference `json:"readOnlyGroupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ReadOnlyGroupIDSelector *v1.Selector `json:"readOnlyGroupIdSelector,omitempty" tf:"-"`
}

// ReadonlyAttachmentSpec defines the desired state of ReadonlyAttachment
type ReadonlyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReadonlyAttachmentParameters `json:"forProvider"`
}

// ReadonlyAttachmentStatus defines the observed state of ReadonlyAttachment.
type ReadonlyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReadonlyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReadonlyAttachment is the Schema for the ReadonlyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ReadonlyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReadonlyAttachmentSpec   `json:"spec"`
	Status            ReadonlyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReadonlyAttachmentList contains a list of ReadonlyAttachments
type ReadonlyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReadonlyAttachment `json:"items"`
}

// Repository type metadata.
var (
	ReadonlyAttachment_Kind             = "ReadonlyAttachment"
	ReadonlyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReadonlyAttachment_Kind}.String()
	ReadonlyAttachment_KindAPIVersion   = ReadonlyAttachment_Kind + "." + CRDGroupVersion.String()
	ReadonlyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ReadonlyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ReadonlyAttachment{}, &ReadonlyAttachmentList{})
}
