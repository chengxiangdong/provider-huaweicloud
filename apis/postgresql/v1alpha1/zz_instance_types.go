/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupPlanObservation struct {
}

type BackupPlanParameters struct {

	// List of backup period per week, available values: `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`. NOTE: At least specify two days.
	// +kubebuilder:validation:Optional
	BackupPeriod []*string `json:"backupPeriod,omitempty" tf:"backup_period,omitempty"`

	// Specify days of the retention.
	// +kubebuilder:validation:Optional
	BaseBackupRetentionPeriod *float64 `json:"baseBackupRetentionPeriod,omitempty" tf:"base_backup_retention_period,omitempty"`

	// Specify latest backup start time, format `hh:mm:ss`.
	// +kubebuilder:validation:Optional
	MaxBackupStartTime *string `json:"maxBackupStartTime,omitempty" tf:"max_backup_start_time,omitempty"`

	// Specify earliest backup start time, format `hh:mm:ss`.
	// +kubebuilder:validation:Optional
	MinBackupStartTime *string `json:"minBackupStartTime,omitempty" tf:"min_backup_start_time,omitempty"`
}

type DBNodeSetObservation struct {
}

type DBNodeSetParameters struct {

	// Indicates node type, available values:`Primary`, `Standby`. Default: `Standby`.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Indicates the node available zone.
	// +kubebuilder:validation:Required
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

type InstanceObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PrivateAccessIP *string `json:"privateAccessIp,omitempty" tf:"private_access_ip,omitempty"`

	PrivateAccessPort *float64 `json:"privateAccessPort,omitempty" tf:"private_access_port,omitempty"`

	PublicAccessHost *string `json:"publicAccessHost,omitempty" tf:"public_access_host,omitempty"`

	PublicAccessPort *float64 `json:"publicAccessPort,omitempty" tf:"public_access_port,omitempty"`

	UID *float64 `json:"uid,omitempty" tf:"uid,omitempty"`
}

type InstanceParameters struct {

	// Availability zone. NOTE: If value modified but included in `db_node_set`, the diff will be suppressed.
	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// Specify DB backup plan.
	// +kubebuilder:validation:Optional
	BackupPlan []BackupPlanParameters `json:"backupPlan,omitempty" tf:"backup_plan,omitempty"`

	// Pay type of the postgresql instance. For now, only `POSTPAID_BY_HOUR` is valid.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Charset of the root account. Valid values are `UTF8`,`LATIN1`.
	// +kubebuilder:validation:Optional
	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	// PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created.
	// +kubebuilder:validation:Optional
	DBKernelVersion *string `json:"dbKernelVersion,omitempty" tf:"db_kernel_version,omitempty"`

	// PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	// +kubebuilder:validation:Optional
	DBMajorVersion *string `json:"dbMajorVersion,omitempty" tf:"db_major_version,omitempty"`

	// PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	// +kubebuilder:validation:Optional
	DBMajorVesion *string `json:"dbMajorVesion,omitempty" tf:"db_major_vesion,omitempty"`

	// Specify instance node info for disaster migration.
	// +kubebuilder:validation:Optional
	DBNodeSet []DBNodeSetParameters `json:"dbNodeSet,omitempty" tf:"db_node_set,omitempty"`

	// Version of the postgresql database engine. Valid values: `10.4`, `11.8`, `12.4`.
	// +kubebuilder:validation:Optional
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	// KeyId of the custom key.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Region of the custom key.
	// +kubebuilder:validation:Optional
	KMSRegion *string `json:"kmsRegion,omitempty" tf:"kms_region,omitempty"`

	// max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
	// +kubebuilder:validation:Optional
	MaxStandbyArchiveDelay *float64 `json:"maxStandbyArchiveDelay,omitempty" tf:"max_standby_archive_delay,omitempty"`

	// max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
	// +kubebuilder:validation:Optional
	MaxStandbyStreamingDelay *float64 `json:"maxStandbyStreamingDelay,omitempty" tf:"max_standby_streaming_delay,omitempty"`

	// Memory size(in GB). Allowed value must be larger than `memory` that data source `tencentcloud_postgresql_specinfos` provides.
	// +kubebuilder:validation:Required
	Memory *float64 `json:"memory" tf:"memory,omitempty"`

	// Name of the postgresql instance.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Whether to support data transparent encryption, 1: yes, 0: no (default).
	// +kubebuilder:validation:Optional
	NeedSupportTde *float64 `json:"needSupportTde,omitempty" tf:"need_support_tde,omitempty"`

	// Project id, default value is `0`.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Indicates whether to enable the access to an instance from public network or not.
	// +kubebuilder:validation:Optional
	PublicAccessSwitch *bool `json:"publicAccessSwitch,omitempty" tf:"public_access_switch,omitempty"`

	// Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
	// +kubebuilder:validation:Required
	RootPasswordSecretRef v1.SecretKeySelector `json:"rootPasswordSecretRef" tf:"-"`

	// Instance root account name. This parameter is optional, Default value is `root`.
	// +kubebuilder:validation:Optional
	RootUser *string `json:"rootUser,omitempty" tf:"root_user,omitempty"`

	// ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_postgresql_specinfos` provides.
	// +kubebuilder:validation:Required
	Storage *float64 `json:"storage" tf:"storage,omitempty"`

	// ID of subnet.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// The available tags within this postgresql.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of VPC.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcidSelector,omitempty" tf:"-"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec"`
	Status            InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
