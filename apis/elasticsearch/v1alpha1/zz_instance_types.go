/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EsACLObservation struct {
}

type EsACLParameters struct {

	// Blacklist of kibana access.
	// +kubebuilder:validation:Optional
	BlackList []*string `json:"blackList,omitempty" tf:"black_list,omitempty"`

	// Whitelist of kibana access.
	// +kubebuilder:validation:Optional
	WhiteList []*string `json:"whiteList,omitempty" tf:"white_list,omitempty"`
}

type InstanceObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ElasticsearchDomain *string `json:"elasticsearchDomain,omitempty" tf:"elasticsearch_domain,omitempty"`

	ElasticsearchPort *float64 `json:"elasticsearchPort,omitempty" tf:"elasticsearch_port,omitempty"`

	ElasticsearchVip *string `json:"elasticsearchVip,omitempty" tf:"elasticsearch_vip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KibanaURL *string `json:"kibanaUrl,omitempty" tf:"kibana_url,omitempty"`
}

type InstanceParameters struct {

	// Availability zone. When create multi-az es, this parameter must be omitted or `-`.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Whether to enable X-Pack security authentication in Basic Edition 6.8 and above. Valid values are `1` and `2`. `1` is disabled, `2` is enabled, and default value is `1`. Notice: this parameter is only take effect on `basic` license.
	// +kubebuilder:validation:Optional
	BasicSecurityType *float64 `json:"basicSecurityType,omitempty" tf:"basic_security_type,omitempty"`

	// The tenancy of the prepaid instance, and uint is month. NOTE: it only works when charge_type is set to `PREPAID`.
	// +kubebuilder:validation:Optional
	ChargePeriod *float64 `json:"chargePeriod,omitempty" tf:"charge_period,omitempty"`

	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Cluster deployment mode. Valid values are `0` and `1`. `0` is single-AZ deployment, and `1` is multi-AZ deployment. Default value is `0`.
	// +kubebuilder:validation:Optional
	DeployMode *float64 `json:"deployMode,omitempty" tf:"deploy_mode,omitempty"`

	// Kibana Access Control Configuration.
	// +kubebuilder:validation:Optional
	EsACL []EsACLParameters `json:"esAcl,omitempty" tf:"es_acl,omitempty"`

	// Name of the instance, which can contain 1 to 50 English letters, Chinese characters, digits, dashes(-), or underscores(_).
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// License type. Valid values are `oss`, `basic` and `platinum`. The default value is `platinum`.
	// +kubebuilder:validation:Optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type,omitempty"`

	// Details of AZs in multi-AZ deployment mode (which is required when deploy_mode is `1`).
	// +kubebuilder:validation:Optional
	MultiZoneInfos []MultiZoneInfosParameters `json:"multiZoneInfos,omitempty" tf:"multi_zone_infos,omitempty"`

	// Node information list, which is used to describe the specification information of various types of nodes in the cluster, such as node type, node quantity, node specification, disk type, and disk size.
	// +kubebuilder:validation:Required
	NodeInfoList []NodeInfoListParameters `json:"nodeInfoList" tf:"node_info_list,omitempty"`

	// Password to an instance, the password needs to be 8 to 16 characters, including at least two items ([a-z,A-Z], [0-9] and [-!@#$%&^*+=_:;,.?] special symbols.
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// When enabled, the instance will be renew automatically when it reach the end of the prepaid tenancy. Valid values are `RENEW_FLAG_AUTO` and `RENEW_FLAG_MANUAL`. NOTE: it only works when charge_type is set to `PREPAID`.
	// +kubebuilder:validation:Optional
	RenewFlag *string `json:"renewFlag,omitempty" tf:"renew_flag,omitempty"`

	// The ID of a VPC subnetwork. When create multi-az es, this parameter must be omitted or `-`.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// A mapping of tags to assign to the instance. For tag limits, please refer to [Use Limits](https://intl.cloud.tencent.com/document/product/651/13354).
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of a VPC network.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcidSelector,omitempty" tf:"-"`

	// Version of the instance. Valid values are `5.6.4`, `6.4.3`, `6.8.2`, `7.5.1` and `7.10.1`.
	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`

	// Visual node configuration.
	// +kubebuilder:validation:Optional
	WebNodeTypeInfo []WebNodeTypeInfoParameters `json:"webNodeTypeInfo,omitempty" tf:"web_node_type_info,omitempty"`
}

type MultiZoneInfosObservation struct {
}

type MultiZoneInfosParameters struct {

	// Availability zone.
	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// The ID of a VPC subnetwork.
	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

type NodeInfoListObservation struct {
}

type NodeInfoListParameters struct {

	// Node disk size. Unit is GB, and default value is `100`.
	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Node disk type. Valid values are `CLOUD_SSD` and `CLOUD_PREMIUM`, `CLOUD_HSSD`. The default value is `CLOUD_SSD`.
	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// Decides to encrypt this disk or not.
	// +kubebuilder:validation:Optional
	Encrypt *bool `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// Number of nodes.
	// +kubebuilder:validation:Required
	NodeNum *float64 `json:"nodeNum" tf:"node_num,omitempty"`

	// Node specification, and valid values refer to [document of tencentcloud](https://intl.cloud.tencent.com/document/product/845/18376).
	// +kubebuilder:validation:Required
	NodeType *string `json:"nodeType" tf:"node_type,omitempty"`

	// Node type. Valid values are `hotData`, `warmData` and `dedicatedMaster`. The default value is 'hotData`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type WebNodeTypeInfoObservation struct {
}

type WebNodeTypeInfoParameters struct {

	// Visual node number.
	// +kubebuilder:validation:Required
	NodeNum *float64 `json:"nodeNum" tf:"node_num,omitempty"`

	// Visual node specifications.
	// +kubebuilder:validation:Required
	NodeType *string `json:"nodeType" tf:"node_type,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec"`
	Status            InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
