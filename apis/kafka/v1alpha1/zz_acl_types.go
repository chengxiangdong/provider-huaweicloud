/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AclObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AclParameters struct {

	// The default is *, which means that any host can access it. Support filling in IP or network segment, and support `;`separation.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// ID of the ckafka instance.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// ACL operation mode. Valid values: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS` and `ALTER_CONFIGS`.
	// +kubebuilder:validation:Required
	OperationType *string `json:"operationType" tf:"operation_type,omitempty"`

	// ACL permission type. Valid values: `UNKNOWN`, `ANY`, `DENY`, `ALLOW`. and `ALLOW` by default. Currently, CKafka supports `ALLOW` (equivalent to allow list), and other fields will be used for future ACLs compatible with open-source Kafka.
	// +kubebuilder:validation:Optional
	PermissionType *string `json:"permissionType,omitempty" tf:"permission_type,omitempty"`

	// User list. The default value is `*`, which means that any user can access. The current user can only be one included in the user list. For example: `root` meaning user root can access.
	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// ACL resource name, which is related to `resource_type`. For example, if `resource_type` is `TOPIC`, this field indicates the topic name; if `resource_type` is `GROUP`, this field indicates the group name.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// ACL resource type. Valid values are `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`. and `TOPIC` by default. Currently, only `TOPIC` is available, and other fields will be used for future ACLs compatible with open-source Kafka.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

// AclSpec defines the desired state of Acl
type AclSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AclParameters `json:"forProvider"`
}

// AclStatus defines the observed state of Acl.
type AclStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Acl is the Schema for the Acls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Acl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AclSpec   `json:"spec"`
	Status            AclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AclList contains a list of Acls
type AclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Acl `json:"items"`
}

// Repository type metadata.
var (
	Acl_Kind             = "Acl"
	Acl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Acl_Kind}.String()
	Acl_KindAPIVersion   = Acl_Kind + "." + CRDGroupVersion.String()
	Acl_GroupVersionKind = CRDGroupVersion.WithKind(Acl_Kind)
)

func init() {
	SchemeBuilder.Register(&Acl{}, &AclList{})
}
