/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EniAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EniAttachmentParameters struct {

	// ID of the ENI.
	// +crossplane:generate:reference:type=Eni
	// +kubebuilder:validation:Optional
	EniID *string `json:"eniId,omitempty" tf:"eni_id,omitempty"`

	// +kubebuilder:validation:Optional
	EniIDRef *v1.Reference `json:"eniIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	EniIDSelector *v1.Selector `json:"eniIdSelector,omitempty" tf:"-"`

	// ID of the instance which bind the ENI.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/cvm/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`
}

// EniAttachmentSpec defines the desired state of EniAttachment
type EniAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EniAttachmentParameters `json:"forProvider"`
}

// EniAttachmentStatus defines the observed state of EniAttachment.
type EniAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EniAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EniAttachment is the Schema for the EniAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type EniAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EniAttachmentSpec   `json:"spec"`
	Status            EniAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EniAttachmentList contains a list of EniAttachments
type EniAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EniAttachment `json:"items"`
}

// Repository type metadata.
var (
	EniAttachment_Kind             = "EniAttachment"
	EniAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EniAttachment_Kind}.String()
	EniAttachment_KindAPIVersion   = EniAttachment_Kind + "." + CRDGroupVersion.String()
	EniAttachment_GroupVersionKind = CRDGroupVersion.WithKind(EniAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&EniAttachment{}, &EniAttachmentList{})
}
