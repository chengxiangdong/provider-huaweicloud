/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainInstanceObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DomainInstanceParameters struct {

	// The Domain.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// The Group Id of Domain.
	// +kubebuilder:validation:Optional
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Whether to Mark the Domain.
	// +kubebuilder:validation:Optional
	IsMark *string `json:"isMark,omitempty" tf:"is_mark,omitempty"`

	// The remark of Domain.
	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// The status of Domain.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// DomainInstanceSpec defines the desired state of DomainInstance
type DomainInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainInstanceParameters `json:"forProvider"`
}

// DomainInstanceStatus defines the observed state of DomainInstance.
type DomainInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainInstance is the Schema for the DomainInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type DomainInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainInstanceSpec   `json:"spec"`
	Status            DomainInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainInstanceList contains a list of DomainInstances
type DomainInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainInstance `json:"items"`
}

// Repository type metadata.
var (
	DomainInstance_Kind             = "DomainInstance"
	DomainInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainInstance_Kind}.String()
	DomainInstance_KindAPIVersion   = DomainInstance_Kind + "." + CRDGroupVersion.String()
	DomainInstance_GroupVersionKind = CRDGroupVersion.WithKind(DomainInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainInstance{}, &DomainInstanceList{})
}
