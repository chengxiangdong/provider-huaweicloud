/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdaptiveDynamicStreamingTemplateObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type AdaptiveDynamicStreamingTemplateParameters struct {

	// Template description. Length limit: 256 characters.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Whether to prohibit transcoding video from low bitrate to high bitrate. Valid values: `false`,`true`. `false`: no, `true`: yes. Default value: `false`.
	// +kubebuilder:validation:Optional
	DisableHigherVideoBitrate *bool `json:"disableHigherVideoBitrate,omitempty" tf:"disable_higher_video_bitrate,omitempty"`

	// Whether to prohibit transcoding from low resolution to high resolution. Valid values: `false`,`true`. `false`: no, `true`: yes. Default value: `false`.
	// +kubebuilder:validation:Optional
	DisableHigherVideoResolution *bool `json:"disableHigherVideoResolution,omitempty" tf:"disable_higher_video_resolution,omitempty"`

	// DRM scheme type. Valid values: `SimpleAES`. If this field is an empty string, DRM will not be performed on the video.
	// +kubebuilder:validation:Optional
	DrmType *string `json:"drmType,omitempty" tf:"drm_type,omitempty"`

	// Adaptive bitstream format. Valid values: `HLS`.
	// +kubebuilder:validation:Required
	Format *string `json:"format" tf:"format,omitempty"`

	// Template name. Length limit: 64 characters.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// List of AdaptiveStreamTemplate parameter information of output substream for adaptive bitrate streaming. Up to 10 substreams can be output. Note: the frame rate of all substreams must be the same; otherwise, the frame rate of the first substream will be used as the output frame rate.
	// +kubebuilder:validation:Required
	StreamInfo []StreamInfoParameters `json:"streamInfo" tf:"stream_info,omitempty"`

	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	// +kubebuilder:validation:Optional
	SubAppID *float64 `json:"subAppId,omitempty" tf:"sub_app_id,omitempty"`
}

type AudioObservation struct {
}

type AudioParameters struct {

	// Audio channel system. Valid values: mono, dual, stereo. Default value: dual.
	// +kubebuilder:validation:Optional
	AudioChannel *string `json:"audioChannel,omitempty" tf:"audio_channel,omitempty"`

	// Audio stream bitrate in Kbps. Value range: `0` and `[26, 256]`. If the value is `0`, the bitrate of the audio stream will be the same as that of the original audio.
	// +kubebuilder:validation:Required
	Bitrate *float64 `json:"bitrate" tf:"bitrate,omitempty"`

	// Audio stream encoder. Valid value are: `libfdk_aac` and `libmp3lame`. while `libfdk_aac` is recommended.
	// +kubebuilder:validation:Required
	Codec *string `json:"codec" tf:"codec,omitempty"`

	// Audio stream sample rate. Valid values: `32000`, `44100`, `48000`Hz.
	// +kubebuilder:validation:Required
	SampleRate *float64 `json:"sampleRate" tf:"sample_rate,omitempty"`
}

type StreamInfoObservation struct {
}

type StreamInfoParameters struct {

	// Audio parameter information.
	// +kubebuilder:validation:Required
	Audio []AudioParameters `json:"audio" tf:"audio,omitempty"`

	// Whether to remove audio stream. Valid values: `false`: no, `true`: yes. `false` by default.
	// +kubebuilder:validation:Optional
	RemoveAudio *bool `json:"removeAudio,omitempty" tf:"remove_audio,omitempty"`

	// Video parameter information.
	// +kubebuilder:validation:Required
	Video []VideoParameters `json:"video" tf:"video,omitempty"`
}

type VideoObservation struct {
}

type VideoParameters struct {

	// Bitrate of video stream in Kbps. Value range: `0` and `[128, 35000]`. If the value is `0`, the bitrate of the video will be the same as that of the source video.
	// +kubebuilder:validation:Required
	Bitrate *float64 `json:"bitrate" tf:"bitrate,omitempty"`

	// Video stream encoder. Valid values: `libx264`,`libx265`,`av1`. `libx264`: H.264, `libx265`: H.265, `av1`: AOMedia Video 1. Currently, a resolution within 640x480 must be specified for `H.265`. and the `av1` container only supports mp4.
	// +kubebuilder:validation:Required
	Codec *string `json:"codec" tf:"codec,omitempty"`

	// Fill type. Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: black. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	FillType *string `json:"fillType,omitempty" tf:"fill_type,omitempty"`

	// Video frame rate in Hz. Value range: `[0, 60]`. If the value is `0`, the frame rate will be the same as that of the source video.
	// +kubebuilder:validation:Required
	Fps *float64 `json:"fps" tf:"fps,omitempty"`

	// Maximum value of the height (or short side) of a video stream in px. Value range: `0` and `[128, 4096]`. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	ResolutionAdaptive *bool `json:"resolutionAdaptive,omitempty" tf:"resolution_adaptive,omitempty"`

	// Maximum value of the width (or long side) of a video stream in px. Value range: `0` and `[128, 4096]`. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

// AdaptiveDynamicStreamingTemplateSpec defines the desired state of AdaptiveDynamicStreamingTemplate
type AdaptiveDynamicStreamingTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AdaptiveDynamicStreamingTemplateParameters `json:"forProvider"`
}

// AdaptiveDynamicStreamingTemplateStatus defines the observed state of AdaptiveDynamicStreamingTemplate.
type AdaptiveDynamicStreamingTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AdaptiveDynamicStreamingTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AdaptiveDynamicStreamingTemplate is the Schema for the AdaptiveDynamicStreamingTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type AdaptiveDynamicStreamingTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AdaptiveDynamicStreamingTemplateSpec   `json:"spec"`
	Status            AdaptiveDynamicStreamingTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AdaptiveDynamicStreamingTemplateList contains a list of AdaptiveDynamicStreamingTemplates
type AdaptiveDynamicStreamingTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AdaptiveDynamicStreamingTemplate `json:"items"`
}

// Repository type metadata.
var (
	AdaptiveDynamicStreamingTemplate_Kind             = "AdaptiveDynamicStreamingTemplate"
	AdaptiveDynamicStreamingTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AdaptiveDynamicStreamingTemplate_Kind}.String()
	AdaptiveDynamicStreamingTemplate_KindAPIVersion   = AdaptiveDynamicStreamingTemplate_Kind + "." + CRDGroupVersion.String()
	AdaptiveDynamicStreamingTemplate_GroupVersionKind = CRDGroupVersion.WithKind(AdaptiveDynamicStreamingTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&AdaptiveDynamicStreamingTemplate{}, &AdaptiveDynamicStreamingTemplateList{})
}
