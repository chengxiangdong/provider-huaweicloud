/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdaptiveDynamicStreamingTaskListObservation struct {
}

type AdaptiveDynamicStreamingTaskListParameters struct {

	// Adaptive bitrate streaming template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []WatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type AnimatedGraphicTaskListObservation struct {
}

type AnimatedGraphicTaskListParameters struct {

	// Animated image generating template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// +kubebuilder:validation:Required
	EndTimeOffset *float64 `json:"endTimeOffset" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// +kubebuilder:validation:Required
	StartTimeOffset *float64 `json:"startTimeOffset" tf:"start_time_offset,omitempty"`
}

type CoverBySnapshotTaskListObservation struct {
}

type CoverBySnapshotTaskListParameters struct {

	// Time point screen capturing template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// Screen capturing mode. Valid values: `Time`, `Percent`. `Time`: screen captures by time point, `Percent`: screen captures by percentage.
	// +kubebuilder:validation:Required
	PositionType *string `json:"positionType" tf:"position_type,omitempty"`

	// Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
	// +kubebuilder:validation:Required
	PositionValue *float64 `json:"positionValue" tf:"position_value,omitempty"`

	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []CoverBySnapshotTaskListWatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type CoverBySnapshotTaskListWatermarkListObservation struct {
}

type CoverBySnapshotTaskListWatermarkListParameters struct {

	// Watermarking template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type ImageSpriteTaskListObservation struct {
}

type ImageSpriteTaskListParameters struct {

	// Image sprite generating template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`
}

type MediaProcessTaskObservation struct {
}

type MediaProcessTaskParameters struct {

	// List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	AdaptiveDynamicStreamingTaskList []AdaptiveDynamicStreamingTaskListParameters `json:"adaptiveDynamicStreamingTaskList,omitempty" tf:"adaptive_dynamic_streaming_task_list,omitempty"`

	// List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	AnimatedGraphicTaskList []AnimatedGraphicTaskListParameters `json:"animatedGraphicTaskList,omitempty" tf:"animated_graphic_task_list,omitempty"`

	// List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	CoverBySnapshotTaskList []CoverBySnapshotTaskListParameters `json:"coverBySnapshotTaskList,omitempty" tf:"cover_by_snapshot_task_list,omitempty"`

	// List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	ImageSpriteTaskList []ImageSpriteTaskListParameters `json:"imageSpriteTaskList,omitempty" tf:"image_sprite_task_list,omitempty"`

	// List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SampleSnapshotTaskList []SampleSnapshotTaskListParameters `json:"sampleSnapshotTaskList,omitempty" tf:"sample_snapshot_task_list,omitempty"`

	// List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SnapshotByTimeOffsetTaskList []SnapshotByTimeOffsetTaskListParameters `json:"snapshotByTimeOffsetTaskList,omitempty" tf:"snapshot_by_time_offset_task_list,omitempty"`

	// List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TranscodeTaskList []TranscodeTaskListParameters `json:"transcodeTaskList,omitempty" tf:"transcode_task_list,omitempty"`
}

type MosaicListObservation struct {
}

type MosaicListParameters struct {

	// Origin position, which currently can only be: `TopLeft`: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text. Default value: TopLeft.
	// +kubebuilder:validation:Optional
	CoordinateOrigin *string `json:"coordinateOrigin,omitempty" tf:"coordinate_origin,omitempty"`

	// End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Blur height. `%` and `px` formats are supported: If the string ends in `%`, the `height` of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in `px`, the `height` of the blur will be in px; for example, 100px means that Height is 100 px. Default value: `10%`.
	// +kubebuilder:validation:Optional
	Height *string `json:"height,omitempty" tf:"height,omitempty"`

	// Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// Blur width. `%` and `px` formats are supported: If the string ends in `%`, the `width` of the blur will be the specified percentage of the video width; for example, 10% means that `width` is 10% of the video width; If the string ends in `px`, the `width` of the blur will be in px; for example, 100px means that Width is 100 px. Default value: `10%`.
	// +kubebuilder:validation:Optional
	Width *string `json:"width,omitempty" tf:"width,omitempty"`

	// The horizontal position of the origin of the blur relative to the origin of coordinates of the video. `%` and `px` formats are supported: If the string ends in `%`, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in `px`, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px. Default value: `0px`.
	// +kubebuilder:validation:Optional
	XPos *string `json:"xPos,omitempty" tf:"x_pos,omitempty"`

	// Vertical position of the origin of blur relative to the origin of coordinates of video. `%` and `px` formats are supported: If the string ends in `%`, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in `px`, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px. Default value: `0px`.
	// +kubebuilder:validation:Optional
	YPos *string `json:"yPos,omitempty" tf:"y_pos,omitempty"`
}

type ProcedureTemplateObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ProcedureTemplateParameters struct {

	// Template description. Length limit: 256 characters.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Parameter of video processing task.
	// +kubebuilder:validation:Optional
	MediaProcessTask []MediaProcessTaskParameters `json:"mediaProcessTask,omitempty" tf:"media_process_task,omitempty"`

	// Task flow name (up to 20 characters).
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	// +kubebuilder:validation:Optional
	SubAppID *float64 `json:"subAppId,omitempty" tf:"sub_app_id,omitempty"`
}

type SampleSnapshotTaskListObservation struct {
}

type SampleSnapshotTaskListParameters struct {

	// Sampled screen capturing template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []SampleSnapshotTaskListWatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type SampleSnapshotTaskListWatermarkListObservation struct {
}

type SampleSnapshotTaskListWatermarkListParameters struct {

	// Watermarking template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type SnapshotByTimeOffsetTaskListObservation struct {
}

type SnapshotByTimeOffsetTaskListParameters struct {

	// Time point screen capturing template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// The list of screenshot time points. `s` and `%` formats are supported: When a time point string ends with `s`, its unit is second. For example, `3.5s` means the 3.5th second of the video; When a time point string ends with `%`, it is marked with corresponding percentage of the video duration. For example, `10%` means that the time point is at the 10% of the video entire duration.
	// +kubebuilder:validation:Optional
	ExtTimeOffsetList []*string `json:"extTimeOffsetList,omitempty" tf:"ext_time_offset_list,omitempty"`

	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []SnapshotByTimeOffsetTaskListWatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type SnapshotByTimeOffsetTaskListWatermarkListObservation struct {
}

type SnapshotByTimeOffsetTaskListWatermarkListParameters struct {

	// Watermarking template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type TranscodeTaskListObservation struct {
}

type TranscodeTaskListParameters struct {

	// Video transcoding template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// List of blurs. Up to 10 ones can be supported.
	// +kubebuilder:validation:Optional
	MosaicList []MosaicListParameters `json:"mosaicList,omitempty" tf:"mosaic_list,omitempty"`

	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []TranscodeTaskListWatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type TranscodeTaskListWatermarkListObservation struct {
}

type TranscodeTaskListWatermarkListParameters struct {

	// Watermarking template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type WatermarkListObservation struct {
}

type WatermarkListParameters struct {

	// Watermarking template ID.
	// +kubebuilder:validation:Required
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

// ProcedureTemplateSpec defines the desired state of ProcedureTemplate
type ProcedureTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProcedureTemplateParameters `json:"forProvider"`
}

// ProcedureTemplateStatus defines the observed state of ProcedureTemplate.
type ProcedureTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProcedureTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProcedureTemplate is the Schema for the ProcedureTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ProcedureTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProcedureTemplateSpec   `json:"spec"`
	Status            ProcedureTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProcedureTemplateList contains a list of ProcedureTemplates
type ProcedureTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProcedureTemplate `json:"items"`
}

// Repository type metadata.
var (
	ProcedureTemplate_Kind             = "ProcedureTemplate"
	ProcedureTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProcedureTemplate_Kind}.String()
	ProcedureTemplate_KindAPIVersion   = ProcedureTemplate_Kind + "." + CRDGroupVersion.String()
	ProcedureTemplate_GroupVersionKind = CRDGroupVersion.WithKind(ProcedureTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&ProcedureTemplate{}, &ProcedureTemplateList{})
}
