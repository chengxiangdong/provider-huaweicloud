/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DrmStreamingInfoObservation struct {
}

type DrmStreamingInfoParameters struct {

	// ID of the adaptive dynamic streaming template whose protection type is `SimpleAES`.
	// +kubebuilder:validation:Optional
	SimpleAesDefinition *string `json:"simpleAesDefinition,omitempty" tf:"simple_aes_definition,omitempty"`
}

type ResolutionNamesObservation struct {
}

type ResolutionNamesParameters struct {

	// Length of video short side in px.
	// +kubebuilder:validation:Required
	MinEdgeLength *float64 `json:"minEdgeLength" tf:"min_edge_length,omitempty"`

	// Display name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type SuperPlayerConfigObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type SuperPlayerConfigParameters struct {

	// ID of the unencrypted adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `false`.
	// +kubebuilder:validation:Optional
	AdaptiveDynamicStreamingDefinition *string `json:"adaptiveDynamicStreamingDefinition,omitempty" tf:"adaptive_dynamic_streaming_definition,omitempty"`

	// Template description. Length limit: 256 characters.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Domain name used for playback. If it is left empty or set to `Default`, the domain name configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. `Default` by default.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Content of the DRM-protected adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `true`.
	// +kubebuilder:validation:Optional
	DrmStreamingInfo []DrmStreamingInfoParameters `json:"drmStreamingInfo,omitempty" tf:"drm_streaming_info,omitempty"`

	// Switch of DRM-protected adaptive bitstream playback: `true`: enabled, indicating to play back only output adaptive bitstreams protected by DRM; `false`: disabled, indicating to play back unencrypted output adaptive bitstreams. Default value: `false`.
	// +kubebuilder:validation:Optional
	DrmSwitch *bool `json:"drmSwitch,omitempty" tf:"drm_switch,omitempty"`

	// ID of the image sprite template that allows output.
	// +kubebuilder:validation:Optional
	ImageSpriteDefinition *string `json:"imageSpriteDefinition,omitempty" tf:"image_sprite_definition,omitempty"`

	// Player configuration name, which can contain up to 64 letters, digits, underscores, and hyphens (such as test_ABC-123) and must be unique under a user.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Display name of player for substreams with different resolutions. If this parameter is left empty or an empty array, the default configuration will be used: `min_edge_length: 240, name: LD`; `min_edge_length: 480, name: SD`; `min_edge_length: 720, name: HD`; `min_edge_length: 1080, name: FHD`; `min_edge_length: 1440, name: 2K`; `min_edge_length: 2160, name: 4K`; `min_edge_length: 4320, name: 8K`.
	// +kubebuilder:validation:Optional
	ResolutionNames []ResolutionNamesParameters `json:"resolutionNames,omitempty" tf:"resolution_names,omitempty"`

	// Scheme used for playback. If it is left empty or set to `Default`, the scheme configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. Other valid values: `HTTP`; `HTTPS`.
	// +kubebuilder:validation:Optional
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	// +kubebuilder:validation:Optional
	SubAppID *float64 `json:"subAppId,omitempty" tf:"sub_app_id,omitempty"`
}

// SuperPlayerConfigSpec defines the desired state of SuperPlayerConfig
type SuperPlayerConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SuperPlayerConfigParameters `json:"forProvider"`
}

// SuperPlayerConfigStatus defines the observed state of SuperPlayerConfig.
type SuperPlayerConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SuperPlayerConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SuperPlayerConfig is the Schema for the SuperPlayerConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type SuperPlayerConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SuperPlayerConfigSpec   `json:"spec"`
	Status            SuperPlayerConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SuperPlayerConfigList contains a list of SuperPlayerConfigs
type SuperPlayerConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SuperPlayerConfig `json:"items"`
}

// Repository type metadata.
var (
	SuperPlayerConfig_Kind             = "SuperPlayerConfig"
	SuperPlayerConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SuperPlayerConfig_Kind}.String()
	SuperPlayerConfig_KindAPIVersion   = SuperPlayerConfig_Kind + "." + CRDGroupVersion.String()
	SuperPlayerConfig_GroupVersionKind = CRDGroupVersion.WithKind(SuperPlayerConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&SuperPlayerConfig{}, &SuperPlayerConfigList{})
}
