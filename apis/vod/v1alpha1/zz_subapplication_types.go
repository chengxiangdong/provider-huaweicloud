/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubApplicationObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SubApplicationParameters struct {

	// Sub application description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Sub application name, which can contain up to 64 letters, digits, underscores, and hyphens (such as test_ABC-123) and must be unique under a user.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Sub appliaction status.
	// +kubebuilder:validation:Required
	Status *string `json:"status" tf:"status,omitempty"`
}

// SubApplicationSpec defines the desired state of SubApplication
type SubApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubApplicationParameters `json:"forProvider"`
}

// SubApplicationStatus defines the observed state of SubApplication.
type SubApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubApplication is the Schema for the SubApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type SubApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubApplicationSpec   `json:"spec"`
	Status            SubApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubApplicationList contains a list of SubApplications
type SubApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubApplication `json:"items"`
}

// Repository type metadata.
var (
	SubApplication_Kind             = "SubApplication"
	SubApplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubApplication_Kind}.String()
	SubApplication_KindAPIVersion   = SubApplication_Kind + "." + CRDGroupVersion.String()
	SubApplication_GroupVersionKind = CRDGroupVersion.WithKind(SubApplication_Kind)
)

func init() {
	SchemeBuilder.Register(&SubApplication{}, &SubApplicationList{})
}
