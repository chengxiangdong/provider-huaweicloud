/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PurgeHistoryObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	FlushType *string `json:"flushType,omitempty" tf:"flush_type,omitempty"`

	PurgeType *string `json:"purgeType,omitempty" tf:"purge_type,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type PurgeHistoryParameters struct {
}

type UrlPurgeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PurgeHistory []PurgeHistoryObservation `json:"purgeHistory,omitempty" tf:"purge_history,omitempty"`

	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`
}

type UrlPurgeParameters struct {

	// Specify purge area. NOTE: only purge same area cache contents.
	// +kubebuilder:validation:Optional
	Area *string `json:"area,omitempty" tf:"area,omitempty"`

	// Change to purge again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
	// +kubebuilder:validation:Optional
	Redo *float64 `json:"redo,omitempty" tf:"redo,omitempty"`

	// Whether to encode urls, if set to `true` will auto encode instead of manual process.
	// +kubebuilder:validation:Optional
	URLEncode *bool `json:"urlEncode,omitempty" tf:"url_encode,omitempty"`

	// List of url to purge. NOTE: urls need include protocol prefix `http://` or `https://`.
	// +kubebuilder:validation:Required
	Urls []*string `json:"urls" tf:"urls,omitempty"`
}

// UrlPurgeSpec defines the desired state of UrlPurge
type UrlPurgeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UrlPurgeParameters `json:"forProvider"`
}

// UrlPurgeStatus defines the observed state of UrlPurge.
type UrlPurgeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UrlPurgeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UrlPurge is the Schema for the UrlPurges API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type UrlPurge struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UrlPurgeSpec   `json:"spec"`
	Status            UrlPurgeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UrlPurgeList contains a list of UrlPurges
type UrlPurgeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UrlPurge `json:"items"`
}

// Repository type metadata.
var (
	UrlPurge_Kind             = "UrlPurge"
	UrlPurge_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UrlPurge_Kind}.String()
	UrlPurge_KindAPIVersion   = UrlPurge_Kind + "." + CRDGroupVersion.String()
	UrlPurge_GroupVersionKind = CRDGroupVersion.WithKind(UrlPurge_Kind)
)

func init() {
	SchemeBuilder.Register(&UrlPurge{}, &UrlPurgeList{})
}
