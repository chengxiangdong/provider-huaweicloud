/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseTuplesObservation struct {
}

type DatabaseTuplesParameters struct {

	// Publish the database.
	// +kubebuilder:validation:Required
	PublishDatabase *string `json:"publishDatabase" tf:"publish_database,omitempty"`
}

type PublishSubscribeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PublishSubscribeParameters struct {

	// Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
	// +kubebuilder:validation:Required
	DatabaseTuples []DatabaseTuplesParameters `json:"databaseTuples" tf:"database_tuples,omitempty"`

	// Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
	// +kubebuilder:validation:Optional
	DeleteSubscribeDB *bool `json:"deleteSubscribeDb,omitempty" tf:"delete_subscribe_db,omitempty"`

	// ID of the SQL Server instance which publish.
	// +kubebuilder:validation:Required
	PublishInstanceID *string `json:"publishInstanceId" tf:"publish_instance_id,omitempty"`

	// The name of the Publish and Subscribe. Default is `default_name`.
	// +kubebuilder:validation:Optional
	PublishSubscribeName *string `json:"publishSubscribeName,omitempty" tf:"publish_subscribe_name,omitempty"`

	// ID of the SQL Server instance which subscribe.
	// +kubebuilder:validation:Required
	SubscribeInstanceID *string `json:"subscribeInstanceId" tf:"subscribe_instance_id,omitempty"`
}

// PublishSubscribeSpec defines the desired state of PublishSubscribe
type PublishSubscribeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PublishSubscribeParameters `json:"forProvider"`
}

// PublishSubscribeStatus defines the observed state of PublishSubscribe.
type PublishSubscribeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PublishSubscribeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PublishSubscribe is the Schema for the PublishSubscribes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type PublishSubscribe struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublishSubscribeSpec   `json:"spec"`
	Status            PublishSubscribeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublishSubscribeList contains a list of PublishSubscribes
type PublishSubscribeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublishSubscribe `json:"items"`
}

// Repository type metadata.
var (
	PublishSubscribe_Kind             = "PublishSubscribe"
	PublishSubscribe_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PublishSubscribe_Kind}.String()
	PublishSubscribe_KindAPIVersion   = PublishSubscribe_Kind + "." + CRDGroupVersion.String()
	PublishSubscribe_GroupVersionKind = CRDGroupVersion.WithKind(PublishSubscribe_Kind)
)

func init() {
	SchemeBuilder.Register(&PublishSubscribe{}, &PublishSubscribeList{})
}
