/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountDBAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccountDBAttachmentParameters struct {

	// SQL Server account name.
	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// SQL Server DB name.
	// +kubebuilder:validation:Required
	DBName *string `json:"dbName" tf:"db_name,omitempty"`

	// SQL Server instance ID that the account belongs to.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Privilege of the account on DB. Valid values: `ReadOnly`, `ReadWrite`.
	// +kubebuilder:validation:Required
	Privilege *string `json:"privilege" tf:"privilege,omitempty"`
}

// AccountDBAttachmentSpec defines the desired state of AccountDBAttachment
type AccountDBAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountDBAttachmentParameters `json:"forProvider"`
}

// AccountDBAttachmentStatus defines the observed state of AccountDBAttachment.
type AccountDBAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountDBAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountDBAttachment is the Schema for the AccountDBAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type AccountDBAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountDBAttachmentSpec   `json:"spec"`
	Status            AccountDBAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountDBAttachmentList contains a list of AccountDBAttachments
type AccountDBAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountDBAttachment `json:"items"`
}

// Repository type metadata.
var (
	AccountDBAttachment_Kind             = "AccountDBAttachment"
	AccountDBAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountDBAttachment_Kind}.String()
	AccountDBAttachment_KindAPIVersion   = AccountDBAttachment_Kind + "." + CRDGroupVersion.String()
	AccountDBAttachment_GroupVersionKind = CRDGroupVersion.WithKind(AccountDBAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountDBAttachment{}, &AccountDBAttachmentList{})
}
