// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecgroupRuleInitParameters struct {

	// Specifies the effective policy. The valid values are allow and deny.
	// This parameter is not used with port_range_min and port_range_max.
	// Changing this creates a new security group rule.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the supplementary information about the networking security
	// group rule. This parameter can contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	// Changing this creates a new security group rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the direction of the rule, valid values are ingress or
	// egress. Changing this creates a new security group rule.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the layer 3 protocol type, valid values are IPv4 or IPv6.
	// Changing this creates a new security group rule.
	Ethertype *string `json:"ethertype,omitempty" tf:"ethertype,omitempty"`

	// Specifies the higher part of the allowed port range, valid integer value
	// needs to be between 1 and 65,535. Changing this creates a new security group rule.
	// This parameter and ports are alternative.
	PortRangeMax *float64 `json:"portRangeMax,omitempty" tf:"port_range_max,omitempty"`

	// Specifies the lower part of the allowed port range, valid integer value
	// needs to be between 1 and 65,535. Changing this creates a new security group rule.
	// This parameter and ports are alternative.
	PortRangeMin *float64 `json:"portRangeMin,omitempty" tf:"port_range_min,omitempty"`

	// Specifies the allowed port value range, which supports single port (80),
	// continuous port (1-30) and discontinuous port (22, 3389, 80) The valid port values is range form 1 to 65,535.
	// Changing this creates a new security group rule.
	Ports *string `json:"ports,omitempty" tf:"ports,omitempty"`

	// Specifies the priority number.
	// The valid value is range from 1 to 100. The default value is 1.
	// This parameter is not used with port_range_min and port_range_max.
	// Changing this creates a new security group rule.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Specifies the layer 4 protocol type, valid values are tcp, udp,
	// icmp and icmpv6. If omitted, the protocol means that all protocols are supported.
	// This is required if you want to specify a port range. Changing this creates a new security group rule.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region in which to create the security group rule resource. If
	// omitted, the provider-level region will be used. Changing this creates a new security group rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the remote address group ID.
	// This parameter is not used with port_range_min and port_range_max.
	// Changing this creates a new security group rule.
	RemoteAddressGroupID *string `json:"remoteAddressGroupId,omitempty" tf:"remote_address_group_id,omitempty"`

	// Specifies the remote group ID. Changing this creates a new security
	// group rule.
	RemoteGroupID *string `json:"remoteGroupId,omitempty" tf:"remote_group_id,omitempty"`

	// Specifies the remote CIDR, the value needs to be a valid CIDR (i.e.
	// 192.168.0.0/16). If not specified, the empty value means all IP addresses, which is same as the value 0.0.0.0/0.
	// Changing this creates a new security group rule.
	RemoteIPPrefix *string `json:"remoteIpPrefix,omitempty" tf:"remote_ip_prefix,omitempty"`

	// Specifies the security group ID the rule should belong to. Changing
	// this creates a new security group rule.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type SecgroupRuleObservation struct {

	// Specifies the effective policy. The valid values are allow and deny.
	// This parameter is not used with port_range_min and port_range_max.
	// Changing this creates a new security group rule.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the supplementary information about the networking security
	// group rule. This parameter can contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	// Changing this creates a new security group rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the direction of the rule, valid values are ingress or
	// egress. Changing this creates a new security group rule.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the layer 3 protocol type, valid values are IPv4 or IPv6.
	// Changing this creates a new security group rule.
	Ethertype *string `json:"ethertype,omitempty" tf:"ethertype,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the higher part of the allowed port range, valid integer value
	// needs to be between 1 and 65,535. Changing this creates a new security group rule.
	// This parameter and ports are alternative.
	PortRangeMax *float64 `json:"portRangeMax,omitempty" tf:"port_range_max,omitempty"`

	// Specifies the lower part of the allowed port range, valid integer value
	// needs to be between 1 and 65,535. Changing this creates a new security group rule.
	// This parameter and ports are alternative.
	PortRangeMin *float64 `json:"portRangeMin,omitempty" tf:"port_range_min,omitempty"`

	// Specifies the allowed port value range, which supports single port (80),
	// continuous port (1-30) and discontinuous port (22, 3389, 80) The valid port values is range form 1 to 65,535.
	// Changing this creates a new security group rule.
	Ports *string `json:"ports,omitempty" tf:"ports,omitempty"`

	// Specifies the priority number.
	// The valid value is range from 1 to 100. The default value is 1.
	// This parameter is not used with port_range_min and port_range_max.
	// Changing this creates a new security group rule.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Specifies the layer 4 protocol type, valid values are tcp, udp,
	// icmp and icmpv6. If omitted, the protocol means that all protocols are supported.
	// This is required if you want to specify a port range. Changing this creates a new security group rule.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region in which to create the security group rule resource. If
	// omitted, the provider-level region will be used. Changing this creates a new security group rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the remote address group ID.
	// This parameter is not used with port_range_min and port_range_max.
	// Changing this creates a new security group rule.
	RemoteAddressGroupID *string `json:"remoteAddressGroupId,omitempty" tf:"remote_address_group_id,omitempty"`

	// Specifies the remote group ID. Changing this creates a new security
	// group rule.
	RemoteGroupID *string `json:"remoteGroupId,omitempty" tf:"remote_group_id,omitempty"`

	// Specifies the remote CIDR, the value needs to be a valid CIDR (i.e.
	// 192.168.0.0/16). If not specified, the empty value means all IP addresses, which is same as the value 0.0.0.0/0.
	// Changing this creates a new security group rule.
	RemoteIPPrefix *string `json:"remoteIpPrefix,omitempty" tf:"remote_ip_prefix,omitempty"`

	// Specifies the security group ID the rule should belong to. Changing
	// this creates a new security group rule.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type SecgroupRuleParameters struct {

	// Specifies the effective policy. The valid values are allow and deny.
	// This parameter is not used with port_range_min and port_range_max.
	// Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the supplementary information about the networking security
	// group rule. This parameter can contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	// Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the direction of the rule, valid values are ingress or
	// egress. Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Specifies the layer 3 protocol type, valid values are IPv4 or IPv6.
	// Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	Ethertype *string `json:"ethertype,omitempty" tf:"ethertype,omitempty"`

	// Specifies the higher part of the allowed port range, valid integer value
	// needs to be between 1 and 65,535. Changing this creates a new security group rule.
	// This parameter and ports are alternative.
	// +kubebuilder:validation:Optional
	PortRangeMax *float64 `json:"portRangeMax,omitempty" tf:"port_range_max,omitempty"`

	// Specifies the lower part of the allowed port range, valid integer value
	// needs to be between 1 and 65,535. Changing this creates a new security group rule.
	// This parameter and ports are alternative.
	// +kubebuilder:validation:Optional
	PortRangeMin *float64 `json:"portRangeMin,omitempty" tf:"port_range_min,omitempty"`

	// Specifies the allowed port value range, which supports single port (80),
	// continuous port (1-30) and discontinuous port (22, 3389, 80) The valid port values is range form 1 to 65,535.
	// Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	Ports *string `json:"ports,omitempty" tf:"ports,omitempty"`

	// Specifies the priority number.
	// The valid value is range from 1 to 100. The default value is 1.
	// This parameter is not used with port_range_min and port_range_max.
	// Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Specifies the layer 4 protocol type, valid values are tcp, udp,
	// icmp and icmpv6. If omitted, the protocol means that all protocols are supported.
	// This is required if you want to specify a port range. Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region in which to create the security group rule resource. If
	// omitted, the provider-level region will be used. Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the remote address group ID.
	// This parameter is not used with port_range_min and port_range_max.
	// Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	RemoteAddressGroupID *string `json:"remoteAddressGroupId,omitempty" tf:"remote_address_group_id,omitempty"`

	// Specifies the remote group ID. Changing this creates a new security
	// group rule.
	// +kubebuilder:validation:Optional
	RemoteGroupID *string `json:"remoteGroupId,omitempty" tf:"remote_group_id,omitempty"`

	// Specifies the remote CIDR, the value needs to be a valid CIDR (i.e.
	// 192.168.0.0/16). If not specified, the empty value means all IP addresses, which is same as the value 0.0.0.0/0.
	// Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	RemoteIPPrefix *string `json:"remoteIpPrefix,omitempty" tf:"remote_ip_prefix,omitempty"`

	// Specifies the security group ID the rule should belong to. Changing
	// this creates a new security group rule.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

// SecgroupRuleSpec defines the desired state of SecgroupRule
type SecgroupRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecgroupRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecgroupRuleInitParameters `json:"initProvider,omitempty"`
}

// SecgroupRuleStatus defines the observed state of SecgroupRule.
type SecgroupRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecgroupRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecgroupRule is the Schema for the SecgroupRules API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type SecgroupRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.direction) || (has(self.initProvider) && has(self.initProvider.direction))",message="spec.forProvider.direction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ethertype) || (has(self.initProvider) && has(self.initProvider.ethertype))",message="spec.forProvider.ethertype is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityGroupId) || (has(self.initProvider) && has(self.initProvider.securityGroupId))",message="spec.forProvider.securityGroupId is a required parameter"
	Spec   SecgroupRuleSpec   `json:"spec"`
	Status SecgroupRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecgroupRuleList contains a list of SecgroupRules
type SecgroupRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecgroupRule `json:"items"`
}

// Repository type metadata.
var (
	SecgroupRule_Kind             = "SecgroupRule"
	SecgroupRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecgroupRule_Kind}.String()
	SecgroupRule_KindAPIVersion   = SecgroupRule_Kind + "." + CRDGroupVersion.String()
	SecgroupRule_GroupVersionKind = CRDGroupVersion.WithKind(SecgroupRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SecgroupRule{}, &SecgroupRuleList{})
}
