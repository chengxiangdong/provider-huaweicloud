/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPNGatewayRouteObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RouteID *string `json:"routeId,omitempty" tf:"route_id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type VPNGatewayRouteParameters struct {

	// Destination IDC IP range.
	// +kubebuilder:validation:Required
	DestinationCidrBlock *string `json:"destinationCidrBlock" tf:"destination_cidr_block,omitempty"`

	// Instance ID of the next hop.
	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// Priority. Valid values: 0 and 100.
	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`

	// Status. Valid values: ENABLE and DISABLE.
	// +kubebuilder:validation:Required
	Status *string `json:"status" tf:"status,omitempty"`

	// VPN gateway ID.
	// +crossplane:generate:reference:type=VPNGateway
	// +kubebuilder:validation:Optional
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPNGatewayIDRef *v1.Reference `json:"vpnGatewayIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPNGatewayIDSelector *v1.Selector `json:"vpnGatewayIdSelector,omitempty" tf:"-"`
}

// VPNGatewayRouteSpec defines the desired state of VPNGatewayRoute
type VPNGatewayRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNGatewayRouteParameters `json:"forProvider"`
}

// VPNGatewayRouteStatus defines the observed state of VPNGatewayRoute.
type VPNGatewayRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNGatewayRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPNGatewayRoute is the Schema for the VPNGatewayRoutes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type VPNGatewayRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPNGatewayRouteSpec   `json:"spec"`
	Status            VPNGatewayRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNGatewayRouteList contains a list of VPNGatewayRoutes
type VPNGatewayRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNGatewayRoute `json:"items"`
}

// Repository type metadata.
var (
	VPNGatewayRoute_Kind             = "VPNGatewayRoute"
	VPNGatewayRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNGatewayRoute_Kind}.String()
	VPNGatewayRoute_KindAPIVersion   = VPNGatewayRoute_Kind + "." + CRDGroupVersion.String()
	VPNGatewayRoute_GroupVersionKind = CRDGroupVersion.WithKind(VPNGatewayRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&VPNGatewayRoute{}, &VPNGatewayRouteList{})
}
