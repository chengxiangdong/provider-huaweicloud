/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCAclObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VPCAclParameters struct {

	// Egress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
	// +kubebuilder:validation:Optional
	Egress []*string `json:"egress,omitempty" tf:"egress,omitempty"`

	// Ingress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
	// +kubebuilder:validation:Optional
	Ingress []*string `json:"ingress,omitempty" tf:"ingress,omitempty"`

	// Name of the network ACL.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Tags of the vpc acl.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the VPC instance.
	// +crossplane:generate:reference:type=VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcidSelector,omitempty" tf:"-"`
}

// VPCAclSpec defines the desired state of VPCAcl
type VPCAclSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCAclParameters `json:"forProvider"`
}

// VPCAclStatus defines the observed state of VPCAcl.
type VPCAclStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCAclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCAcl is the Schema for the VPCAcls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type VPCAcl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCAclSpec   `json:"spec"`
	Status            VPCAclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCAclList contains a list of VPCAcls
type VPCAclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCAcl `json:"items"`
}

// Repository type metadata.
var (
	VPCAcl_Kind             = "VPCAcl"
	VPCAcl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCAcl_Kind}.String()
	VPCAcl_KindAPIVersion   = VPCAcl_Kind + "." + CRDGroupVersion.String()
	VPCAcl_GroupVersionKind = CRDGroupVersion.WithKind(VPCAcl_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCAcl{}, &VPCAclList{})
}
