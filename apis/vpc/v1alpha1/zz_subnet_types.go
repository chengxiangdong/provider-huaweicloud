// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubnetInitParameters struct {

	// Specifies the availability zone (AZ) to which the subnet belongs.
	// The value must be an existing AZ in the system. Changing this creates a new subnet.
	// schema: Required
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the network segment on which the subnet resides. The value must be in
	// CIDR format and within the CIDR block of the VPC. The subnet mask cannot be greater than 28. Changing this creates a
	// new subnet.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Specifies whether the DHCP function is enabled for the subnet. Defaults to true.
	DHCPEnable *bool `json:"dhcpEnable,omitempty" tf:"dhcp_enable,omitempty"`

	// Specifies the DHCP lease expiration time. The value can be -1, which indicates
	// unlimited lease time, or Number+h. the number ranges from 1 to 30,000. For example, the value can be 5h. The default
	// value is 24h.
	DHCPLeaseTime *string `json:"dhcpLeaseTime,omitempty" tf:"dhcp_lease_time,omitempty"`

	// Specifies the DNS server address list of a subnet. This field is required if you need to
	// use more than two DNS servers. This parameter value is the superset of both DNS server address 1 and DNS server
	// address 2.
	DNSList []*string `json:"dnsList,omitempty" tf:"dns_list,omitempty"`

	// Specifies supplementary information about the subnet. The value is a string of
	// no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the gateway of the subnet. The value must be a valid IP address
	// in the subnet segment. Changing this creates a new subnet.
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// Specifies whether the IPv6 function is enabled for the subnet. Defaults to false.
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// Specifies the subnet name. The value is a string of 1 to 64 characters that can contain
	// letters, digits, underscores (_), and hyphens (-).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the NTP server address. Currently only IPv4 addresses are supported.
	// A maximum of four IP addresses can be configured, and each address must be unique. Multiple IP addresses must be
	// separated using commas(,). Removing this parameter indicates that no NTP server is configured.
	NtpServerAddress *string `json:"ntpServerAddress,omitempty" tf:"ntp_server_address,omitempty"`

	// Specifies the IP address of DNS server 1 on the subnet. The value must be a valid
	// IP address.
	PrimaryDNS *string `json:"primaryDns,omitempty" tf:"primary_dns,omitempty"`

	// Specifies the region in which to create the vpc subnet. If omitted, the
	// provider-level region will be used. Changing this creates a new subnet.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the IP address of DNS server 2 on the subnet. The value must be a valid
	// IP address.
	SecondaryDNS *string `json:"secondaryDns,omitempty" tf:"secondary_dns,omitempty"`

	// The key/value pairs to associate with the subnet.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC to which the subnet belongs. Changing this creates
	// a new subnet.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/VPC/v1alpha1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id",true)
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in VPC to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in VPC to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

type SubnetObservation struct {

	// Specifies the availability zone (AZ) to which the subnet belongs.
	// The value must be an existing AZ in the system. Changing this creates a new subnet.
	// schema: Required
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the network segment on which the subnet resides. The value must be in
	// CIDR format and within the CIDR block of the VPC. The subnet mask cannot be greater than 28. Changing this creates a
	// new subnet.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Specifies whether the DHCP function is enabled for the subnet. Defaults to true.
	DHCPEnable *bool `json:"dhcpEnable,omitempty" tf:"dhcp_enable,omitempty"`

	// Specifies the DHCP lease expiration time. The value can be -1, which indicates
	// unlimited lease time, or Number+h. the number ranges from 1 to 30,000. For example, the value can be 5h. The default
	// value is 24h.
	DHCPLeaseTime *string `json:"dhcpLeaseTime,omitempty" tf:"dhcp_lease_time,omitempty"`

	// Specifies the DNS server address list of a subnet. This field is required if you need to
	// use more than two DNS servers. This parameter value is the superset of both DNS server address 1 and DNS server
	// address 2.
	DNSList []*string `json:"dnsList,omitempty" tf:"dns_list,omitempty"`

	// Specifies supplementary information about the subnet. The value is a string of
	// no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the gateway of the subnet. The value must be a valid IP address
	// in the subnet segment. Changing this creates a new subnet.
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the IPv4 subnet (Native OpenStack API).
	IPv4SubnetID *string `json:"ipv4SubnetId,omitempty" tf:"ipv4_subnet_id,omitempty"`

	// The IPv6 subnet CIDR block.
	IPv6Cidr *string `json:"ipv6Cidr,omitempty" tf:"ipv6_cidr,omitempty"`

	// Specifies whether the IPv6 function is enabled for the subnet. Defaults to false.
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// The IPv6 subnet gateway.
	IPv6Gateway *string `json:"ipv6Gateway,omitempty" tf:"ipv6_gateway,omitempty"`

	// The ID of the IPv6 subnet (Native OpenStack API).
	IPv6SubnetID *string `json:"ipv6SubnetId,omitempty" tf:"ipv6_subnet_id,omitempty"`

	// Specifies the subnet name. The value is a string of 1 to 64 characters that can contain
	// letters, digits, underscores (_), and hyphens (-).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the NTP server address. Currently only IPv4 addresses are supported.
	// A maximum of four IP addresses can be configured, and each address must be unique. Multiple IP addresses must be
	// separated using commas(,). Removing this parameter indicates that no NTP server is configured.
	NtpServerAddress *string `json:"ntpServerAddress,omitempty" tf:"ntp_server_address,omitempty"`

	// Specifies the IP address of DNS server 1 on the subnet. The value must be a valid
	// IP address.
	PrimaryDNS *string `json:"primaryDns,omitempty" tf:"primary_dns,omitempty"`

	// Specifies the region in which to create the vpc subnet. If omitted, the
	// provider-level region will be used. Changing this creates a new subnet.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the IP address of DNS server 2 on the subnet. The value must be a valid
	// IP address.
	SecondaryDNS *string `json:"secondaryDns,omitempty" tf:"secondary_dns,omitempty"`

	// The resource ID in UUID format.
	// schema: Deprecated
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The key/value pairs to associate with the subnet.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC to which the subnet belongs. Changing this creates
	// a new subnet.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type SubnetParameters struct {

	// Specifies the availability zone (AZ) to which the subnet belongs.
	// The value must be an existing AZ in the system. Changing this creates a new subnet.
	// schema: Required
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the network segment on which the subnet resides. The value must be in
	// CIDR format and within the CIDR block of the VPC. The subnet mask cannot be greater than 28. Changing this creates a
	// new subnet.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Specifies whether the DHCP function is enabled for the subnet. Defaults to true.
	// +kubebuilder:validation:Optional
	DHCPEnable *bool `json:"dhcpEnable,omitempty" tf:"dhcp_enable,omitempty"`

	// Specifies the DHCP lease expiration time. The value can be -1, which indicates
	// unlimited lease time, or Number+h. the number ranges from 1 to 30,000. For example, the value can be 5h. The default
	// value is 24h.
	// +kubebuilder:validation:Optional
	DHCPLeaseTime *string `json:"dhcpLeaseTime,omitempty" tf:"dhcp_lease_time,omitempty"`

	// Specifies the DNS server address list of a subnet. This field is required if you need to
	// use more than two DNS servers. This parameter value is the superset of both DNS server address 1 and DNS server
	// address 2.
	// +kubebuilder:validation:Optional
	DNSList []*string `json:"dnsList,omitempty" tf:"dns_list,omitempty"`

	// Specifies supplementary information about the subnet. The value is a string of
	// no more than 255 characters and cannot contain angle brackets (< or >).
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the gateway of the subnet. The value must be a valid IP address
	// in the subnet segment. Changing this creates a new subnet.
	// +kubebuilder:validation:Optional
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// Specifies whether the IPv6 function is enabled for the subnet. Defaults to false.
	// +kubebuilder:validation:Optional
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// Specifies the subnet name. The value is a string of 1 to 64 characters that can contain
	// letters, digits, underscores (_), and hyphens (-).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the NTP server address. Currently only IPv4 addresses are supported.
	// A maximum of four IP addresses can be configured, and each address must be unique. Multiple IP addresses must be
	// separated using commas(,). Removing this parameter indicates that no NTP server is configured.
	// +kubebuilder:validation:Optional
	NtpServerAddress *string `json:"ntpServerAddress,omitempty" tf:"ntp_server_address,omitempty"`

	// Specifies the IP address of DNS server 1 on the subnet. The value must be a valid
	// IP address.
	// +kubebuilder:validation:Optional
	PrimaryDNS *string `json:"primaryDns,omitempty" tf:"primary_dns,omitempty"`

	// Specifies the region in which to create the vpc subnet. If omitted, the
	// provider-level region will be used. Changing this creates a new subnet.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the IP address of DNS server 2 on the subnet. The value must be a valid
	// IP address.
	// +kubebuilder:validation:Optional
	SecondaryDNS *string `json:"secondaryDns,omitempty" tf:"secondary_dns,omitempty"`

	// The key/value pairs to associate with the subnet.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC to which the subnet belongs. Changing this creates
	// a new subnet.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/VPC/v1alpha1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id",true)
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in VPC to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in VPC to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// SubnetSpec defines the desired state of Subnet
type SubnetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubnetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubnetInitParameters `json:"initProvider,omitempty"`
}

// SubnetStatus defines the observed state of Subnet.
type SubnetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubnetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Subnet is the Schema for the Subnets API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Subnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cidr) || (has(self.initProvider) && has(self.initProvider.cidr))",message="spec.forProvider.cidr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gatewayIp) || (has(self.initProvider) && has(self.initProvider.gatewayIp))",message="spec.forProvider.gatewayIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SubnetSpec   `json:"spec"`
	Status SubnetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetList contains a list of Subnets
type SubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subnet `json:"items"`
}

// Repository type metadata.
var (
	Subnet_Kind             = "Subnet"
	Subnet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Subnet_Kind}.String()
	Subnet_KindAPIVersion   = Subnet_Kind + "." + CRDGroupVersion.String()
	Subnet_GroupVersionKind = CRDGroupVersion.WithKind(Subnet_Kind)
)

func init() {
	SchemeBuilder.Register(&Subnet{}, &SubnetList{})
}
