/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NatGatewaySnatObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SnatID *string `json:"snatId,omitempty" tf:"snat_id,omitempty"`
}

type NatGatewaySnatParameters struct {

	// Description.
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// Instance ID, required when `resource_type` is NETWORKINTERFACE.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Private IPs of the instance's primary ENI, required when `resource_type` is NETWORKINTERFACE.
	// +kubebuilder:validation:Optional
	InstancePrivateIPAddr *string `json:"instancePrivateIpAddr,omitempty" tf:"instance_private_ip_addr,omitempty"`

	// NAT gateway ID.
	// +kubebuilder:validation:Required
	NATGatewayID *string `json:"natGatewayId" tf:"nat_gateway_id,omitempty"`

	// Elastic IP address pool.
	// +kubebuilder:validation:Required
	PublicIPAddr []*string `json:"publicIpAddr" tf:"public_ip_addr,omitempty"`

	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	// +kubebuilder:validation:Required
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`

	// The IPv4 CIDR of the subnet, required when `resource_type` is SUBNET.
	// +kubebuilder:validation:Optional
	SubnetCidrBlock *string `json:"subnetCidrBlock,omitempty" tf:"subnet_cidr_block,omitempty"`

	// Subnet instance ID, required when `resource_type` is SUBNET.
	// +crossplane:generate:reference:type=Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

// NatGatewaySnatSpec defines the desired state of NatGatewaySnat
type NatGatewaySnatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NatGatewaySnatParameters `json:"forProvider"`
}

// NatGatewaySnatStatus defines the observed state of NatGatewaySnat.
type NatGatewaySnatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NatGatewaySnatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NatGatewaySnat is the Schema for the NatGatewaySnats API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type NatGatewaySnat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NatGatewaySnatSpec   `json:"spec"`
	Status            NatGatewaySnatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NatGatewaySnatList contains a list of NatGatewaySnats
type NatGatewaySnatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NatGatewaySnat `json:"items"`
}

// Repository type metadata.
var (
	NatGatewaySnat_Kind             = "NatGatewaySnat"
	NatGatewaySnat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NatGatewaySnat_Kind}.String()
	NatGatewaySnat_KindAPIVersion   = NatGatewaySnat_Kind + "." + CRDGroupVersion.String()
	NatGatewaySnat_GroupVersionKind = CRDGroupVersion.WithKind(NatGatewaySnat_Kind)
)

func init() {
	SchemeBuilder.Register(&NatGatewaySnat{}, &NatGatewaySnatList{})
}
