/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NatGatewayObservation struct {
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NatGatewayParameters struct {

	// EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
	// +kubebuilder:validation:Required
	AssignedEIPSet []*string `json:"assignedEipSet" tf:"assigned_eip_set,omitempty"`

	// The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is 100.
	// +kubebuilder:validation:Optional
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`.
	// +kubebuilder:validation:Optional
	MaxConcurrent *float64 `json:"maxConcurrent,omitempty" tf:"max_concurrent,omitempty"`

	// Name of the NAT gateway.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The available tags within this NAT gateway.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the vpc.
	// +crossplane:generate:reference:type=VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcidSelector,omitempty" tf:"-"`
}

// NatGatewaySpec defines the desired state of NatGateway
type NatGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NatGatewayParameters `json:"forProvider"`
}

// NatGatewayStatus defines the observed state of NatGateway.
type NatGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NatGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NatGateway is the Schema for the NatGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type NatGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NatGatewaySpec   `json:"spec"`
	Status            NatGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NatGatewayList contains a list of NatGateways
type NatGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NatGateway `json:"items"`
}

// Repository type metadata.
var (
	NatGateway_Kind             = "NatGateway"
	NatGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NatGateway_Kind}.String()
	NatGateway_KindAPIVersion   = NatGateway_Kind + "." + CRDGroupVersion.String()
	NatGateway_GroupVersionKind = CRDGroupVersion.WithKind(NatGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&NatGateway{}, &NatGatewayList{})
}
