/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteEntryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RouteEntryParameters struct {

	// The RouteEntry's target network segment.
	// +kubebuilder:validation:Required
	CidrBlock *string `json:"cidrBlock" tf:"cidr_block,omitempty"`

	// The route entry's next hub. CVM instance ID or VPC router interface ID.
	// +kubebuilder:validation:Required
	NextHub *string `json:"nextHub" tf:"next_hub,omitempty"`

	// The next hop type. Valid values: `public_gateway`,`vpn_gateway`,`sslvpn_gateway`,`dc_gateway`,`peering_connection`,`nat_gateway`,`havip`,`local_gateway` and `instance`. `instance` points to CVM Instance.
	// +kubebuilder:validation:Required
	NextType *string `json:"nextType" tf:"next_type,omitempty"`

	// The ID of the route table.
	// +crossplane:generate:reference:type=RouteTable
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// +kubebuilder:validation:Optional
	RouteTableIDRef *v1.Reference `json:"routeTableIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RouteTableIDSelector *v1.Selector `json:"routeTableIdSelector,omitempty" tf:"-"`

	// The VPC ID.
	// +crossplane:generate:reference:type=VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcidSelector,omitempty" tf:"-"`
}

// RouteEntrySpec defines the desired state of RouteEntry
type RouteEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteEntryParameters `json:"forProvider"`
}

// RouteEntryStatus defines the observed state of RouteEntry.
type RouteEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteEntry is the Schema for the RouteEntrys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type RouteEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteEntrySpec   `json:"spec"`
	Status            RouteEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteEntryList contains a list of RouteEntrys
type RouteEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteEntry `json:"items"`
}

// Repository type metadata.
var (
	RouteEntry_Kind             = "RouteEntry"
	RouteEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteEntry_Kind}.String()
	RouteEntry_KindAPIVersion   = RouteEntry_Kind + "." + CRDGroupVersion.String()
	RouteEntry_GroupVersionKind = CRDGroupVersion.WithKind(RouteEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteEntry{}, &RouteEntryList{})
}
