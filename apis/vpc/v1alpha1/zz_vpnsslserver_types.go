/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPNSSLServerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VPNSSLServerParameters struct {

	// need compressed. Default value: False.
	// +kubebuilder:validation:Optional
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
	// +kubebuilder:validation:Optional
	EncryptAlgorithm *string `json:"encryptAlgorithm,omitempty" tf:"encrypt_algorithm,omitempty"`

	// The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
	// +kubebuilder:validation:Optional
	IntegrityAlgorithm *string `json:"integrityAlgorithm,omitempty" tf:"integrity_algorithm,omitempty"`

	// List of local CIDR.
	// +kubebuilder:validation:Required
	LocalAddress []*string `json:"localAddress" tf:"local_address,omitempty"`

	// Remote CIDR for client.
	// +kubebuilder:validation:Required
	RemoteAddress *string `json:"remoteAddress" tf:"remote_address,omitempty"`

	// The port of ssl vpn. Default value: 1194.
	// +kubebuilder:validation:Optional
	SSLVPNPort *float64 `json:"sslVpnPort,omitempty" tf:"ssl_vpn_port,omitempty"`

	// The protocol of ssl vpn. Default value: UDP.
	// +kubebuilder:validation:Optional
	SSLVPNProtocol *string `json:"sslVpnProtocol,omitempty" tf:"ssl_vpn_protocol,omitempty"`

	// The name of ssl vpn server to be created.
	// +kubebuilder:validation:Required
	SSLVPNServerName *string `json:"sslVpnServerName" tf:"ssl_vpn_server_name,omitempty"`

	// VPN gateway ID.
	// +crossplane:generate:reference:type=VPNGateway
	// +kubebuilder:validation:Optional
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPNGatewayIDRef *v1.Reference `json:"vpnGatewayIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPNGatewayIDSelector *v1.Selector `json:"vpnGatewayIdSelector,omitempty" tf:"-"`
}

// VPNSSLServerSpec defines the desired state of VPNSSLServer
type VPNSSLServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNSSLServerParameters `json:"forProvider"`
}

// VPNSSLServerStatus defines the observed state of VPNSSLServer.
type VPNSSLServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNSSLServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPNSSLServer is the Schema for the VPNSSLServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type VPNSSLServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPNSSLServerSpec   `json:"spec"`
	Status            VPNSSLServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNSSLServerList contains a list of VPNSSLServers
type VPNSSLServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNSSLServer `json:"items"`
}

// Repository type metadata.
var (
	VPNSSLServer_Kind             = "VPNSSLServer"
	VPNSSLServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNSSLServer_Kind}.String()
	VPNSSLServer_KindAPIVersion   = VPNSSLServer_Kind + "." + CRDGroupVersion.String()
	VPNSSLServer_GroupVersionKind = CRDGroupVersion.WithKind(VPNSSLServer_Kind)
)

func init() {
	SchemeBuilder.Register(&VPNSSLServer{}, &VPNSSLServerList{})
}
