/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCBandwidthPackageObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VPCBandwidthPackageParameters struct {

	// Bandwidth package name.
	// +kubebuilder:validation:Optional
	BandwidthPackageName *string `json:"bandwidthPackageName,omitempty" tf:"bandwidth_package_name,omitempty"`

	// Bandwidth package billing type, default: TOP5_POSTPAID_BY_MONTH, optional value:- `TOP5_POSTPAID_BY_MONTH`: TOP5 billed by monthly postpaid- `PERCENT95_POSTPAID_BY_MONTH`: 95 billed monthly postpaid- `FIXED_PREPAID_BY_MONTH`: Monthly prepaid billing (Type FIXED_PREPAID_BY_MONTH product API capability is under construction).
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Bandwidth packet type, default:BGP, optional:- `BGP`: common BGP shared bandwidth package- `HIGH_QUALITY_BGP`: Quality BGP Shared Bandwidth Package.
	// +kubebuilder:validation:Optional
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// Tag description list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VPCBandwidthPackageSpec defines the desired state of VPCBandwidthPackage
type VPCBandwidthPackageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCBandwidthPackageParameters `json:"forProvider"`
}

// VPCBandwidthPackageStatus defines the observed state of VPCBandwidthPackage.
type VPCBandwidthPackageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCBandwidthPackageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCBandwidthPackage is the Schema for the VPCBandwidthPackages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type VPCBandwidthPackage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCBandwidthPackageSpec   `json:"spec"`
	Status            VPCBandwidthPackageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCBandwidthPackageList contains a list of VPCBandwidthPackages
type VPCBandwidthPackageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCBandwidthPackage `json:"items"`
}

// Repository type metadata.
var (
	VPCBandwidthPackage_Kind             = "VPCBandwidthPackage"
	VPCBandwidthPackage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCBandwidthPackage_Kind}.String()
	VPCBandwidthPackage_KindAPIVersion   = VPCBandwidthPackage_Kind + "." + CRDGroupVersion.String()
	VPCBandwidthPackage_GroupVersionKind = CRDGroupVersion.WithKind(VPCBandwidthPackage_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCBandwidthPackage{}, &VPCBandwidthPackageList{})
}
