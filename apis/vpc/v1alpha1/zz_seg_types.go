// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RulesInitParameters struct {
}

type RulesObservation struct {

	// The effective policy.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The supplementary information about the security group rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The direction of the rule. The value can be egress or ingress.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// The IP protocol version. The value can be IPv4 or IPv6.
	Ethertype *string `json:"ethertype,omitempty" tf:"ethertype,omitempty"`

	// The security group rule ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PortRangeMax *float64 `json:"portRangeMax,omitempty" tf:"port_range_max,omitempty"`

	PortRangeMin *float64 `json:"portRangeMin,omitempty" tf:"port_range_min,omitempty"`

	// The port value range.
	Ports *string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The priority number.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The protocol type.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The ID of the remote address group.
	RemoteAddressGroupID *string `json:"remoteAddressGroupId,omitempty" tf:"remote_address_group_id,omitempty"`

	// The ID of the peer security group.
	RemoteGroupID *string `json:"remoteGroupId,omitempty" tf:"remote_group_id,omitempty"`

	// The remote IP address. The value can be in the CIDR format or IP addresses.
	RemoteIPPrefix *string `json:"remoteIpPrefix,omitempty" tf:"remote_ip_prefix,omitempty"`
}

type RulesParameters struct {
}

type SEGInitParameters struct {

	// Specifies whether or not to delete the default security rules.
	// This is false by default.
	DeleteDefaultRules *bool `json:"deleteDefaultRules,omitempty" tf:"delete_default_rules,omitempty"`

	// Specifies the description for the security group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the enterprise project id of the security group.
	// Changing this creates a new security group.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies a unique name for the security group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the security group resource. If omitted, the
	// provider-level region will be used. Changing this creates a new security group resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the key/value pairs to associate with the security group.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SEGObservation struct {

	// The creation time, in UTC format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies whether or not to delete the default security rules.
	// This is false by default.
	DeleteDefaultRules *bool `json:"deleteDefaultRules,omitempty" tf:"delete_default_rules,omitempty"`

	// Specifies the description for the security group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the enterprise project id of the security group.
	// Changing this creates a new security group.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies a unique name for the security group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the security group resource. If omitted, the
	// provider-level region will be used. Changing this creates a new security group resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The array of security group rules associating with the security group.
	// The rule object is documented below.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// Specifies the key/value pairs to associate with the security group.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The last update time, in UTC format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SEGParameters struct {

	// Specifies whether or not to delete the default security rules.
	// This is false by default.
	// +kubebuilder:validation:Optional
	DeleteDefaultRules *bool `json:"deleteDefaultRules,omitempty" tf:"delete_default_rules,omitempty"`

	// Specifies the description for the security group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the enterprise project id of the security group.
	// Changing this creates a new security group.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies a unique name for the security group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the security group resource. If omitted, the
	// provider-level region will be used. Changing this creates a new security group resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the key/value pairs to associate with the security group.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// SEGSpec defines the desired state of SEG
type SEGSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SEGParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SEGInitParameters `json:"initProvider,omitempty"`
}

// SEGStatus defines the observed state of SEG.
type SEGStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SEGObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SEG is the Schema for the SEGs API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type SEG struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SEGSpec   `json:"spec"`
	Status SEGStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SEGList contains a list of SEGs
type SEGList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SEG `json:"items"`
}

// Repository type metadata.
var (
	SEG_Kind             = "SEG"
	SEG_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SEG_Kind}.String()
	SEG_KindAPIVersion   = SEG_Kind + "." + CRDGroupVersion.String()
	SEG_GroupVersionKind = CRDGroupVersion.WithKind(SEG_Kind)
)

func init() {
	SchemeBuilder.Register(&SEG{}, &SEGList{})
}
