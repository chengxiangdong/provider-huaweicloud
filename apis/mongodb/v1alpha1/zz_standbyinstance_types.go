/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StandbyInstanceObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`

	Vport *float64 `json:"vport,omitempty" tf:"vport,omitempty"`
}

type StandbyInstanceParameters struct {

	// Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
	// +kubebuilder:validation:Optional
	AutoRenewFlag *float64 `json:"autoRenewFlag,omitempty" tf:"auto_renew_flag,omitempty"`

	// The available zone of the Mongodb standby instance. NOTE: must not be same with father instance's.
	// +kubebuilder:validation:Required
	AvailableZone *string `json:"availableZone" tf:"available_zone,omitempty"`

	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Indicates the main instance ID of standby instances.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	FatherInstanceID *string `json:"fatherInstanceId,omitempty" tf:"father_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	FatherInstanceIDRef *v1.Reference `json:"fatherInstanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FatherInstanceIDSelector *v1.Selector `json:"fatherInstanceIdSelector,omitempty" tf:"-"`

	// Indicates the region of main instance.
	// +kubebuilder:validation:Required
	FatherInstanceRegion *string `json:"fatherInstanceRegion" tf:"father_instance_region,omitempty"`

	// Name of the Mongodb instance.
	// +kubebuilder:validation:Required
	InstanceName *string `json:"instanceName" tf:"instance_name,omitempty"`

	// Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	// +kubebuilder:validation:Required
	Memory *float64 `json:"memory" tf:"memory,omitempty"`

	// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to `PREPAID`.
	// +kubebuilder:validation:Optional
	PrepaidPeriod *float64 `json:"prepaidPeriod,omitempty" tf:"prepaid_period,omitempty"`

	// ID of the project which the instance belongs.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the security group. NOTE: for instance which `engine_version` is `MONGO_40_WT`, `security_groups` is not supported.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// ID of the subnet within this VPC. The value is required if `vpc_id` is set.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The tags of the Mongodb. Key name `project` is system reserved and can't be used.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the VPC.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	// +kubebuilder:validation:Required
	Volume *float64 `json:"volume" tf:"volume,omitempty"`
}

// StandbyInstanceSpec defines the desired state of StandbyInstance
type StandbyInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StandbyInstanceParameters `json:"forProvider"`
}

// StandbyInstanceStatus defines the observed state of StandbyInstance.
type StandbyInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StandbyInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StandbyInstance is the Schema for the StandbyInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type StandbyInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StandbyInstanceSpec   `json:"spec"`
	Status            StandbyInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StandbyInstanceList contains a list of StandbyInstances
type StandbyInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StandbyInstance `json:"items"`
}

// Repository type metadata.
var (
	StandbyInstance_Kind             = "StandbyInstance"
	StandbyInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StandbyInstance_Kind}.String()
	StandbyInstance_KindAPIVersion   = StandbyInstance_Kind + "." + CRDGroupVersion.String()
	StandbyInstance_GroupVersionKind = CRDGroupVersion.WithKind(StandbyInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&StandbyInstance{}, &StandbyInstanceList{})
}
