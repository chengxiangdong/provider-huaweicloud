/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HourdbInstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HourdbInstanceParameters struct {

	// db engine version, default to Percona 5.7.17.
	// +kubebuilder:validation:Optional
	DBVersionID *string `json:"dbVersionId,omitempty" tf:"db_version_id,omitempty"`

	// name of this instance.
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// project id.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// resource tags.
	// +kubebuilder:validation:Optional
	ResourceTags []ResourceTagsParameters `json:"resourceTags,omitempty" tf:"resource_tags,omitempty"`

	// security group id.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// instance shard count.
	// +kubebuilder:validation:Required
	ShardCount *float64 `json:"shardCount" tf:"shard_count,omitempty"`

	// memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	// +kubebuilder:validation:Required
	ShardMemory *float64 `json:"shardMemory" tf:"shard_memory,omitempty"`

	// node count for each shard. It can be obtained by querying api DescribeShardSpec.
	// +kubebuilder:validation:Required
	ShardNodeCount *float64 `json:"shardNodeCount" tf:"shard_node_count,omitempty"`

	// storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	// +kubebuilder:validation:Required
	ShardStorage *float64 `json:"shardStorage" tf:"shard_storage,omitempty"`

	// subnet id, it&amp;#39;s required when vpcId is set.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// vpc id.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcidSelector,omitempty" tf:"-"`

	// available zone.
	// +kubebuilder:validation:Optional
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

type ResourceTagsObservation struct {
}

type ResourceTagsParameters struct {

	// tag key.
	// +kubebuilder:validation:Required
	TagKey *string `json:"tagKey" tf:"tag_key,omitempty"`

	// tag value.
	// +kubebuilder:validation:Required
	TagValue *string `json:"tagValue" tf:"tag_value,omitempty"`
}

// HourdbInstanceSpec defines the desired state of HourdbInstance
type HourdbInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HourdbInstanceParameters `json:"forProvider"`
}

// HourdbInstanceStatus defines the observed state of HourdbInstance.
type HourdbInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HourdbInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HourdbInstance is the Schema for the HourdbInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type HourdbInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HourdbInstanceSpec   `json:"spec"`
	Status            HourdbInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HourdbInstanceList contains a list of HourdbInstances
type HourdbInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HourdbInstance `json:"items"`
}

// Repository type metadata.
var (
	HourdbInstance_Kind             = "HourdbInstance"
	HourdbInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HourdbInstance_Kind}.String()
	HourdbInstance_KindAPIVersion   = HourdbInstance_Kind + "." + CRDGroupVersion.String()
	HourdbInstance_GroupVersionKind = CRDGroupVersion.WithKind(HourdbInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&HourdbInstance{}, &HourdbInstanceList{})
}
