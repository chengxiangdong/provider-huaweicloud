/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DcdbAccountObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DcdbAccountParameters struct {

	// description for account.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// db host.
	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// instance id.
	// +crossplane:generate:reference:type=HourdbInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// max user connections.
	// +kubebuilder:validation:Optional
	MaxUserConnections *float64 `json:"maxUserConnections,omitempty" tf:"max_user_connections,omitempty"`

	// password.
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// whether the account is readonly. 0 means not a readonly account.
	// +kubebuilder:validation:Optional
	ReadOnly *float64 `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// account name.
	// +kubebuilder:validation:Required
	UserName *string `json:"userName" tf:"user_name,omitempty"`
}

// DcdbAccountSpec defines the desired state of DcdbAccount
type DcdbAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DcdbAccountParameters `json:"forProvider"`
}

// DcdbAccountStatus defines the observed state of DcdbAccount.
type DcdbAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DcdbAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DcdbAccount is the Schema for the DcdbAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type DcdbAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DcdbAccountSpec   `json:"spec"`
	Status            DcdbAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DcdbAccountList contains a list of DcdbAccounts
type DcdbAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DcdbAccount `json:"items"`
}

// Repository type metadata.
var (
	DcdbAccount_Kind             = "DcdbAccount"
	DcdbAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DcdbAccount_Kind}.String()
	DcdbAccount_KindAPIVersion   = DcdbAccount_Kind + "." + CRDGroupVersion.String()
	DcdbAccount_GroupVersionKind = CRDGroupVersion.WithKind(DcdbAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&DcdbAccount{}, &DcdbAccountList{})
}
