/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DvAuthsObservation struct {
	DvAuthKey *string `json:"dvAuthKey,omitempty" tf:"dv_auth_key,omitempty"`

	DvAuthValue *string `json:"dvAuthValue,omitempty" tf:"dv_auth_value,omitempty"`

	DvAuthVerifyType *string `json:"dvAuthVerifyType,omitempty" tf:"dv_auth_verify_type,omitempty"`
}

type DvAuthsParameters struct {
}

type FreeCertificateObservation struct {
	CertBeginTime *string `json:"certBeginTime,omitempty" tf:"cert_begin_time,omitempty"`

	CertEndTime *string `json:"certEndTime,omitempty" tf:"cert_end_time,omitempty"`

	CertificatePrivateKey *string `json:"certificatePrivateKey,omitempty" tf:"certificate_private_key,omitempty"`

	CertificatePublicKey *string `json:"certificatePublicKey,omitempty" tf:"certificate_public_key,omitempty"`

	Deployable *bool `json:"deployable,omitempty" tf:"deployable,omitempty"`

	DvAuths []DvAuthsObservation `json:"dvAuths,omitempty" tf:"dv_auths,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InsertTime *string `json:"insertTime,omitempty" tf:"insert_time,omitempty"`

	ProductZhName *string `json:"productZhName,omitempty" tf:"product_zh_name,omitempty"`

	Renewable *bool `json:"renewable,omitempty" tf:"renewable,omitempty"`

	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	StatusMsg *string `json:"statusMsg,omitempty" tf:"status_msg,omitempty"`

	StatusName *string `json:"statusName,omitempty" tf:"status_name,omitempty"`

	VulnerabilityStatus *string `json:"vulnerabilityStatus,omitempty" tf:"vulnerability_status,omitempty"`
}

type FreeCertificateParameters struct {

	// Specify alias for remark.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Email address.
	// +kubebuilder:validation:Optional
	ContactEmail *string `json:"contactEmail,omitempty" tf:"contact_email,omitempty"`

	// Phone number.
	// +kubebuilder:validation:Optional
	ContactPhone *string `json:"contactPhone,omitempty" tf:"contact_phone,omitempty"`

	// Specify CSR encrypt algorithm, only support `RSA` for now.
	// +kubebuilder:validation:Optional
	CsrEncryptAlgo *string `json:"csrEncryptAlgo,omitempty" tf:"csr_encrypt_algo,omitempty"`

	// Specify CSR key parameter, only support `"2048"` for now.
	// +kubebuilder:validation:Optional
	CsrKeyParameter *string `json:"csrKeyParameter,omitempty" tf:"csr_key_parameter,omitempty"`

	// Specify CSR key password.
	// +kubebuilder:validation:Optional
	CsrKeyPasswordSecretRef *v1.SecretKeySelector `json:"csrKeyPasswordSecretRef,omitempty" tf:"-"`

	// Specify domain name.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
	// +kubebuilder:validation:Required
	DvAuthMethod *string `json:"dvAuthMethod" tf:"dv_auth_method,omitempty"`

	// Specify old certificate ID, used for re-apply.
	// +kubebuilder:validation:Optional
	OldCertificateID *string `json:"oldCertificateId,omitempty" tf:"old_certificate_id,omitempty"`

	// Type of package. Only support `"2"` (TrustAsia TLS RSA CA).
	// +kubebuilder:validation:Optional
	PackageType *string `json:"packageType,omitempty" tf:"package_type,omitempty"`

	// ID of projects which this certification belong to.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specify validity period in month, only support `"12"` months for now.
	// +kubebuilder:validation:Optional
	ValidityPeriod *string `json:"validityPeriod,omitempty" tf:"validity_period,omitempty"`
}

// FreeCertificateSpec defines the desired state of FreeCertificate
type FreeCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FreeCertificateParameters `json:"forProvider"`
}

// FreeCertificateStatus defines the observed state of FreeCertificate.
type FreeCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FreeCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FreeCertificate is the Schema for the FreeCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type FreeCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FreeCertificateSpec   `json:"spec"`
	Status            FreeCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FreeCertificateList contains a list of FreeCertificates
type FreeCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FreeCertificate `json:"items"`
}

// Repository type metadata.
var (
	FreeCertificate_Kind             = "FreeCertificate"
	FreeCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FreeCertificate_Kind}.String()
	FreeCertificate_KindAPIVersion   = FreeCertificate_Kind + "." + CRDGroupVersion.String()
	FreeCertificate_GroupVersionKind = CRDGroupVersion.WithKind(FreeCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&FreeCertificate{}, &FreeCertificateList{})
}
