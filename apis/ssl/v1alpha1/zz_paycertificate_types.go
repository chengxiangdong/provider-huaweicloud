/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InformationObservation struct {
}

type InformationParameters struct {

	// The administrator's email address.
	// +kubebuilder:validation:Required
	AdminEmail *string `json:"adminEmail" tf:"admin_email,omitempty"`

	// The first name of the administrator.
	// +kubebuilder:validation:Required
	AdminFirstName *string `json:"adminFirstName" tf:"admin_first_name,omitempty"`

	// The last name of the administrator.
	// +kubebuilder:validation:Required
	AdminLastName *string `json:"adminLastName" tf:"admin_last_name,omitempty"`

	// Manager mobile phone number.
	// +kubebuilder:validation:Required
	AdminPhoneNum *string `json:"adminPhoneNum" tf:"admin_phone_num,omitempty"`

	// Manager position.
	// +kubebuilder:validation:Required
	AdminPosition *string `json:"adminPosition" tf:"admin_position,omitempty"`

	// Domain name for binding certificate.
	// +kubebuilder:validation:Required
	CertificateDomain *string `json:"certificateDomain" tf:"certificate_domain,omitempty"`

	// Contact email address.
	// +kubebuilder:validation:Required
	ContactEmail *string `json:"contactEmail" tf:"contact_email,omitempty"`

	// Contact first name.
	// +kubebuilder:validation:Required
	ContactFirstName *string `json:"contactFirstName" tf:"contact_first_name,omitempty"`

	// Contact last name.
	// +kubebuilder:validation:Required
	ContactLastName *string `json:"contactLastName" tf:"contact_last_name,omitempty"`

	// Contact phone number.
	// +kubebuilder:validation:Required
	ContactNumber *string `json:"contactNumber" tf:"contact_number,omitempty"`

	// Contact position.
	// +kubebuilder:validation:Required
	ContactPosition *string `json:"contactPosition" tf:"contact_position,omitempty"`

	// CSR content uploaded.
	// +kubebuilder:validation:Optional
	CsrContent *string `json:"csrContent,omitempty" tf:"csr_content,omitempty"`

	// CSR generation method. Valid values: `online`, `parse`. `online` means online generation, `parse` means manual upload.
	// +kubebuilder:validation:Optional
	CsrType *string `json:"csrType,omitempty" tf:"csr_type,omitempty"`

	// Array of uploaded domain names, multi-domain certificates can be uploaded.
	// +kubebuilder:validation:Optional
	DomainList []*string `json:"domainList,omitempty" tf:"domain_list,omitempty"`

	// Private key password.
	// +kubebuilder:validation:Optional
	KeyPassword *string `json:"keyPassword,omitempty" tf:"key_password,omitempty"`

	// Company address.
	// +kubebuilder:validation:Required
	OrganizationAddress *string `json:"organizationAddress" tf:"organization_address,omitempty"`

	// Company city.
	// +kubebuilder:validation:Required
	OrganizationCity *string `json:"organizationCity" tf:"organization_city,omitempty"`

	// Country name, such as China: CN.
	// +kubebuilder:validation:Required
	OrganizationCountry *string `json:"organizationCountry" tf:"organization_country,omitempty"`

	// Department name.
	// +kubebuilder:validation:Required
	OrganizationDivision *string `json:"organizationDivision" tf:"organization_division,omitempty"`

	// Company name.
	// +kubebuilder:validation:Required
	OrganizationName *string `json:"organizationName" tf:"organization_name,omitempty"`

	// The province where the company is located.
	// +kubebuilder:validation:Required
	OrganizationRegion *string `json:"organizationRegion" tf:"organization_region,omitempty"`

	// Company landline area code.
	// +kubebuilder:validation:Required
	PhoneAreaCode *string `json:"phoneAreaCode" tf:"phone_area_code,omitempty"`

	// Company landline number.
	// +kubebuilder:validation:Required
	PhoneNumber *string `json:"phoneNumber" tf:"phone_number,omitempty"`

	// Company postal code.
	// +kubebuilder:validation:Required
	PostalCode *string `json:"postalCode" tf:"postal_code,omitempty"`

	// Certificate verification method. Valid values: `DNS_AUTO`, `DNS`, `FILE`. `DNS_AUTO` means automatic DNS verification, this verification type is only supported for domain names resolved by Tencent Cloud and the resolution status is normal, `DNS` means manual DNS verification, `FILE` means file verification.
	// +kubebuilder:validation:Required
	VerifyType *string `json:"verifyType" tf:"verify_type,omitempty"`
}

type PayCertificateObservation struct {
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type PayCertificateParameters struct {

	// Remark name.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Number of domain names included in the certificate.
	// +kubebuilder:validation:Required
	DomainNum *float64 `json:"domainNum" tf:"domain_num,omitempty"`

	// Certificate information.
	// +kubebuilder:validation:Required
	Information []InformationParameters `json:"information" tf:"information,omitempty"`

	// Certificate commodity ID. Valid value ranges: (3~42). `3` means SecureSite Enhanced Enterprise Edition (EV Pro), `4` means SecureSite Enhanced (EV), `5` means SecureSite Enterprise Professional Edition (OV Pro), `6` means SecureSite Enterprise (OV), `7` means SecureSite Enterprise Type (OV) wildcard, `8` means Geotrust enhanced (EV), `9` means Geotrust enterprise (OV), `10` means Geotrust enterprise (OV) wildcard, `11` means TrustAsia domain type multi-domain SSL certificate, `12` means TrustAsia domain type ( DV) wildcard, `13` means TrustAsia enterprise wildcard (OV) SSL certificate (D3), `14` means TrustAsia enterprise (OV) SSL certificate (D3), `15` means TrustAsia enterprise multi-domain (OV) SSL certificate (D3), `16` means TrustAsia Enhanced (EV) SSL Certificate (D3), `17` means TrustAsia Enhanced Multiple Domain (EV) SSL Certificate (D3), `18` means GlobalSign Enterprise (OV) SSL Certificate, `19` means GlobalSign Enterprise Wildcard (OV) SSL Certificate, `20` means GlobalSign Enhanced (EV) SSL Certificate, `21` means TrustAsia Enterprise Wildcard Multiple Domain (OV) SSL Certificate (D3), `22` means GlobalSign Enterprise Multiple Domain (OV) SSL Certificate, `23` means GlobalSign Enterprise Multiple Wildcard Domain name (OV) SSL certificate, `24` means GlobalSign enhanced multi-domain (EV) SSL certificate, `25` means Wotrus domain type certificate, `26` means Wotrus domain type multi-domain certificate, `27` means Wotrus domain type wildcard certificate, `28` means Wotrus enterprise type certificate, `29` means Wotrus enterprise multi-domain certificate, `30` means Wotrus enterprise wildcard certificate, `31` means Wotrus enhanced certificate, `32` means Wotrus enhanced multi-domain certificate, `33` means DNSPod national secret domain name certificate, `34` means DNSPod national secret domain name certificate Multi-domain certificate, `35` means DNSPod national secret domain name wildcard certificate, `37` means DNSPod national secret enterprise certificate, `38` means DNSPod national secret enterprise multi-domain certificate, `39` means DNSPod national secret enterprise wildcard certificate, `40` means DNSPod national secret increase Strong certificate, `41` means DNSPod national secret enhanced multi-domain certificate, `42` means TrustAsia domain-type wildcard multi-domain certificate.
	// +kubebuilder:validation:Required
	ProductID *float64 `json:"productId" tf:"product_id,omitempty"`

	// The ID of project.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Certificate period, currently only supports 1 year certificate purchase.
	// +kubebuilder:validation:Optional
	TimeSpan *float64 `json:"timeSpan,omitempty" tf:"time_span,omitempty"`
}

// PayCertificateSpec defines the desired state of PayCertificate
type PayCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PayCertificateParameters `json:"forProvider"`
}

// PayCertificateStatus defines the observed state of PayCertificate.
type PayCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PayCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PayCertificate is the Schema for the PayCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type PayCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PayCertificateSpec   `json:"spec"`
	Status            PayCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PayCertificateList contains a list of PayCertificates
type PayCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PayCertificate `json:"items"`
}

// Repository type metadata.
var (
	PayCertificate_Kind             = "PayCertificate"
	PayCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PayCertificate_Kind}.String()
	PayCertificate_KindAPIVersion   = PayCertificate_Kind + "." + CRDGroupVersion.String()
	PayCertificate_GroupVersionKind = CRDGroupVersion.WithKind(PayCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&PayCertificate{}, &PayCertificateList{})
}
