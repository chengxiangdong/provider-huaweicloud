/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Subscribe.
func (mg *Subscribe) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Endpoint),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EndpointRef,
		Selector:     mg.Spec.ForProvider.EndpointSelector,
		To: reference.To{
			List:    &QueueList{},
			Managed: &Queue{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Endpoint")
	}
	mg.Spec.ForProvider.Endpoint = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EndpointRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TopicNameRef,
		Selector:     mg.Spec.ForProvider.TopicNameSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicName")
	}
	mg.Spec.ForProvider.TopicName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Endpoint),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.EndpointRef,
		Selector:     mg.Spec.InitProvider.EndpointSelector,
		To: reference.To{
			List:    &QueueList{},
			Managed: &Queue{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Endpoint")
	}
	mg.Spec.InitProvider.Endpoint = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EndpointRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TopicName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.TopicNameRef,
		Selector:     mg.Spec.InitProvider.TopicNameSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TopicName")
	}
	mg.Spec.InitProvider.TopicName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TopicNameRef = rsp.ResolvedReference

	return nil
}
