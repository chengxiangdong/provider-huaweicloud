/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubscribeInitParameters struct {

	// The number of BindingKey cannot exceed 5, and the length of each BindingKey cannot exceed 64 bytes. This field indicates the filtering policy for subscribing to and receiving messages. Each BindingKey includes up to 15 dots (namely up to 16 segments).
	// The number of `BindingKey` cannot exceed 5, and the length of each `BindingKey` cannot exceed 64 bytes. This field indicates the filtering policy for subscribing to and receiving messages. Each `BindingKey` includes up to 15 dots (namely up to 16 segments).
	// +listType=set
	BindingKey []*string `json:"bindingKey,omitempty" tf:"binding_key,omitempty"`

	// Endpoint for notification receipt, which is distinguished by Protocol. For http, Endpoint must begin with http:// and host can be a domain name or IP. For Queue, enter QueueName. Note that currently the push service cannot push messages to a VPC; therefore, if a VPC domain name or address is entered for Endpoint, pushed messages will not be received. Currently, messages can be pushed only to the public network and classic network.
	// `Endpoint` for notification receipt, which is distinguished by `Protocol`. For `http`, `Endpoint` must begin with `http://` and `host` can be a domain name or IP. For `Queue`, enter `QueueName`. Note that currently the push service cannot push messages to a VPC; therefore, if a VPC domain name or address is entered for `Endpoint`, pushed messages will not be received. Currently, messages can be pushed only to the public network and classic network.
	// +crossplane:generate:reference:type=Queue
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Reference to a Queue to populate endpoint.
	// +kubebuilder:validation:Optional
	EndpointRef *v1.Reference `json:"endpointRef,omitempty" tf:"-"`

	// Selector for a Queue to populate endpoint.
	// +kubebuilder:validation:Optional
	EndpointSelector *v1.Selector `json:"endpointSelector,omitempty" tf:"-"`

	// Message body tag (used for message filtering). The number of tags cannot exceed 5, and each tag can contain up to 16 characters. It is used in conjunction with the MsgTag parameter of (Batch)PublishMessage. Rules: 1. If FilterTag is not configured, no matter whether MsgTag is configured, the subscription will receive all messages published to the topic; 2. If the array of FilterTag values has a value, only when at least one of the values in the array also exists in the array of MsgTag values (i.e., FilterTag and MsgTag have an intersection) can the subscription receive messages published to the topic; 3. If the array of FilterTag values has a value, but MsgTag is not configured, then no message published to the topic will be received, which can be considered as a special case of rule 2 as FilterTag and MsgTag do not intersect in this case. The overall design idea of rules is based on the intention of the subscriber.
	// Message body tag (used for message filtering). The number of tags cannot exceed 5, and each tag can contain up to 16 characters. It is used in conjunction with the `MsgTag` parameter of `(Batch)PublishMessage`. Rules: 1. If `FilterTag` is not configured, no matter whether `MsgTag` is configured, the subscription will receive all messages published to the topic; 2. If the array of `FilterTag` values has a value, only when at least one of the values in the array also exists in the array of `MsgTag` values (i.e., `FilterTag` and `MsgTag` have an intersection) can the subscription receive messages published to the topic; 3. If the array of `FilterTag` values has a value, but `MsgTag` is not configured, then no message published to the topic will be received, which can be considered as a special case of rule 2 as `FilterTag` and `MsgTag` do not intersect in this case. The overall design idea of rules is based on the intention of the subscriber.
	// +listType=set
	FilterTags []*string `json:"filterTags,omitempty" tf:"filter_tags,omitempty"`

	// Push content format. Valid values: 1. JSON; 2. SIMPLIFIED, i.e., the raw format. If Protocol is queue, this value must be SIMPLIFIED. If Protocol is http, both options are acceptable, and the default value is JSON.
	// Push content format. Valid values: 1. JSON; 2. SIMPLIFIED, i.e., the raw format. If `Protocol` is `queue`, this value must be `SIMPLIFIED`. If `Protocol` is `http`, both options are acceptable, and the default value is `JSON`.
	NotifyContentFormat *string `json:"notifyContentFormat,omitempty" tf:"notify_content_format,omitempty"`

	// CMQ push server retry policy in case an error occurs while pushing a message to Endpoint. Valid values: 1. BACKOFF_RETRY: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of retries, and continue to push the next message; 2. EXPONENTIAL_DECAY_RETRY: exponential decay retry, which is to retry at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for one day, failed messages will be discarded at most after one day of retry. Default value: EXPONENTIAL_DECAY_RETRY.
	// CMQ push server retry policy in case an error occurs while pushing a message to `Endpoint`. Valid values: 1. `BACKOFF_RETRY`: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of retries, and continue to push the next message; 2. `EXPONENTIAL_DECAY_RETRY`: exponential decay retry, which is to retry at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for one day, failed messages will be discarded at most after one day of retry. Default value: `EXPONENTIAL_DECAY_RETRY`.
	NotifyStrategy *string `json:"notifyStrategy,omitempty" tf:"notify_strategy,omitempty"`

	// ubscription protocol. Currently, two protocols are supported: http and queue. To use the http protocol, you need to build your own web server to receive messages. With the queue protocol, messages are automatically pushed to a CMQ queue and you can pull them concurrently.
	// ubscription protocol. Currently, two protocols are supported: `http` and `queue`. To use the `http` protocol, you need to build your own web server to receive messages. With the `queue` protocol, messages are automatically pushed to a CMQ queue and you can pull them concurrently.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Subscription name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	// Subscription name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	SubscriptionName *string `json:"subscriptionName,omitempty" tf:"subscription_name,omitempty"`

	// Tag description list.
	// Tag description list.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	// +crossplane:generate:reference:type=Topic
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// Reference to a Topic to populate topicName.
	// +kubebuilder:validation:Optional
	TopicNameRef *v1.Reference `json:"topicNameRef,omitempty" tf:"-"`

	// Selector for a Topic to populate topicName.
	// +kubebuilder:validation:Optional
	TopicNameSelector *v1.Selector `json:"topicNameSelector,omitempty" tf:"-"`
}

type SubscribeObservation struct {

	// The number of BindingKey cannot exceed 5, and the length of each BindingKey cannot exceed 64 bytes. This field indicates the filtering policy for subscribing to and receiving messages. Each BindingKey includes up to 15 dots (namely up to 16 segments).
	// The number of `BindingKey` cannot exceed 5, and the length of each `BindingKey` cannot exceed 64 bytes. This field indicates the filtering policy for subscribing to and receiving messages. Each `BindingKey` includes up to 15 dots (namely up to 16 segments).
	// +listType=set
	BindingKey []*string `json:"bindingKey,omitempty" tf:"binding_key,omitempty"`

	// Endpoint for notification receipt, which is distinguished by Protocol. For http, Endpoint must begin with http:// and host can be a domain name or IP. For Queue, enter QueueName. Note that currently the push service cannot push messages to a VPC; therefore, if a VPC domain name or address is entered for Endpoint, pushed messages will not be received. Currently, messages can be pushed only to the public network and classic network.
	// `Endpoint` for notification receipt, which is distinguished by `Protocol`. For `http`, `Endpoint` must begin with `http://` and `host` can be a domain name or IP. For `Queue`, enter `QueueName`. Note that currently the push service cannot push messages to a VPC; therefore, if a VPC domain name or address is entered for `Endpoint`, pushed messages will not be received. Currently, messages can be pushed only to the public network and classic network.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Message body tag (used for message filtering). The number of tags cannot exceed 5, and each tag can contain up to 16 characters. It is used in conjunction with the MsgTag parameter of (Batch)PublishMessage. Rules: 1. If FilterTag is not configured, no matter whether MsgTag is configured, the subscription will receive all messages published to the topic; 2. If the array of FilterTag values has a value, only when at least one of the values in the array also exists in the array of MsgTag values (i.e., FilterTag and MsgTag have an intersection) can the subscription receive messages published to the topic; 3. If the array of FilterTag values has a value, but MsgTag is not configured, then no message published to the topic will be received, which can be considered as a special case of rule 2 as FilterTag and MsgTag do not intersect in this case. The overall design idea of rules is based on the intention of the subscriber.
	// Message body tag (used for message filtering). The number of tags cannot exceed 5, and each tag can contain up to 16 characters. It is used in conjunction with the `MsgTag` parameter of `(Batch)PublishMessage`. Rules: 1. If `FilterTag` is not configured, no matter whether `MsgTag` is configured, the subscription will receive all messages published to the topic; 2. If the array of `FilterTag` values has a value, only when at least one of the values in the array also exists in the array of `MsgTag` values (i.e., `FilterTag` and `MsgTag` have an intersection) can the subscription receive messages published to the topic; 3. If the array of `FilterTag` values has a value, but `MsgTag` is not configured, then no message published to the topic will be received, which can be considered as a special case of rule 2 as `FilterTag` and `MsgTag` do not intersect in this case. The overall design idea of rules is based on the intention of the subscriber.
	// +listType=set
	FilterTags []*string `json:"filterTags,omitempty" tf:"filter_tags,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Push content format. Valid values: 1. JSON; 2. SIMPLIFIED, i.e., the raw format. If Protocol is queue, this value must be SIMPLIFIED. If Protocol is http, both options are acceptable, and the default value is JSON.
	// Push content format. Valid values: 1. JSON; 2. SIMPLIFIED, i.e., the raw format. If `Protocol` is `queue`, this value must be `SIMPLIFIED`. If `Protocol` is `http`, both options are acceptable, and the default value is `JSON`.
	NotifyContentFormat *string `json:"notifyContentFormat,omitempty" tf:"notify_content_format,omitempty"`

	// CMQ push server retry policy in case an error occurs while pushing a message to Endpoint. Valid values: 1. BACKOFF_RETRY: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of retries, and continue to push the next message; 2. EXPONENTIAL_DECAY_RETRY: exponential decay retry, which is to retry at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for one day, failed messages will be discarded at most after one day of retry. Default value: EXPONENTIAL_DECAY_RETRY.
	// CMQ push server retry policy in case an error occurs while pushing a message to `Endpoint`. Valid values: 1. `BACKOFF_RETRY`: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of retries, and continue to push the next message; 2. `EXPONENTIAL_DECAY_RETRY`: exponential decay retry, which is to retry at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for one day, failed messages will be discarded at most after one day of retry. Default value: `EXPONENTIAL_DECAY_RETRY`.
	NotifyStrategy *string `json:"notifyStrategy,omitempty" tf:"notify_strategy,omitempty"`

	// ubscription protocol. Currently, two protocols are supported: http and queue. To use the http protocol, you need to build your own web server to receive messages. With the queue protocol, messages are automatically pushed to a CMQ queue and you can pull them concurrently.
	// ubscription protocol. Currently, two protocols are supported: `http` and `queue`. To use the `http` protocol, you need to build your own web server to receive messages. With the `queue` protocol, messages are automatically pushed to a CMQ queue and you can pull them concurrently.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Subscription name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	// Subscription name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	SubscriptionName *string `json:"subscriptionName,omitempty" tf:"subscription_name,omitempty"`

	// Tag description list.
	// Tag description list.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type SubscribeParameters struct {

	// The number of BindingKey cannot exceed 5, and the length of each BindingKey cannot exceed 64 bytes. This field indicates the filtering policy for subscribing to and receiving messages. Each BindingKey includes up to 15 dots (namely up to 16 segments).
	// The number of `BindingKey` cannot exceed 5, and the length of each `BindingKey` cannot exceed 64 bytes. This field indicates the filtering policy for subscribing to and receiving messages. Each `BindingKey` includes up to 15 dots (namely up to 16 segments).
	// +kubebuilder:validation:Optional
	// +listType=set
	BindingKey []*string `json:"bindingKey,omitempty" tf:"binding_key,omitempty"`

	// Endpoint for notification receipt, which is distinguished by Protocol. For http, Endpoint must begin with http:// and host can be a domain name or IP. For Queue, enter QueueName. Note that currently the push service cannot push messages to a VPC; therefore, if a VPC domain name or address is entered for Endpoint, pushed messages will not be received. Currently, messages can be pushed only to the public network and classic network.
	// `Endpoint` for notification receipt, which is distinguished by `Protocol`. For `http`, `Endpoint` must begin with `http://` and `host` can be a domain name or IP. For `Queue`, enter `QueueName`. Note that currently the push service cannot push messages to a VPC; therefore, if a VPC domain name or address is entered for `Endpoint`, pushed messages will not be received. Currently, messages can be pushed only to the public network and classic network.
	// +crossplane:generate:reference:type=Queue
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Reference to a Queue to populate endpoint.
	// +kubebuilder:validation:Optional
	EndpointRef *v1.Reference `json:"endpointRef,omitempty" tf:"-"`

	// Selector for a Queue to populate endpoint.
	// +kubebuilder:validation:Optional
	EndpointSelector *v1.Selector `json:"endpointSelector,omitempty" tf:"-"`

	// Message body tag (used for message filtering). The number of tags cannot exceed 5, and each tag can contain up to 16 characters. It is used in conjunction with the MsgTag parameter of (Batch)PublishMessage. Rules: 1. If FilterTag is not configured, no matter whether MsgTag is configured, the subscription will receive all messages published to the topic; 2. If the array of FilterTag values has a value, only when at least one of the values in the array also exists in the array of MsgTag values (i.e., FilterTag and MsgTag have an intersection) can the subscription receive messages published to the topic; 3. If the array of FilterTag values has a value, but MsgTag is not configured, then no message published to the topic will be received, which can be considered as a special case of rule 2 as FilterTag and MsgTag do not intersect in this case. The overall design idea of rules is based on the intention of the subscriber.
	// Message body tag (used for message filtering). The number of tags cannot exceed 5, and each tag can contain up to 16 characters. It is used in conjunction with the `MsgTag` parameter of `(Batch)PublishMessage`. Rules: 1. If `FilterTag` is not configured, no matter whether `MsgTag` is configured, the subscription will receive all messages published to the topic; 2. If the array of `FilterTag` values has a value, only when at least one of the values in the array also exists in the array of `MsgTag` values (i.e., `FilterTag` and `MsgTag` have an intersection) can the subscription receive messages published to the topic; 3. If the array of `FilterTag` values has a value, but `MsgTag` is not configured, then no message published to the topic will be received, which can be considered as a special case of rule 2 as `FilterTag` and `MsgTag` do not intersect in this case. The overall design idea of rules is based on the intention of the subscriber.
	// +kubebuilder:validation:Optional
	// +listType=set
	FilterTags []*string `json:"filterTags,omitempty" tf:"filter_tags,omitempty"`

	// Push content format. Valid values: 1. JSON; 2. SIMPLIFIED, i.e., the raw format. If Protocol is queue, this value must be SIMPLIFIED. If Protocol is http, both options are acceptable, and the default value is JSON.
	// Push content format. Valid values: 1. JSON; 2. SIMPLIFIED, i.e., the raw format. If `Protocol` is `queue`, this value must be `SIMPLIFIED`. If `Protocol` is `http`, both options are acceptable, and the default value is `JSON`.
	// +kubebuilder:validation:Optional
	NotifyContentFormat *string `json:"notifyContentFormat,omitempty" tf:"notify_content_format,omitempty"`

	// CMQ push server retry policy in case an error occurs while pushing a message to Endpoint. Valid values: 1. BACKOFF_RETRY: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of retries, and continue to push the next message; 2. EXPONENTIAL_DECAY_RETRY: exponential decay retry, which is to retry at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for one day, failed messages will be discarded at most after one day of retry. Default value: EXPONENTIAL_DECAY_RETRY.
	// CMQ push server retry policy in case an error occurs while pushing a message to `Endpoint`. Valid values: 1. `BACKOFF_RETRY`: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of retries, and continue to push the next message; 2. `EXPONENTIAL_DECAY_RETRY`: exponential decay retry, which is to retry at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for one day, failed messages will be discarded at most after one day of retry. Default value: `EXPONENTIAL_DECAY_RETRY`.
	// +kubebuilder:validation:Optional
	NotifyStrategy *string `json:"notifyStrategy,omitempty" tf:"notify_strategy,omitempty"`

	// ubscription protocol. Currently, two protocols are supported: http and queue. To use the http protocol, you need to build your own web server to receive messages. With the queue protocol, messages are automatically pushed to a CMQ queue and you can pull them concurrently.
	// ubscription protocol. Currently, two protocols are supported: `http` and `queue`. To use the `http` protocol, you need to build your own web server to receive messages. With the `queue` protocol, messages are automatically pushed to a CMQ queue and you can pull them concurrently.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Subscription name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	// Subscription name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	// +kubebuilder:validation:Optional
	SubscriptionName *string `json:"subscriptionName,omitempty" tf:"subscription_name,omitempty"`

	// Tag description list.
	// Tag description list.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	// +crossplane:generate:reference:type=Topic
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// Reference to a Topic to populate topicName.
	// +kubebuilder:validation:Optional
	TopicNameRef *v1.Reference `json:"topicNameRef,omitempty" tf:"-"`

	// Selector for a Topic to populate topicName.
	// +kubebuilder:validation:Optional
	TopicNameSelector *v1.Selector `json:"topicNameSelector,omitempty" tf:"-"`
}

// SubscribeSpec defines the desired state of Subscribe
type SubscribeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscribeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubscribeInitParameters `json:"initProvider,omitempty"`
}

// SubscribeStatus defines the observed state of Subscribe.
type SubscribeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscribeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Subscribe is the Schema for the Subscribes API. Provides a resource to create a tcmq subscribe
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Subscribe struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionName) || (has(self.initProvider) && has(self.initProvider.subscriptionName))",message="spec.forProvider.subscriptionName is a required parameter"
	Spec   SubscribeSpec   `json:"spec"`
	Status SubscribeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscribeList contains a list of Subscribes
type SubscribeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subscribe `json:"items"`
}

// Repository type metadata.
var (
	Subscribe_Kind             = "Subscribe"
	Subscribe_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Subscribe_Kind}.String()
	Subscribe_KindAPIVersion   = Subscribe_Kind + "." + CRDGroupVersion.String()
	Subscribe_GroupVersionKind = CRDGroupVersion.WithKind(Subscribe_Kind)
)

func init() {
	SchemeBuilder.Register(&Subscribe{}, &SubscribeList{})
}
