/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReservedInstanceObservation struct {
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ReservedInstanceParameters struct {

	// Configuration ID of the reserved instance.
	// +kubebuilder:validation:Required
	ConfigID *string `json:"configId" tf:"config_id,omitempty"`

	// Number of reserved instances to be purchased.
	// +kubebuilder:validation:Required
	InstanceCount *float64 `json:"instanceCount" tf:"instance_count,omitempty"`

	// Reserved Instance display name.
	// - If you do not specify an instance display name, 'Unnamed' is displayed by default.
	// - Up to 60 characters (including pattern strings) are supported.
	// +kubebuilder:validation:Optional
	ReservedInstanceName *string `json:"reservedInstanceName,omitempty" tf:"reserved_instance_name,omitempty"`
}

// ReservedInstanceSpec defines the desired state of ReservedInstance
type ReservedInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReservedInstanceParameters `json:"forProvider"`
}

// ReservedInstanceStatus defines the observed state of ReservedInstance.
type ReservedInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReservedInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReservedInstance is the Schema for the ReservedInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ReservedInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReservedInstanceSpec   `json:"spec"`
	Status            ReservedInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReservedInstanceList contains a list of ReservedInstances
type ReservedInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReservedInstance `json:"items"`
}

// Repository type metadata.
var (
	ReservedInstance_Kind             = "ReservedInstance"
	ReservedInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReservedInstance_Kind}.String()
	ReservedInstance_KindAPIVersion   = ReservedInstance_Kind + "." + CRDGroupVersion.String()
	ReservedInstance_GroupVersionKind = CRDGroupVersion.WithKind(ReservedInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&ReservedInstance{}, &ReservedInstanceList{})
}
