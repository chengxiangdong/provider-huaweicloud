/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ForwardBalancerIdsObservation struct {
}

type ForwardBalancerIdsParameters struct {

	// Listener ID for application load balancers.
	// +kubebuilder:validation:Required
	ListenerID *string `json:"listenerId" tf:"listener_id,omitempty"`

	// ID of available load balancers.
	// +kubebuilder:validation:Required
	LoadBalancerID *string `json:"loadBalancerId" tf:"load_balancer_id,omitempty"`

	// ID of forwarding rules.
	// +kubebuilder:validation:Optional
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// Attribute list of target rules.
	// +kubebuilder:validation:Required
	TargetAttribute []TargetAttributeParameters `json:"targetAttribute" tf:"target_attribute,omitempty"`
}

type ScalingGroupObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ScalingGroupParameters struct {

	// An available ID for a launch configuration.
	// +crossplane:generate:reference:type=ScalingConfig
	// +kubebuilder:validation:Optional
	ConfigurationID *string `json:"configurationId,omitempty" tf:"configuration_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigurationIDRef *v1.Reference `json:"configurationIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ConfigurationIDSelector *v1.Selector `json:"configurationIdSelector,omitempty" tf:"-"`

	// Default cooldown time in second, and default value is `300`.
	// +kubebuilder:validation:Optional
	DefaultCooldown *float64 `json:"defaultCooldown,omitempty" tf:"default_cooldown,omitempty"`

	// Desired volume of CVM instances, which is between `max_size` and `min_size`.
	// +kubebuilder:validation:Optional
	DesiredCapacity *float64 `json:"desiredCapacity,omitempty" tf:"desired_capacity,omitempty"`

	// List of application load balancers, which can't be specified with `load_balancer_ids` together.
	// +kubebuilder:validation:Optional
	ForwardBalancerIds []ForwardBalancerIdsParameters `json:"forwardBalancerIds,omitempty" tf:"forward_balancer_ids,omitempty"`

	// ID list of traditional load balancers.
	// +kubebuilder:validation:Optional
	LoadBalancerIds []*string `json:"loadBalancerIds,omitempty" tf:"load_balancer_ids,omitempty"`

	// Maximum number of CVM instances. Valid value ranges: (0~2000).
	// +kubebuilder:validation:Required
	MaxSize *float64 `json:"maxSize" tf:"max_size,omitempty"`

	// Minimum number of CVM instances. Valid value ranges: (0~2000).
	// +kubebuilder:validation:Required
	MinSize *float64 `json:"minSize" tf:"min_size,omitempty"`

	// Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
	// +kubebuilder:validation:Optional
	MultiZoneSubnetPolicy *string `json:"multiZoneSubnetPolicy,omitempty" tf:"multi_zone_subnet_policy,omitempty"`

	// Specifies to which project the scaling group belongs.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Enable unhealthy instance replacement. If set to `true`, AS will replace instances that are found unhealthy in the CLB health check.
	// +kubebuilder:validation:Optional
	ReplaceLoadBalancerUnhealthy *bool `json:"replaceLoadBalancerUnhealthy,omitempty" tf:"replace_load_balancer_unhealthy,omitempty"`

	// Enables unhealthy instance replacement. If set to `true`, AS will replace instances that are flagged as unhealthy by Cloud Monitor.
	// +kubebuilder:validation:Optional
	ReplaceMonitorUnhealthy *bool `json:"replaceMonitorUnhealthy,omitempty" tf:"replace_monitor_unhealthy,omitempty"`

	// Available values for retry policies. Valid values: IMMEDIATE_RETRY and INCREMENTAL_INTERVALS.
	// +kubebuilder:validation:Optional
	RetryPolicy *string `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Name of a scaling group.
	// +kubebuilder:validation:Required
	ScalingGroupName *string `json:"scalingGroupName" tf:"scaling_group_name,omitempty"`

	// Indicates scaling mode which creates and terminates instances (classic method), or method first tries to start stopped instances (wake up stopped) to perform scaling operations. Available values: `CLASSIC_SCALING`, `WAKE_UP_STOPPED_SCALING`. Default: `CLASSIC_SCALING`.
	// +kubebuilder:validation:Optional
	ScalingMode *string `json:"scalingMode,omitempty" tf:"scaling_mode,omitempty"`

	// ID list of subnet, and for VPC it is required.
	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// Tags of a scaling group.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Available values for termination policies. Valid values: OLDEST_INSTANCE and NEWEST_INSTANCE.
	// +kubebuilder:validation:Optional
	TerminationPolicies []*string `json:"terminationPolicies,omitempty" tf:"termination_policies,omitempty"`

	// ID of VPC network.
	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// List of available zones, for Basic network it is required.
	// +kubebuilder:validation:Optional
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

type TargetAttributeObservation struct {
}

type TargetAttributeParameters struct {

	// Port number.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Weight.
	// +kubebuilder:validation:Required
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

// ScalingGroupSpec defines the desired state of ScalingGroup
type ScalingGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScalingGroupParameters `json:"forProvider"`
}

// ScalingGroupStatus defines the observed state of ScalingGroup.
type ScalingGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScalingGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ScalingGroup is the Schema for the ScalingGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type ScalingGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScalingGroupSpec   `json:"spec"`
	Status            ScalingGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScalingGroupList contains a list of ScalingGroups
type ScalingGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScalingGroup `json:"items"`
}

// Repository type metadata.
var (
	ScalingGroup_Kind             = "ScalingGroup"
	ScalingGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScalingGroup_Kind}.String()
	ScalingGroup_KindAPIVersion   = ScalingGroup_Kind + "." + CRDGroupVersion.String()
	ScalingGroup_GroupVersionKind = CRDGroupVersion.WithKind(ScalingGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ScalingGroup{}, &ScalingGroupList{})
}
