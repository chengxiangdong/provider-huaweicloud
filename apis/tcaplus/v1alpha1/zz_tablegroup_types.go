/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TableGroupObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TableCount *float64 `json:"tableCount,omitempty" tf:"table_count,omitempty"`

	TotalSize *float64 `json:"totalSize,omitempty" tf:"total_size,omitempty"`
}

type TableGroupParameters struct {

	// ID of the TcaplusDB cluster to which the table group belongs.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Name of the TcaplusDB table group. Name length should be between 1 and 30.
	// +kubebuilder:validation:Required
	TablegroupName *string `json:"tablegroupName" tf:"tablegroup_name,omitempty"`
}

// TableGroupSpec defines the desired state of TableGroup
type TableGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TableGroupParameters `json:"forProvider"`
}

// TableGroupStatus defines the observed state of TableGroup.
type TableGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TableGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TableGroup is the Schema for the TableGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TableGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TableGroupSpec   `json:"spec"`
	Status            TableGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TableGroupList contains a list of TableGroups
type TableGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TableGroup `json:"items"`
}

// Repository type metadata.
var (
	TableGroup_Kind             = "TableGroup"
	TableGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TableGroup_Kind}.String()
	TableGroup_KindAPIVersion   = TableGroup_Kind + "." + CRDGroupVersion.String()
	TableGroup_GroupVersionKind = CRDGroupVersion.WithKind(TableGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&TableGroup{}, &TableGroupList{})
}
