/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IdlObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TableInfos []TableInfosObservation `json:"tableInfos,omitempty" tf:"table_infos,omitempty"`
}

type IdlParameters struct {

	// ID of the TcaplusDB cluster to which the table group belongs.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// IDL file content of the TcaplusDB table.
	// +kubebuilder:validation:Required
	FileContent *string `json:"fileContent" tf:"file_content,omitempty"`

	// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`, `file_ext_type` must be 'xml'.
	// +kubebuilder:validation:Required
	FileExtType *string `json:"fileExtType" tf:"file_ext_type,omitempty"`

	// Name of the IDL file.
	// +kubebuilder:validation:Required
	FileName *string `json:"fileName" tf:"file_name,omitempty"`

	// Type of the IDL file. Valid values are PROTO and TDR.
	// +kubebuilder:validation:Required
	FileType *string `json:"fileType" tf:"file_type,omitempty"`

	// ID of the table group to which the IDL file belongs.
	// +crossplane:generate:reference:type=TableGroup
	// +kubebuilder:validation:Optional
	TablegroupID *string `json:"tablegroupId,omitempty" tf:"tablegroup_id,omitempty"`

	// +kubebuilder:validation:Optional
	TablegroupIDRef *v1.Reference `json:"tablegroupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TablegroupIDSelector *v1.Selector `json:"tablegroupIdSelector,omitempty" tf:"-"`
}

type TableInfosObservation struct {
	Error *string `json:"error,omitempty" tf:"error,omitempty"`

	IndexKeySet *string `json:"indexKeySet,omitempty" tf:"index_key_set,omitempty"`

	KeyFields *string `json:"keyFields,omitempty" tf:"key_fields,omitempty"`

	SumKeyFieldSize *float64 `json:"sumKeyFieldSize,omitempty" tf:"sum_key_field_size,omitempty"`

	SumValueFieldSize *float64 `json:"sumValueFieldSize,omitempty" tf:"sum_value_field_size,omitempty"`

	TableName *string `json:"tableName,omitempty" tf:"table_name,omitempty"`

	ValueFields *string `json:"valueFields,omitempty" tf:"value_fields,omitempty"`
}

type TableInfosParameters struct {
}

// IdlSpec defines the desired state of Idl
type IdlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IdlParameters `json:"forProvider"`
}

// IdlStatus defines the observed state of Idl.
type IdlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IdlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Idl is the Schema for the Idls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Idl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IdlSpec   `json:"spec"`
	Status            IdlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IdlList contains a list of Idls
type IdlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Idl `json:"items"`
}

// Repository type metadata.
var (
	Idl_Kind             = "Idl"
	Idl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Idl_Kind}.String()
	Idl_KindAPIVersion   = Idl_Kind + "." + CRDGroupVersion.String()
	Idl_GroupVersionKind = CRDGroupVersion.WithKind(Idl_Kind)
)

func init() {
	SchemeBuilder.Register(&Idl{}, &IdlList{})
}
