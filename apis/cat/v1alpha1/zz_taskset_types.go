/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BatchTasksObservation struct {
}

type BatchTasksParameters struct {

	// Task name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Target address.
	// +kubebuilder:validation:Required
	TargetAddress *string `json:"targetAddress" tf:"target_address,omitempty"`
}

type TaskSetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`
}

type TaskSetParameters struct {

	// Batch task name address.
	// +kubebuilder:validation:Required
	BatchTasks []BatchTasksParameters `json:"batchTasks" tf:"batch_tasks,omitempty"`

	// Timer task cron expression.
	// +kubebuilder:validation:Optional
	Cron *string `json:"cron,omitempty" tf:"cron,omitempty"`

	// Task interval minutes in (1,5,10,15,30,60,120,240).
	// +kubebuilder:validation:Required
	Interval *float64 `json:"interval" tf:"interval,omitempty"`

	// Task Nodes.
	// +kubebuilder:validation:Required
	Nodes []*string `json:"nodes" tf:"nodes,omitempty"`

	// The input is valid when the parameter is modified, `suspend`/`resume`, used to suspend/resume the dial test task.
	// +kubebuilder:validation:Optional
	Operate *string `json:"operate,omitempty" tf:"operate,omitempty"`

	// tasks parameters.
	// +kubebuilder:validation:Required
	Parameters *string `json:"parameters" tf:"parameters,omitempty"`

	// Tag description list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Task category,1:PC,2:Mobile.
	// +kubebuilder:validation:Required
	TaskCategory *float64 `json:"taskCategory" tf:"task_category,omitempty"`

	// Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
	// +kubebuilder:validation:Required
	TaskType *float64 `json:"taskType" tf:"task_type,omitempty"`
}

// TaskSetSpec defines the desired state of TaskSet
type TaskSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TaskSetParameters `json:"forProvider"`
}

// TaskSetStatus defines the observed state of TaskSet.
type TaskSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TaskSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TaskSet is the Schema for the TaskSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TaskSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TaskSetSpec   `json:"spec"`
	Status            TaskSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TaskSetList contains a list of TaskSets
type TaskSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TaskSet `json:"items"`
}

// Repository type metadata.
var (
	TaskSet_Kind             = "TaskSet"
	TaskSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TaskSet_Kind}.String()
	TaskSet_KindAPIVersion   = TaskSet_Kind + "." + CRDGroupVersion.String()
	TaskSet_GroupVersionKind = CRDGroupVersion.WithKind(TaskSet_Kind)
)

func init() {
	SchemeBuilder.Register(&TaskSet{}, &TaskSetList{})
}
