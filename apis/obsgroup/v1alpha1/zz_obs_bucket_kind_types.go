// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AbortIncompleteMultipartUploadInitParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type AbortIncompleteMultipartUploadObservation struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type AbortIncompleteMultipartUploadParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days" tf:"days,omitempty"`
}

type CorsRuleInitParameters struct {

	// Specifies the allowed header of cross-origin requests. Only CORS requests
	// matching the allowed header are valid.
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// Specifies the acceptable operation type of buckets and objects. The methods
	// include GET, PUT, POST, DELETE or HEAD.
	AllowedMethods []*string `json:"allowedMethods,omitempty" tf:"allowed_methods,omitempty"`

	// Requests from this origin can access the bucket. Multiple matching rules are
	// allowed. One rule occupies one line, and allows one wildcard character (*) at most.
	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	// Specifies the exposed header in CORS responses, providing additional information
	// for clients.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies the duration that your browser can cache CORS responses, expressed in
	// seconds. The default value is 100.
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type CorsRuleObservation struct {

	// Specifies the allowed header of cross-origin requests. Only CORS requests
	// matching the allowed header are valid.
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// Specifies the acceptable operation type of buckets and objects. The methods
	// include GET, PUT, POST, DELETE or HEAD.
	AllowedMethods []*string `json:"allowedMethods,omitempty" tf:"allowed_methods,omitempty"`

	// Requests from this origin can access the bucket. Multiple matching rules are
	// allowed. One rule occupies one line, and allows one wildcard character (*) at most.
	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	// Specifies the exposed header in CORS responses, providing additional information
	// for clients.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies the duration that your browser can cache CORS responses, expressed in
	// seconds. The default value is 100.
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type CorsRuleParameters struct {

	// Specifies the allowed header of cross-origin requests. Only CORS requests
	// matching the allowed header are valid.
	// +kubebuilder:validation:Optional
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// Specifies the acceptable operation type of buckets and objects. The methods
	// include GET, PUT, POST, DELETE or HEAD.
	// +kubebuilder:validation:Optional
	AllowedMethods []*string `json:"allowedMethods" tf:"allowed_methods,omitempty"`

	// Requests from this origin can access the bucket. Multiple matching rules are
	// allowed. One rule occupies one line, and allows one wildcard character (*) at most.
	// +kubebuilder:validation:Optional
	AllowedOrigins []*string `json:"allowedOrigins" tf:"allowed_origins,omitempty"`

	// Specifies the exposed header in CORS responses, providing additional information
	// for clients.
	// +kubebuilder:validation:Optional
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies the duration that your browser can cache CORS responses, expressed in
	// seconds. The default value is 100.
	// +kubebuilder:validation:Optional
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type ExpirationInitParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type ExpirationObservation struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type ExpirationParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days" tf:"days,omitempty"`
}

type LifecycleRuleInitParameters struct {

	// Specifies a period when the not merged parts (fragments) in an
	// incomplete upload are automatically deleted. (documented below).
	AbortIncompleteMultipartUpload []AbortIncompleteMultipartUploadInitParameters `json:"abortIncompleteMultipartUpload,omitempty" tf:"abort_incomplete_multipart_upload,omitempty"`

	// Specifies lifecycle rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies a period when objects that have been last updated are automatically
	// deleted. (documented below).
	Expiration []ExpirationInitParameters `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// Unique identifier for lifecycle rules. The Rule Name contains a maximum of 255 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies a period when noncurrent object versions are
	// automatically deleted. (documented below).
	NoncurrentVersionExpiration []NoncurrentVersionExpirationInitParameters `json:"noncurrentVersionExpiration,omitempty" tf:"noncurrent_version_expiration,omitempty"`

	// Specifies a period when noncurrent object versions are
	// automatically transitioned to WARM or COLD storage class (documented below).
	NoncurrentVersionTransition []NoncurrentVersionTransitionInitParameters `json:"noncurrentVersionTransition,omitempty" tf:"noncurrent_version_transition,omitempty"`

	// Object key prefix identifying one or more objects to which the rule applies. If omitted,
	// all objects in the bucket will be managed by the lifecycle rule. The prefix cannot start or end with a slash (/),
	// cannot have consecutive slashes (/), and cannot contain the following special characters: :*?"<>|.
	// When configuring multiple lifecycle_rule, field prefix in multiple lifecycle_rule cannot have an inclusive
	// relationship.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Specifies a period when objects that have been last updated are automatically
	// transitioned to WARM or COLD storage class (documented below).
	Transition []TransitionInitParameters `json:"transition,omitempty" tf:"transition,omitempty"`
}

type LifecycleRuleObservation struct {

	// Specifies a period when the not merged parts (fragments) in an
	// incomplete upload are automatically deleted. (documented below).
	AbortIncompleteMultipartUpload []AbortIncompleteMultipartUploadObservation `json:"abortIncompleteMultipartUpload,omitempty" tf:"abort_incomplete_multipart_upload,omitempty"`

	// Specifies lifecycle rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies a period when objects that have been last updated are automatically
	// deleted. (documented below).
	Expiration []ExpirationObservation `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// Unique identifier for lifecycle rules. The Rule Name contains a maximum of 255 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies a period when noncurrent object versions are
	// automatically deleted. (documented below).
	NoncurrentVersionExpiration []NoncurrentVersionExpirationObservation `json:"noncurrentVersionExpiration,omitempty" tf:"noncurrent_version_expiration,omitempty"`

	// Specifies a period when noncurrent object versions are
	// automatically transitioned to WARM or COLD storage class (documented below).
	NoncurrentVersionTransition []NoncurrentVersionTransitionObservation `json:"noncurrentVersionTransition,omitempty" tf:"noncurrent_version_transition,omitempty"`

	// Object key prefix identifying one or more objects to which the rule applies. If omitted,
	// all objects in the bucket will be managed by the lifecycle rule. The prefix cannot start or end with a slash (/),
	// cannot have consecutive slashes (/), and cannot contain the following special characters: :*?"<>|.
	// When configuring multiple lifecycle_rule, field prefix in multiple lifecycle_rule cannot have an inclusive
	// relationship.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Specifies a period when objects that have been last updated are automatically
	// transitioned to WARM or COLD storage class (documented below).
	Transition []TransitionObservation `json:"transition,omitempty" tf:"transition,omitempty"`
}

type LifecycleRuleParameters struct {

	// Specifies a period when the not merged parts (fragments) in an
	// incomplete upload are automatically deleted. (documented below).
	// +kubebuilder:validation:Optional
	AbortIncompleteMultipartUpload []AbortIncompleteMultipartUploadParameters `json:"abortIncompleteMultipartUpload,omitempty" tf:"abort_incomplete_multipart_upload,omitempty"`

	// Specifies lifecycle rule status.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Specifies a period when objects that have been last updated are automatically
	// deleted. (documented below).
	// +kubebuilder:validation:Optional
	Expiration []ExpirationParameters `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// Unique identifier for lifecycle rules. The Rule Name contains a maximum of 255 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies a period when noncurrent object versions are
	// automatically deleted. (documented below).
	// +kubebuilder:validation:Optional
	NoncurrentVersionExpiration []NoncurrentVersionExpirationParameters `json:"noncurrentVersionExpiration,omitempty" tf:"noncurrent_version_expiration,omitempty"`

	// Specifies a period when noncurrent object versions are
	// automatically transitioned to WARM or COLD storage class (documented below).
	// +kubebuilder:validation:Optional
	NoncurrentVersionTransition []NoncurrentVersionTransitionParameters `json:"noncurrentVersionTransition,omitempty" tf:"noncurrent_version_transition,omitempty"`

	// Object key prefix identifying one or more objects to which the rule applies. If omitted,
	// all objects in the bucket will be managed by the lifecycle rule. The prefix cannot start or end with a slash (/),
	// cannot have consecutive slashes (/), and cannot contain the following special characters: :*?"<>|.
	// When configuring multiple lifecycle_rule, field prefix in multiple lifecycle_rule cannot have an inclusive
	// relationship.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Specifies a period when objects that have been last updated are automatically
	// transitioned to WARM or COLD storage class (documented below).
	// +kubebuilder:validation:Optional
	Transition []TransitionParameters `json:"transition,omitempty" tf:"transition,omitempty"`
}

type LoggingInitParameters struct {

	// Specifies the IAM agency of OBS cloud service.
	// schema: Required
	Agency *string `json:"agency,omitempty" tf:"agency,omitempty"`

	// The name of the bucket that will receive the log objects. The acl policy of the
	// target bucket should be log-delivery-write.
	TargetBucket *string `json:"targetBucket,omitempty" tf:"target_bucket,omitempty"`

	// To specify a key prefix for log objects.
	TargetPrefix *string `json:"targetPrefix,omitempty" tf:"target_prefix,omitempty"`
}

type LoggingObservation struct {

	// Specifies the IAM agency of OBS cloud service.
	// schema: Required
	Agency *string `json:"agency,omitempty" tf:"agency,omitempty"`

	// The name of the bucket that will receive the log objects. The acl policy of the
	// target bucket should be log-delivery-write.
	TargetBucket *string `json:"targetBucket,omitempty" tf:"target_bucket,omitempty"`

	// To specify a key prefix for log objects.
	TargetPrefix *string `json:"targetPrefix,omitempty" tf:"target_prefix,omitempty"`
}

type LoggingParameters struct {

	// Specifies the IAM agency of OBS cloud service.
	// schema: Required
	// +kubebuilder:validation:Optional
	Agency *string `json:"agency,omitempty" tf:"agency,omitempty"`

	// The name of the bucket that will receive the log objects. The acl policy of the
	// target bucket should be log-delivery-write.
	// +kubebuilder:validation:Optional
	TargetBucket *string `json:"targetBucket" tf:"target_bucket,omitempty"`

	// To specify a key prefix for log objects.
	// +kubebuilder:validation:Optional
	TargetPrefix *string `json:"targetPrefix,omitempty" tf:"target_prefix,omitempty"`
}

type NoncurrentVersionExpirationInitParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type NoncurrentVersionExpirationObservation struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type NoncurrentVersionExpirationParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days" tf:"days,omitempty"`
}

type NoncurrentVersionTransitionInitParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies the storage class of the bucket. OBS provides three storage classes:
	// "STANDARD", "WARM" (Infrequent Access) and "COLD" (Archive). Defaults to STANDARD.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type NoncurrentVersionTransitionObservation struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies the storage class of the bucket. OBS provides three storage classes:
	// "STANDARD", "WARM" (Infrequent Access) and "COLD" (Archive). Defaults to STANDARD.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type NoncurrentVersionTransitionParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days" tf:"days,omitempty"`

	// Specifies the storage class of the bucket. OBS provides three storage classes:
	// "STANDARD", "WARM" (Infrequent Access) and "COLD" (Archive). Defaults to STANDARD.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass" tf:"storage_class,omitempty"`
}

type StorageInfoInitParameters struct {
}

type StorageInfoObservation struct {

	// The number of objects stored in the bucket.
	ObjectNumber *float64 `json:"objectNumber,omitempty" tf:"object_number,omitempty"`

	// The stored size of the bucket.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type StorageInfoParameters struct {
}

type TransitionInitParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies the storage class of the bucket. OBS provides three storage classes:
	// "STANDARD", "WARM" (Infrequent Access) and "COLD" (Archive). Defaults to STANDARD.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type TransitionObservation struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies the storage class of the bucket. OBS provides three storage classes:
	// "STANDARD", "WARM" (Infrequent Access) and "COLD" (Archive). Defaults to STANDARD.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type TransitionParameters struct {

	// Specifies the number of days when objects that have been last updated are automatically
	// deleted. The expiration time must be greater than the transition times.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days" tf:"days,omitempty"`

	// Specifies the storage class of the bucket. OBS provides three storage classes:
	// "STANDARD", "WARM" (Infrequent Access) and "COLD" (Archive). Defaults to STANDARD.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass" tf:"storage_class,omitempty"`
}

type WebsiteInitParameters struct {

	// Specifies the error page returned when an error occurs during static website
	// access. Only HTML, JPG, PNG, BMP, and WEBP files under the root directory are supported.
	ErrorDocument *string `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	// Unless using redirect_all_requests_to. Specifies the default homepage of the
	// static website, only HTML web pages are supported. OBS only allows files such as index.html in the root directory of
	// a bucket to function as the default homepage. That is to say, do not set the default homepage with a multi-level
	// directory structure (for example, /page/index.html).
	IndexDocument *string `json:"indexDocument,omitempty" tf:"index_document,omitempty"`

	// A hostname to redirect all website requests for this bucket to.
	// Hostname can optionally be prefixed with a protocol (http:// or https://) to use when redirecting requests. The
	// default is the protocol that is used in the original request.
	RedirectAllRequestsTo *string `json:"redirectAllRequestsTo,omitempty" tf:"redirect_all_requests_to,omitempty"`

	// A JSON or XML format containing routing rules describing redirect behavior and
	// when redirects are applied. Each rule contains a Condition and a Redirect as shown in the following table:
	RoutingRules *string `json:"routingRules,omitempty" tf:"routing_rules,omitempty"`
}

type WebsiteObservation struct {

	// Specifies the error page returned when an error occurs during static website
	// access. Only HTML, JPG, PNG, BMP, and WEBP files under the root directory are supported.
	ErrorDocument *string `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	// Unless using redirect_all_requests_to. Specifies the default homepage of the
	// static website, only HTML web pages are supported. OBS only allows files such as index.html in the root directory of
	// a bucket to function as the default homepage. That is to say, do not set the default homepage with a multi-level
	// directory structure (for example, /page/index.html).
	IndexDocument *string `json:"indexDocument,omitempty" tf:"index_document,omitempty"`

	// A hostname to redirect all website requests for this bucket to.
	// Hostname can optionally be prefixed with a protocol (http:// or https://) to use when redirecting requests. The
	// default is the protocol that is used in the original request.
	RedirectAllRequestsTo *string `json:"redirectAllRequestsTo,omitempty" tf:"redirect_all_requests_to,omitempty"`

	// A JSON or XML format containing routing rules describing redirect behavior and
	// when redirects are applied. Each rule contains a Condition and a Redirect as shown in the following table:
	RoutingRules *string `json:"routingRules,omitempty" tf:"routing_rules,omitempty"`
}

type WebsiteParameters struct {

	// Specifies the error page returned when an error occurs during static website
	// access. Only HTML, JPG, PNG, BMP, and WEBP files under the root directory are supported.
	// +kubebuilder:validation:Optional
	ErrorDocument *string `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	// Unless using redirect_all_requests_to. Specifies the default homepage of the
	// static website, only HTML web pages are supported. OBS only allows files such as index.html in the root directory of
	// a bucket to function as the default homepage. That is to say, do not set the default homepage with a multi-level
	// directory structure (for example, /page/index.html).
	// +kubebuilder:validation:Optional
	IndexDocument *string `json:"indexDocument,omitempty" tf:"index_document,omitempty"`

	// A hostname to redirect all website requests for this bucket to.
	// Hostname can optionally be prefixed with a protocol (http:// or https://) to use when redirecting requests. The
	// default is the protocol that is used in the original request.
	// +kubebuilder:validation:Optional
	RedirectAllRequestsTo *string `json:"redirectAllRequestsTo,omitempty" tf:"redirect_all_requests_to,omitempty"`

	// A JSON or XML format containing routing rules describing redirect behavior and
	// when redirects are applied. Each rule contains a Condition and a Redirect as shown in the following table:
	// +kubebuilder:validation:Optional
	RoutingRules *string `json:"routingRules,omitempty" tf:"routing_rules,omitempty"`
}

type obs_bucket_kindInitParameters struct {

	// Specifies the ACL policy for a bucket. The predefined common policies are as follows:
	// "private", "public-read", "public-read-write" and "log-delivery-write". Defaults to private.
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// Specifies the name of the bucket. Changing this parameter will create a new
	// resource. A bucket must be named according to the globally applied DNS naming regulations as follows:
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// A rule of Cross-Origin Resource Sharing (documented below).
	CorsRule []CorsRuleInitParameters `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	// Whether to enable default server-side encryption of the bucket.
	Encryption *bool `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// Specifies the enterprise project id of the OBS bucket.
	// Defaults to 0.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// A boolean that indicates all objects should be deleted from the bucket, so that the
	// bucket can be destroyed without error. Default to false.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Specifies the ID of a KMS key. If omitted, the default master key will be used. This
	// field is used only when sse_algorithm value is kms.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the project ID to which the KMS key belongs. This field is valid
	// only when kms_key_id is specified.
	KMSKeyProjectID *string `json:"kmsKeyProjectId,omitempty" tf:"kms_key_project_id,omitempty"`

	// A configuration of object lifecycle management (documented below).
	LifecycleRule []LifecycleRuleInitParameters `json:"lifecycleRule,omitempty" tf:"lifecycle_rule,omitempty"`

	// A settings of bucket logging (documented below).
	Logging []LoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// Whether enable the multi-AZ mode for the bucket. When the multi-AZ mode is
	// enabled, data in the bucket is duplicated and stored in multiple AZs.
	MultiAz *bool `json:"multiAz,omitempty" tf:"multi_az,omitempty"`

	// Whether enable a bucket as a parallel file system. Changing this will
	// create a new bucket.
	ParallelFs *bool `json:"parallelFs,omitempty" tf:"parallel_fs,omitempty"`

	// Specifies the text of the bucket policy in JSON format. For more information about obs
	// format bucket policy,
	// see the Developer Guide.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Specifies the policy format, the supported values are obs and s3. Defaults
	// to obs.
	PolicyFormat *string `json:"policyFormat,omitempty" tf:"policy_format,omitempty"`

	// Specifies bucket storage quota. Must be a positive integer in the unit of byte. The maximum
	// storage quota is 263 – 1 bytes. The default bucket storage quota is 0, indicating that the bucket storage
	// quota is not limited.
	Quota *float64 `json:"quota,omitempty" tf:"quota,omitempty"`

	// Specifies the region where this bucket will be created. If not specified, used
	// the region by the provider. Changing this will create a new bucket.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the mode of encryption algorithm. The valid values are:
	SseAlgorithm *string `json:"sseAlgorithm,omitempty" tf:"sse_algorithm,omitempty"`

	// Specifies the storage class of the bucket. OBS provides three storage classes:
	// "STANDARD", "WARM" (Infrequent Access) and "COLD" (Archive). Defaults to STANDARD.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// A mapping of tags to assign to the bucket. Each tag is represented by one key-value pair.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the user domain names. The restriction requirements for this field
	// are as follows:
	// +listType=set
	UserDomainNames []*string `json:"userDomainNames,omitempty" tf:"user_domain_names,omitempty"`

	// Whether enable versioning. Once you version-enable a bucket, it can never return to an
	// unversioned state. You can, however, suspend versioning on that bucket.
	Versioning *bool `json:"versioning,omitempty" tf:"versioning,omitempty"`

	// A website object (documented below).
	Website []WebsiteInitParameters `json:"website,omitempty" tf:"website,omitempty"`
}

type obs_bucket_kindObservation struct {

	// Specifies the ACL policy for a bucket. The predefined common policies are as follows:
	// "private", "public-read", "public-read-write" and "log-delivery-write". Defaults to private.
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// Specifies the name of the bucket. Changing this parameter will create a new
	// resource. A bucket must be named according to the globally applied DNS naming regulations as follows:
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The bucket domain name. Will be of format bucketname.obs.region.myhuaweicloud.com.
	BucketDomainName *string `json:"bucketDomainName,omitempty" tf:"bucket_domain_name,omitempty"`

	// The OBS version of the bucket.
	BucketVersion *string `json:"bucketVersion,omitempty" tf:"bucket_version,omitempty"`

	// A rule of Cross-Origin Resource Sharing (documented below).
	CorsRule []CorsRuleObservation `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	// Whether to enable default server-side encryption of the bucket.
	Encryption *bool `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// Specifies the enterprise project id of the OBS bucket.
	// Defaults to 0.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// A boolean that indicates all objects should be deleted from the bucket, so that the
	// bucket can be destroyed without error. Default to false.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// The name of the bucket.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of a KMS key. If omitted, the default master key will be used. This
	// field is used only when sse_algorithm value is kms.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the project ID to which the KMS key belongs. This field is valid
	// only when kms_key_id is specified.
	KMSKeyProjectID *string `json:"kmsKeyProjectId,omitempty" tf:"kms_key_project_id,omitempty"`

	// A configuration of object lifecycle management (documented below).
	LifecycleRule []LifecycleRuleObservation `json:"lifecycleRule,omitempty" tf:"lifecycle_rule,omitempty"`

	// A settings of bucket logging (documented below).
	Logging []LoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	// Whether enable the multi-AZ mode for the bucket. When the multi-AZ mode is
	// enabled, data in the bucket is duplicated and stored in multiple AZs.
	MultiAz *bool `json:"multiAz,omitempty" tf:"multi_az,omitempty"`

	// Whether enable a bucket as a parallel file system. Changing this will
	// create a new bucket.
	ParallelFs *bool `json:"parallelFs,omitempty" tf:"parallel_fs,omitempty"`

	// Specifies the text of the bucket policy in JSON format. For more information about obs
	// format bucket policy,
	// see the Developer Guide.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Specifies the policy format, the supported values are obs and s3. Defaults
	// to obs.
	PolicyFormat *string `json:"policyFormat,omitempty" tf:"policy_format,omitempty"`

	// Specifies bucket storage quota. Must be a positive integer in the unit of byte. The maximum
	// storage quota is 263 – 1 bytes. The default bucket storage quota is 0, indicating that the bucket storage
	// quota is not limited.
	Quota *float64 `json:"quota,omitempty" tf:"quota,omitempty"`

	// Specifies the region where this bucket will be created. If not specified, used
	// the region by the provider. Changing this will create a new bucket.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the mode of encryption algorithm. The valid values are:
	SseAlgorithm *string `json:"sseAlgorithm,omitempty" tf:"sse_algorithm,omitempty"`

	// Specifies the storage class of the bucket. OBS provides three storage classes:
	// "STANDARD", "WARM" (Infrequent Access) and "COLD" (Archive). Defaults to STANDARD.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// The OBS storage info of the bucket.
	// The object structure is documented below.
	StorageInfo []StorageInfoObservation `json:"storageInfo,omitempty" tf:"storage_info,omitempty"`

	// A mapping of tags to assign to the bucket. Each tag is represented by one key-value pair.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the user domain names. The restriction requirements for this field
	// are as follows:
	// +listType=set
	UserDomainNames []*string `json:"userDomainNames,omitempty" tf:"user_domain_names,omitempty"`

	// Whether enable versioning. Once you version-enable a bucket, it can never return to an
	// unversioned state. You can, however, suspend versioning on that bucket.
	Versioning *bool `json:"versioning,omitempty" tf:"versioning,omitempty"`

	// A website object (documented below).
	Website []WebsiteObservation `json:"website,omitempty" tf:"website,omitempty"`
}

type obs_bucket_kindParameters struct {

	// Specifies the ACL policy for a bucket. The predefined common policies are as follows:
	// "private", "public-read", "public-read-write" and "log-delivery-write". Defaults to private.
	// +kubebuilder:validation:Optional
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// Specifies the name of the bucket. Changing this parameter will create a new
	// resource. A bucket must be named according to the globally applied DNS naming regulations as follows:
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// A rule of Cross-Origin Resource Sharing (documented below).
	// +kubebuilder:validation:Optional
	CorsRule []CorsRuleParameters `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	// Whether to enable default server-side encryption of the bucket.
	// +kubebuilder:validation:Optional
	Encryption *bool `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// Specifies the enterprise project id of the OBS bucket.
	// Defaults to 0.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// A boolean that indicates all objects should be deleted from the bucket, so that the
	// bucket can be destroyed without error. Default to false.
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Specifies the ID of a KMS key. If omitted, the default master key will be used. This
	// field is used only when sse_algorithm value is kms.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the project ID to which the KMS key belongs. This field is valid
	// only when kms_key_id is specified.
	// +kubebuilder:validation:Optional
	KMSKeyProjectID *string `json:"kmsKeyProjectId,omitempty" tf:"kms_key_project_id,omitempty"`

	// A configuration of object lifecycle management (documented below).
	// +kubebuilder:validation:Optional
	LifecycleRule []LifecycleRuleParameters `json:"lifecycleRule,omitempty" tf:"lifecycle_rule,omitempty"`

	// A settings of bucket logging (documented below).
	// +kubebuilder:validation:Optional
	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// Whether enable the multi-AZ mode for the bucket. When the multi-AZ mode is
	// enabled, data in the bucket is duplicated and stored in multiple AZs.
	// +kubebuilder:validation:Optional
	MultiAz *bool `json:"multiAz,omitempty" tf:"multi_az,omitempty"`

	// Whether enable a bucket as a parallel file system. Changing this will
	// create a new bucket.
	// +kubebuilder:validation:Optional
	ParallelFs *bool `json:"parallelFs,omitempty" tf:"parallel_fs,omitempty"`

	// Specifies the text of the bucket policy in JSON format. For more information about obs
	// format bucket policy,
	// see the Developer Guide.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Specifies the policy format, the supported values are obs and s3. Defaults
	// to obs.
	// +kubebuilder:validation:Optional
	PolicyFormat *string `json:"policyFormat,omitempty" tf:"policy_format,omitempty"`

	// Specifies bucket storage quota. Must be a positive integer in the unit of byte. The maximum
	// storage quota is 263 – 1 bytes. The default bucket storage quota is 0, indicating that the bucket storage
	// quota is not limited.
	// +kubebuilder:validation:Optional
	Quota *float64 `json:"quota,omitempty" tf:"quota,omitempty"`

	// Specifies the region where this bucket will be created. If not specified, used
	// the region by the provider. Changing this will create a new bucket.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the mode of encryption algorithm. The valid values are:
	// +kubebuilder:validation:Optional
	SseAlgorithm *string `json:"sseAlgorithm,omitempty" tf:"sse_algorithm,omitempty"`

	// Specifies the storage class of the bucket. OBS provides three storage classes:
	// "STANDARD", "WARM" (Infrequent Access) and "COLD" (Archive). Defaults to STANDARD.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// A mapping of tags to assign to the bucket. Each tag is represented by one key-value pair.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the user domain names. The restriction requirements for this field
	// are as follows:
	// +kubebuilder:validation:Optional
	// +listType=set
	UserDomainNames []*string `json:"userDomainNames,omitempty" tf:"user_domain_names,omitempty"`

	// Whether enable versioning. Once you version-enable a bucket, it can never return to an
	// unversioned state. You can, however, suspend versioning on that bucket.
	// +kubebuilder:validation:Optional
	Versioning *bool `json:"versioning,omitempty" tf:"versioning,omitempty"`

	// A website object (documented below).
	// +kubebuilder:validation:Optional
	Website []WebsiteParameters `json:"website,omitempty" tf:"website,omitempty"`
}

// obs_bucket_kindSpec defines the desired state of obs_bucket_kind
type obs_bucket_kindSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     obs_bucket_kindParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider obs_bucket_kindInitParameters `json:"initProvider,omitempty"`
}

// obs_bucket_kindStatus defines the observed state of obs_bucket_kind.
type obs_bucket_kindStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        obs_bucket_kindObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// obs_bucket_kind is the Schema for the obs_bucket_kinds API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type obs_bucket_kind struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucket) || (has(self.initProvider) && has(self.initProvider.bucket))",message="spec.forProvider.bucket is a required parameter"
	Spec   obs_bucket_kindSpec   `json:"spec"`
	Status obs_bucket_kindStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// obs_bucket_kindList contains a list of obs_bucket_kinds
type obs_bucket_kindList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []obs_bucket_kind `json:"items"`
}

// Repository type metadata.
var (
	obs_bucket_kind_Kind             = "obs_bucket_kind"
	obs_bucket_kind_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: obs_bucket_kind_Kind}.String()
	obs_bucket_kind_KindAPIVersion   = obs_bucket_kind_Kind + "." + CRDGroupVersion.String()
	obs_bucket_kind_GroupVersionKind = CRDGroupVersion.WithKind(obs_bucket_kind_Kind)
)

func init() {
	SchemeBuilder.Register(&obs_bucket_kind{}, &obs_bucket_kindList{})
}
