/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnapshotPolicyAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SnapshotPolicyAttachmentParameters struct {

	// ID of CBS snapshot policy.
	// +crossplane:generate:reference:type=SnapshotPolicy
	// +kubebuilder:validation:Optional
	SnapshotPolicyID *string `json:"snapshotPolicyId,omitempty" tf:"snapshot_policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotPolicyIDRef *v1.Reference `json:"snapshotPolicyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SnapshotPolicyIDSelector *v1.Selector `json:"snapshotPolicyIdSelector,omitempty" tf:"-"`

	// ID of CBS.
	// +crossplane:generate:reference:type=Storage
	// +kubebuilder:validation:Optional
	StorageID *string `json:"storageId,omitempty" tf:"storage_id,omitempty"`

	// +kubebuilder:validation:Optional
	StorageIDRef *v1.Reference `json:"storageIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageIDSelector *v1.Selector `json:"storageIdSelector,omitempty" tf:"-"`
}

// SnapshotPolicyAttachmentSpec defines the desired state of SnapshotPolicyAttachment
type SnapshotPolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotPolicyAttachmentParameters `json:"forProvider"`
}

// SnapshotPolicyAttachmentStatus defines the observed state of SnapshotPolicyAttachment.
type SnapshotPolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotPolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotPolicyAttachment is the Schema for the SnapshotPolicyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type SnapshotPolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotPolicyAttachmentSpec   `json:"spec"`
	Status            SnapshotPolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotPolicyAttachmentList contains a list of SnapshotPolicyAttachments
type SnapshotPolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotPolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	SnapshotPolicyAttachment_Kind             = "SnapshotPolicyAttachment"
	SnapshotPolicyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotPolicyAttachment_Kind}.String()
	SnapshotPolicyAttachment_KindAPIVersion   = SnapshotPolicyAttachment_Kind + "." + CRDGroupVersion.String()
	SnapshotPolicyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotPolicyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotPolicyAttachment{}, &SnapshotPolicyAttachmentList{})
}
