/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageObservation struct {
	Attached *bool `json:"attached,omitempty" tf:"attached,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	StorageStatus *string `json:"storageStatus,omitempty" tf:"storage_status,omitempty"`
}

type StorageParameters struct {

	// The available zone that the CBS instance locates at.
	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// The charge type of CBS instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// The quota of backup points of cloud disk.
	// +kubebuilder:validation:Optional
	DiskBackupQuota *float64 `json:"diskBackupQuota,omitempty" tf:"disk_backup_quota,omitempty"`

	// Indicates whether CBS is encrypted.
	// +kubebuilder:validation:Optional
	Encrypt *bool `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// Indicate whether to delete CBS instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// The purchased usage period of CBS. Valid values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36].
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when charge_type is set to `PREPAID`. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36.
	// +kubebuilder:validation:Optional
	PrepaidPeriod *float64 `json:"prepaidPeriod,omitempty" tf:"prepaid_period,omitempty"`

	// Auto Renewal flag. Value range: `NOTIFY_AND_AUTO_RENEW`: Notify expiry and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: Neither notify expiry nor renew automatically. Default value range: `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically. NOTE: it only works when charge_type is set to `PREPAID`.
	// +kubebuilder:validation:Optional
	PrepaidRenewFlag *string `json:"prepaidRenewFlag,omitempty" tf:"prepaid_renew_flag,omitempty"`

	// ID of the project to which the instance belongs.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the snapshot. If specified, created the CBS by this snapshot.
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Name of CBS. The maximum length can not exceed 60 bytes.
	// +kubebuilder:validation:Required
	StorageName *string `json:"storageName" tf:"storage_name,omitempty"`

	// Volume of CBS, and unit is GB.
	// +kubebuilder:validation:Required
	StorageSize *float64 `json:"storageSize" tf:"storage_size,omitempty"`

	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	// +kubebuilder:validation:Required
	StorageType *string `json:"storageType" tf:"storage_type,omitempty"`

	// The available tags within this CBS.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	// +kubebuilder:validation:Optional
	ThroughputPerformance *float64 `json:"throughputPerformance,omitempty" tf:"throughput_performance,omitempty"`
}

// StorageSpec defines the desired state of Storage
type StorageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageParameters `json:"forProvider"`
}

// StorageStatus defines the observed state of Storage.
type StorageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Storage is the Schema for the Storages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Storage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageSpec   `json:"spec"`
	Status            StorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageList contains a list of Storages
type StorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Storage `json:"items"`
}

// Repository type metadata.
var (
	Storage_Kind             = "Storage"
	Storage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Storage_Kind}.String()
	Storage_KindAPIVersion   = Storage_Kind + "." + CRDGroupVersion.String()
	Storage_GroupVersionKind = CRDGroupVersion.WithKind(Storage_Kind)
)

func init() {
	SchemeBuilder.Register(&Storage{}, &StorageList{})
}
