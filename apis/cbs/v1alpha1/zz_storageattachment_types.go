/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StorageAttachmentParameters struct {

	// ID of the CVM instance.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/cvm/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// ID of the mounted CBS.
	// +crossplane:generate:reference:type=Storage
	// +kubebuilder:validation:Optional
	StorageID *string `json:"storageId,omitempty" tf:"storage_id,omitempty"`

	// +kubebuilder:validation:Optional
	StorageIDRef *v1.Reference `json:"storageIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageIDSelector *v1.Selector `json:"storageIdSelector,omitempty" tf:"-"`
}

// StorageAttachmentSpec defines the desired state of StorageAttachment
type StorageAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageAttachmentParameters `json:"forProvider"`
}

// StorageAttachmentStatus defines the observed state of StorageAttachment.
type StorageAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageAttachment is the Schema for the StorageAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type StorageAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAttachmentSpec   `json:"spec"`
	Status            StorageAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageAttachmentList contains a list of StorageAttachments
type StorageAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAttachment `json:"items"`
}

// Repository type metadata.
var (
	StorageAttachment_Kind             = "StorageAttachment"
	StorageAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageAttachment_Kind}.String()
	StorageAttachment_KindAPIVersion   = StorageAttachment_Kind + "." + CRDGroupVersion.String()
	StorageAttachment_GroupVersionKind = CRDGroupVersion.WithKind(StorageAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageAttachment{}, &StorageAttachmentList{})
}
