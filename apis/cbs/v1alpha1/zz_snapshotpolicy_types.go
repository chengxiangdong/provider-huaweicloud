/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnapshotPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SnapshotPolicyParameters struct {

	// Trigger times of periodic snapshot. Valid value ranges: (0~23). The 0 means 00:00, and so on.
	// +kubebuilder:validation:Required
	RepeatHours []*float64 `json:"repeatHours" tf:"repeat_hours,omitempty"`

	// Periodic snapshot is enabled. Valid values: [0, 1, 2, 3, 4, 5, 6]. 0 means Sunday, 1-6 means Monday to Saturday.
	// +kubebuilder:validation:Required
	RepeatWeekdays []*float64 `json:"repeatWeekdays" tf:"repeat_weekdays,omitempty"`

	// Retention days of the snapshot, and the default value is 7.
	// +kubebuilder:validation:Optional
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// Name of snapshot policy. The maximum length can not exceed 60 bytes.
	// +kubebuilder:validation:Required
	SnapshotPolicyName *string `json:"snapshotPolicyName" tf:"snapshot_policy_name,omitempty"`
}

// SnapshotPolicySpec defines the desired state of SnapshotPolicy
type SnapshotPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotPolicyParameters `json:"forProvider"`
}

// SnapshotPolicyStatus defines the observed state of SnapshotPolicy.
type SnapshotPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotPolicy is the Schema for the SnapshotPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type SnapshotPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotPolicySpec   `json:"spec"`
	Status            SnapshotPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotPolicyList contains a list of SnapshotPolicys
type SnapshotPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotPolicy `json:"items"`
}

// Repository type metadata.
var (
	SnapshotPolicy_Kind             = "SnapshotPolicy"
	SnapshotPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotPolicy_Kind}.String()
	SnapshotPolicy_KindAPIVersion   = SnapshotPolicy_Kind + "." + CRDGroupVersion.String()
	SnapshotPolicy_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotPolicy{}, &SnapshotPolicyList{})
}
