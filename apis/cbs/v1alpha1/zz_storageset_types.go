/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageSetObservation struct {
	Attached *bool `json:"attached,omitempty" tf:"attached,omitempty"`

	DiskIds []*string `json:"diskIds,omitempty" tf:"disk_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	StorageStatus *string `json:"storageStatus,omitempty" tf:"storage_status,omitempty"`
}

type StorageSetParameters struct {

	// The available zone that the CBS instance locates at.
	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// The charge type of CBS instance. Only support `POSTPAID_BY_HOUR`.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// The number of disks to be purchased. Default 1.
	// +kubebuilder:validation:Optional
	DiskCount *float64 `json:"diskCount,omitempty" tf:"disk_count,omitempty"`

	// Indicates whether CBS is encrypted.
	// +kubebuilder:validation:Optional
	Encrypt *bool `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// ID of the project to which the instance belongs.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the snapshot. If specified, created the CBS by this snapshot.
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Name of CBS. The maximum length can not exceed 60 bytes.
	// +kubebuilder:validation:Required
	StorageName *string `json:"storageName" tf:"storage_name,omitempty"`

	// Volume of CBS, and unit is GB.
	// +kubebuilder:validation:Required
	StorageSize *float64 `json:"storageSize" tf:"storage_size,omitempty"`

	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	// +kubebuilder:validation:Required
	StorageType *string `json:"storageType" tf:"storage_type,omitempty"`

	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	// +kubebuilder:validation:Optional
	ThroughputPerformance *float64 `json:"throughputPerformance,omitempty" tf:"throughput_performance,omitempty"`
}

// StorageSetSpec defines the desired state of StorageSet
type StorageSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageSetParameters `json:"forProvider"`
}

// StorageSetStatus defines the observed state of StorageSet.
type StorageSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageSet is the Schema for the StorageSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type StorageSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageSetSpec   `json:"spec"`
	Status            StorageSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageSetList contains a list of StorageSets
type StorageSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageSet `json:"items"`
}

// Repository type metadata.
var (
	StorageSet_Kind             = "StorageSet"
	StorageSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageSet_Kind}.String()
	StorageSet_KindAPIVersion   = StorageSet_Kind + "." + CRDGroupVersion.String()
	StorageSet_GroupVersionKind = CRDGroupVersion.WithKind(StorageSet_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageSet{}, &StorageSetList{})
}
