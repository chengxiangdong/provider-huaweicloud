/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityGroupsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecurityGroupsParameters struct {

	// instance id.
	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// product name, fixed to mariadb.
	// +kubebuilder:validation:Required
	Product *string `json:"product" tf:"product,omitempty"`

	// security group id.
	// +kubebuilder:validation:Required
	SecurityGroupID *string `json:"securityGroupId" tf:"security_group_id,omitempty"`
}

// SecurityGroupsSpec defines the desired state of SecurityGroups
type SecurityGroupsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityGroupsParameters `json:"forProvider"`
}

// SecurityGroupsStatus defines the observed state of SecurityGroups.
type SecurityGroupsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityGroupsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroups is the Schema for the SecurityGroupss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type SecurityGroups struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityGroupsSpec   `json:"spec"`
	Status            SecurityGroupsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupsList contains a list of SecurityGroupss
type SecurityGroupsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityGroups `json:"items"`
}

// Repository type metadata.
var (
	SecurityGroups_Kind             = "SecurityGroups"
	SecurityGroups_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityGroups_Kind}.String()
	SecurityGroups_KindAPIVersion   = SecurityGroups_Kind + "." + CRDGroupVersion.String()
	SecurityGroups_GroupVersionKind = CRDGroupVersion.WithKind(SecurityGroups_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityGroups{}, &SecurityGroupsList{})
}
