/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogFileRetentionPeriodObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LogFileRetentionPeriodParameters struct {

	// The number of days to save, cannot exceed 30.
	// +kubebuilder:validation:Required
	Days *float64 `json:"days" tf:"days,omitempty"`

	// instance id.
	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`
}

// LogFileRetentionPeriodSpec defines the desired state of LogFileRetentionPeriod
type LogFileRetentionPeriodSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogFileRetentionPeriodParameters `json:"forProvider"`
}

// LogFileRetentionPeriodStatus defines the observed state of LogFileRetentionPeriod.
type LogFileRetentionPeriodStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogFileRetentionPeriodObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogFileRetentionPeriod is the Schema for the LogFileRetentionPeriods API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type LogFileRetentionPeriod struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogFileRetentionPeriodSpec   `json:"spec"`
	Status            LogFileRetentionPeriodStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogFileRetentionPeriodList contains a list of LogFileRetentionPeriods
type LogFileRetentionPeriodList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogFileRetentionPeriod `json:"items"`
}

// Repository type metadata.
var (
	LogFileRetentionPeriod_Kind             = "LogFileRetentionPeriod"
	LogFileRetentionPeriod_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogFileRetentionPeriod_Kind}.String()
	LogFileRetentionPeriod_KindAPIVersion   = LogFileRetentionPeriod_Kind + "." + CRDGroupVersion.String()
	LogFileRetentionPeriod_GroupVersionKind = CRDGroupVersion.WithKind(LogFileRetentionPeriod_Kind)
)

func init() {
	SchemeBuilder.Register(&LogFileRetentionPeriod{}, &LogFileRetentionPeriodList{})
}
