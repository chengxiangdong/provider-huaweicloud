/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MariadbAccountObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MariadbAccountParameters struct {

	// account description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// host.
	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// instance id.
	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// account password.
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// wether account is read only, 0 means not a read only account.
	// +kubebuilder:validation:Optional
	ReadOnly *float64 `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// user name.
	// +kubebuilder:validation:Required
	UserName *string `json:"userName" tf:"user_name,omitempty"`
}

// MariadbAccountSpec defines the desired state of MariadbAccount
type MariadbAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MariadbAccountParameters `json:"forProvider"`
}

// MariadbAccountStatus defines the observed state of MariadbAccount.
type MariadbAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MariadbAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MariadbAccount is the Schema for the MariadbAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type MariadbAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MariadbAccountSpec   `json:"spec"`
	Status            MariadbAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MariadbAccountList contains a list of MariadbAccounts
type MariadbAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MariadbAccount `json:"items"`
}

// Repository type metadata.
var (
	MariadbAccount_Kind             = "MariadbAccount"
	MariadbAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MariadbAccount_Kind}.String()
	MariadbAccount_KindAPIVersion   = MariadbAccount_Kind + "." + CRDGroupVersion.String()
	MariadbAccount_GroupVersionKind = CRDGroupVersion.WithKind(MariadbAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&MariadbAccount{}, &MariadbAccountList{})
}
