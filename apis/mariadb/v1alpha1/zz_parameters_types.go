/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ParametersObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ParametersParameters struct {

	// instance id.
	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// Number of days to keep, no more than 30.
	// +kubebuilder:validation:Required
	Params []ParamsParameters `json:"params" tf:"params,omitempty"`
}

type ParamsObservation struct {
}

type ParamsParameters struct {

	// parameter name.
	// +kubebuilder:validation:Required
	Param *string `json:"param" tf:"param,omitempty"`

	// parameter value.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// ParametersSpec defines the desired state of Parameters
type ParametersSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ParametersParameters `json:"forProvider"`
}

// ParametersStatus defines the observed state of Parameters.
type ParametersStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ParametersObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Parameters is the Schema for the Parameterss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type Parameters struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ParametersSpec   `json:"spec"`
	Status            ParametersStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ParametersList contains a list of Parameterss
type ParametersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Parameters `json:"items"`
}

// Repository type metadata.
var (
	Parameters_Kind             = "Parameters"
	Parameters_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Parameters_Kind}.String()
	Parameters_KindAPIVersion   = Parameters_Kind + "." + CRDGroupVersion.String()
	Parameters_GroupVersionKind = CRDGroupVersion.WithKind(Parameters_Kind)
)

func init() {
	SchemeBuilder.Register(&Parameters{}, &ParametersList{})
}
